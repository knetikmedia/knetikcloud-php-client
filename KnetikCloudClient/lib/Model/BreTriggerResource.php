<?php
/**
 * BreTriggerResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * BreTriggerResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BreTriggerResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BreTriggerResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category' => 'string',
        'event_name' => 'string',
        'parameters' => '\KnetikCloud\Model\BreTriggerParameterDefinition[]',
        'system_trigger' => 'bool',
        'tags' => 'string[]',
        'trigger_description' => 'string',
        'trigger_name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'event_name' => 'event_name',
        'parameters' => 'parameters',
        'system_trigger' => 'system_trigger',
        'tags' => 'tags',
        'trigger_description' => 'trigger_description',
        'trigger_name' => 'trigger_name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'event_name' => 'setEventName',
        'parameters' => 'setParameters',
        'system_trigger' => 'setSystemTrigger',
        'tags' => 'setTags',
        'trigger_description' => 'setTriggerDescription',
        'trigger_name' => 'setTriggerName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'event_name' => 'getEventName',
        'parameters' => 'getParameters',
        'system_trigger' => 'getSystemTrigger',
        'tags' => 'getTags',
        'trigger_description' => 'getTriggerDescription',
        'trigger_name' => 'getTriggerName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CATEGORY_ACHIEVEMENT = 'achievement';
    const CATEGORY_BEHAVIOR = 'behavior';
    const CATEGORY_COMMENT = 'comment';
    const CATEGORY_DISPOSITION = 'disposition';
    const CATEGORY_DEVICE = 'device';
    const CATEGORY_ENTITLEMENT = 'entitlement';
    const CATEGORY_FRIENDS = 'friends';
    const CATEGORY_FULFILLMENT = 'fulfillment';
    const CATEGORY_GAMIFICATION = 'gamification';
    const CATEGORY_INVENTORY = 'inventory';
    const CATEGORY_INVOICE = 'invoice';
    const CATEGORY_MEDIA = 'media';
    const CATEGORY_SCHEDULER = 'scheduler';
    const CATEGORY_STORE = 'store';
    const CATEGORY_SUBSCRIPTION = 'subscription';
    const CATEGORY_USER = 'user';
    const CATEGORY_WALLET = 'wallet';
    const CATEGORY_CUSTOM = 'custom';
    const CATEGORY_CHALLENGE = 'challenge';
    const CATEGORY_ACTIVITY = 'activity';
    const CATEGORY_CAMPAIGN = 'campaign';
    const CATEGORY_EVENT = 'event';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_ACHIEVEMENT,
            self::CATEGORY_BEHAVIOR,
            self::CATEGORY_COMMENT,
            self::CATEGORY_DISPOSITION,
            self::CATEGORY_DEVICE,
            self::CATEGORY_ENTITLEMENT,
            self::CATEGORY_FRIENDS,
            self::CATEGORY_FULFILLMENT,
            self::CATEGORY_GAMIFICATION,
            self::CATEGORY_INVENTORY,
            self::CATEGORY_INVOICE,
            self::CATEGORY_MEDIA,
            self::CATEGORY_SCHEDULER,
            self::CATEGORY_STORE,
            self::CATEGORY_SUBSCRIPTION,
            self::CATEGORY_USER,
            self::CATEGORY_WALLET,
            self::CATEGORY_CUSTOM,
            self::CATEGORY_CHALLENGE,
            self::CATEGORY_ACTIVITY,
            self::CATEGORY_CAMPAIGN,
            self::CATEGORY_EVENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['system_trigger'] = isset($data['system_trigger']) ? $data['system_trigger'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['trigger_description'] = isset($data['trigger_description']) ? $data['trigger_description'] : null;
        $this->container['trigger_name'] = isset($data['trigger_name']) ? $data['trigger_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["achievement", "behavior", "comment", "disposition", "device", "entitlement", "friends", "fulfillment", "gamification", "inventory", "invoice", "media", "scheduler", "store", "subscription", "user", "wallet", "custom", "challenge", "activity", "campaign", "event"];
        if (!in_array($this->container['category'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'category', must be one of 'achievement', 'behavior', 'comment', 'disposition', 'device', 'entitlement', 'friends', 'fulfillment', 'gamification', 'inventory', 'invoice', 'media', 'scheduler', 'store', 'subscription', 'user', 'wallet', 'custom', 'challenge', 'activity', 'campaign', 'event'.";
        }

        if ($this->container['event_name'] === null) {
            $invalid_properties[] = "'event_name' can't be null";
        }
        if ($this->container['trigger_description'] === null) {
            $invalid_properties[] = "'trigger_description' can't be null";
        }
        if ($this->container['trigger_name'] === null) {
            $invalid_properties[] = "'trigger_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["achievement", "behavior", "comment", "disposition", "device", "entitlement", "friends", "fulfillment", "gamification", "inventory", "invoice", "media", "scheduler", "store", "subscription", "user", "wallet", "custom", "challenge", "activity", "campaign", "event"];
        if (!in_array($this->container['category'], $allowed_values)) {
            return false;
        }
        if ($this->container['event_name'] === null) {
            return false;
        }
        if ($this->container['trigger_description'] === null) {
            return false;
        }
        if ($this->container['trigger_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category The category this trigger belongs to. See endpoints for related asset information. All new triggers are in category 'custom'
     * @return $this
     */
    public function setCategory($category)
    {
        $allowed_values = array('achievement', 'behavior', 'comment', 'disposition', 'device', 'entitlement', 'friends', 'fulfillment', 'gamification', 'inventory', 'invoice', 'media', 'scheduler', 'store', 'subscription', 'user', 'wallet', 'custom', 'challenge', 'activity', 'campaign', 'event');
        if (!is_null($category) && (!in_array($category, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'category', must be one of 'achievement', 'behavior', 'comment', 'disposition', 'device', 'entitlement', 'friends', 'fulfillment', 'gamification', 'inventory', 'invoice', 'media', 'scheduler', 'store', 'subscription', 'user', 'wallet', 'custom', 'challenge', 'activity', 'campaign', 'event'");
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets event_name
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     * @param string $event_name The unique name for the event. This serves as the unique identifier. Cannot be changed after creation
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets parameters
     * @return \KnetikCloud\Model\BreTriggerParameterDefinition[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     * @param \KnetikCloud\Model\BreTriggerParameterDefinition[] $parameters A list of parameters that will be sent with the event when the trigger is fired. These must be included in the event and match the described types
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets system_trigger
     * @return bool
     */
    public function getSystemTrigger()
    {
        return $this->container['system_trigger'];
    }

    /**
     * Sets system_trigger
     * @param bool $system_trigger Where this trigger came from. System triggers cannot be removed or updated
     * @return $this
     */
    public function setSystemTrigger($system_trigger)
    {
        $this->container['system_trigger'] = $system_trigger;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags A list of tags for filtering
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets trigger_description
     * @return string
     */
    public function getTriggerDescription()
    {
        return $this->container['trigger_description'];
    }

    /**
     * Sets trigger_description
     * @param string $trigger_description A description of the trigger
     * @return $this
     */
    public function setTriggerDescription($trigger_description)
    {
        $this->container['trigger_description'] = $trigger_description;

        return $this;
    }

    /**
     * Gets trigger_name
     * @return string
     */
    public function getTriggerName()
    {
        return $this->container['trigger_name'];
    }

    /**
     * Sets trigger_name
     * @param string $trigger_name A human readable name for this trigger
     * @return $this
     */
    public function setTriggerName($trigger_name)
    {
        $this->container['trigger_name'] = $trigger_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


