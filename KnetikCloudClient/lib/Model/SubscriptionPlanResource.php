<?php
/**
 * SubscriptionPlanResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * SubscriptionPlanResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionPlanResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionPlanResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'billing_cycle_length' => 'int',
        'billing_cycle_unit' => 'string',
        'consolidated' => 'bool',
        'currency_code' => 'string',
        'end_date' => 'int',
        'first_billing_cycle_length' => 'int',
        'first_billing_cycle_unit' => 'string',
        'grace_period' => 'int',
        'id' => 'string',
        'initial_fee' => 'float',
        'initial_sku' => 'string',
        'late_payment_fee' => 'float',
        'late_payment_sku' => 'string',
        'locked' => 'bool',
        'max_bill_attempts' => 'int',
        'max_cycles' => 'int',
        'migrate_to_plan' => 'string',
        'min_cycles' => 'int',
        'name' => 'string',
        'published' => 'bool',
        'reactivation_fee' => 'float',
        'reactivation_sku' => 'string',
        'recurring_fee' => 'float',
        'recurring_sku' => 'string',
        'start_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_properties' => null,
        'billing_cycle_length' => 'int32',
        'billing_cycle_unit' => null,
        'consolidated' => null,
        'currency_code' => null,
        'end_date' => 'int64',
        'first_billing_cycle_length' => 'int32',
        'first_billing_cycle_unit' => null,
        'grace_period' => 'int32',
        'id' => null,
        'initial_fee' => null,
        'initial_sku' => null,
        'late_payment_fee' => null,
        'late_payment_sku' => null,
        'locked' => null,
        'max_bill_attempts' => 'int32',
        'max_cycles' => 'int32',
        'migrate_to_plan' => null,
        'min_cycles' => 'int32',
        'name' => null,
        'published' => null,
        'reactivation_fee' => null,
        'reactivation_sku' => null,
        'recurring_fee' => null,
        'recurring_sku' => null,
        'start_date' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_properties' => 'additional_properties',
        'billing_cycle_length' => 'billing_cycle_length',
        'billing_cycle_unit' => 'billing_cycle_unit',
        'consolidated' => 'consolidated',
        'currency_code' => 'currency_code',
        'end_date' => 'end_date',
        'first_billing_cycle_length' => 'first_billing_cycle_length',
        'first_billing_cycle_unit' => 'first_billing_cycle_unit',
        'grace_period' => 'grace_period',
        'id' => 'id',
        'initial_fee' => 'initial_fee',
        'initial_sku' => 'initial_sku',
        'late_payment_fee' => 'late_payment_fee',
        'late_payment_sku' => 'late_payment_sku',
        'locked' => 'locked',
        'max_bill_attempts' => 'max_bill_attempts',
        'max_cycles' => 'max_cycles',
        'migrate_to_plan' => 'migrate_to_plan',
        'min_cycles' => 'min_cycles',
        'name' => 'name',
        'published' => 'published',
        'reactivation_fee' => 'reactivation_fee',
        'reactivation_sku' => 'reactivation_sku',
        'recurring_fee' => 'recurring_fee',
        'recurring_sku' => 'recurring_sku',
        'start_date' => 'start_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'additional_properties' => 'setAdditionalProperties',
        'billing_cycle_length' => 'setBillingCycleLength',
        'billing_cycle_unit' => 'setBillingCycleUnit',
        'consolidated' => 'setConsolidated',
        'currency_code' => 'setCurrencyCode',
        'end_date' => 'setEndDate',
        'first_billing_cycle_length' => 'setFirstBillingCycleLength',
        'first_billing_cycle_unit' => 'setFirstBillingCycleUnit',
        'grace_period' => 'setGracePeriod',
        'id' => 'setId',
        'initial_fee' => 'setInitialFee',
        'initial_sku' => 'setInitialSku',
        'late_payment_fee' => 'setLatePaymentFee',
        'late_payment_sku' => 'setLatePaymentSku',
        'locked' => 'setLocked',
        'max_bill_attempts' => 'setMaxBillAttempts',
        'max_cycles' => 'setMaxCycles',
        'migrate_to_plan' => 'setMigrateToPlan',
        'min_cycles' => 'setMinCycles',
        'name' => 'setName',
        'published' => 'setPublished',
        'reactivation_fee' => 'setReactivationFee',
        'reactivation_sku' => 'setReactivationSku',
        'recurring_fee' => 'setRecurringFee',
        'recurring_sku' => 'setRecurringSku',
        'start_date' => 'setStartDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'additional_properties' => 'getAdditionalProperties',
        'billing_cycle_length' => 'getBillingCycleLength',
        'billing_cycle_unit' => 'getBillingCycleUnit',
        'consolidated' => 'getConsolidated',
        'currency_code' => 'getCurrencyCode',
        'end_date' => 'getEndDate',
        'first_billing_cycle_length' => 'getFirstBillingCycleLength',
        'first_billing_cycle_unit' => 'getFirstBillingCycleUnit',
        'grace_period' => 'getGracePeriod',
        'id' => 'getId',
        'initial_fee' => 'getInitialFee',
        'initial_sku' => 'getInitialSku',
        'late_payment_fee' => 'getLatePaymentFee',
        'late_payment_sku' => 'getLatePaymentSku',
        'locked' => 'getLocked',
        'max_bill_attempts' => 'getMaxBillAttempts',
        'max_cycles' => 'getMaxCycles',
        'migrate_to_plan' => 'getMigrateToPlan',
        'min_cycles' => 'getMinCycles',
        'name' => 'getName',
        'published' => 'getPublished',
        'reactivation_fee' => 'getReactivationFee',
        'reactivation_sku' => 'getReactivationSku',
        'recurring_fee' => 'getRecurringFee',
        'recurring_sku' => 'getRecurringSku',
        'start_date' => 'getStartDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const BILLING_CYCLE_UNIT_MILLISECOND = 'millisecond';
    const BILLING_CYCLE_UNIT_SECOND = 'second';
    const BILLING_CYCLE_UNIT_MINUTE = 'minute';
    const BILLING_CYCLE_UNIT_HOUR = 'hour';
    const BILLING_CYCLE_UNIT_DAY = 'day';
    const BILLING_CYCLE_UNIT_WEEK = 'week';
    const BILLING_CYCLE_UNIT_MONTH = 'month';
    const BILLING_CYCLE_UNIT_YEAR = 'year';
    const FIRST_BILLING_CYCLE_UNIT_MILLISECOND = 'millisecond';
    const FIRST_BILLING_CYCLE_UNIT_SECOND = 'second';
    const FIRST_BILLING_CYCLE_UNIT_MINUTE = 'minute';
    const FIRST_BILLING_CYCLE_UNIT_HOUR = 'hour';
    const FIRST_BILLING_CYCLE_UNIT_DAY = 'day';
    const FIRST_BILLING_CYCLE_UNIT_WEEK = 'week';
    const FIRST_BILLING_CYCLE_UNIT_MONTH = 'month';
    const FIRST_BILLING_CYCLE_UNIT_YEAR = 'year';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillingCycleUnitAllowableValues()
    {
        return [
            self::BILLING_CYCLE_UNIT_MILLISECOND,
            self::BILLING_CYCLE_UNIT_SECOND,
            self::BILLING_CYCLE_UNIT_MINUTE,
            self::BILLING_CYCLE_UNIT_HOUR,
            self::BILLING_CYCLE_UNIT_DAY,
            self::BILLING_CYCLE_UNIT_WEEK,
            self::BILLING_CYCLE_UNIT_MONTH,
            self::BILLING_CYCLE_UNIT_YEAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFirstBillingCycleUnitAllowableValues()
    {
        return [
            self::FIRST_BILLING_CYCLE_UNIT_MILLISECOND,
            self::FIRST_BILLING_CYCLE_UNIT_SECOND,
            self::FIRST_BILLING_CYCLE_UNIT_MINUTE,
            self::FIRST_BILLING_CYCLE_UNIT_HOUR,
            self::FIRST_BILLING_CYCLE_UNIT_DAY,
            self::FIRST_BILLING_CYCLE_UNIT_WEEK,
            self::FIRST_BILLING_CYCLE_UNIT_MONTH,
            self::FIRST_BILLING_CYCLE_UNIT_YEAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['billing_cycle_length'] = isset($data['billing_cycle_length']) ? $data['billing_cycle_length'] : null;
        $this->container['billing_cycle_unit'] = isset($data['billing_cycle_unit']) ? $data['billing_cycle_unit'] : null;
        $this->container['consolidated'] = isset($data['consolidated']) ? $data['consolidated'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['first_billing_cycle_length'] = isset($data['first_billing_cycle_length']) ? $data['first_billing_cycle_length'] : null;
        $this->container['first_billing_cycle_unit'] = isset($data['first_billing_cycle_unit']) ? $data['first_billing_cycle_unit'] : null;
        $this->container['grace_period'] = isset($data['grace_period']) ? $data['grace_period'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['initial_fee'] = isset($data['initial_fee']) ? $data['initial_fee'] : null;
        $this->container['initial_sku'] = isset($data['initial_sku']) ? $data['initial_sku'] : null;
        $this->container['late_payment_fee'] = isset($data['late_payment_fee']) ? $data['late_payment_fee'] : null;
        $this->container['late_payment_sku'] = isset($data['late_payment_sku']) ? $data['late_payment_sku'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['max_bill_attempts'] = isset($data['max_bill_attempts']) ? $data['max_bill_attempts'] : null;
        $this->container['max_cycles'] = isset($data['max_cycles']) ? $data['max_cycles'] : null;
        $this->container['migrate_to_plan'] = isset($data['migrate_to_plan']) ? $data['migrate_to_plan'] : null;
        $this->container['min_cycles'] = isset($data['min_cycles']) ? $data['min_cycles'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['reactivation_fee'] = isset($data['reactivation_fee']) ? $data['reactivation_fee'] : null;
        $this->container['reactivation_sku'] = isset($data['reactivation_sku']) ? $data['reactivation_sku'] : null;
        $this->container['recurring_fee'] = isset($data['recurring_fee']) ? $data['recurring_fee'] : null;
        $this->container['recurring_sku'] = isset($data['recurring_sku']) ? $data['recurring_sku'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['billing_cycle_length'] === null) {
            $invalid_properties[] = "'billing_cycle_length' can't be null";
        }
        if ($this->container['billing_cycle_unit'] === null) {
            $invalid_properties[] = "'billing_cycle_unit' can't be null";
        }
        $allowed_values = $this->getBillingCycleUnitAllowableValues();
        if (!in_array($this->container['billing_cycle_unit'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'billing_cycle_unit', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['consolidated'] === null) {
            $invalid_properties[] = "'consolidated' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalid_properties[] = "'currency_code' can't be null";
        }
        $allowed_values = $this->getFirstBillingCycleUnitAllowableValues();
        if (!in_array($this->container['first_billing_cycle_unit'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'first_billing_cycle_unit', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['grace_period'] === null) {
            $invalid_properties[] = "'grace_period' can't be null";
        }
        if ($this->container['initial_fee'] === null) {
            $invalid_properties[] = "'initial_fee' can't be null";
        }
        if ($this->container['late_payment_fee'] === null) {
            $invalid_properties[] = "'late_payment_fee' can't be null";
        }
        if ($this->container['max_bill_attempts'] === null) {
            $invalid_properties[] = "'max_bill_attempts' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['published'] === null) {
            $invalid_properties[] = "'published' can't be null";
        }
        if ($this->container['reactivation_fee'] === null) {
            $invalid_properties[] = "'reactivation_fee' can't be null";
        }
        if ($this->container['recurring_fee'] === null) {
            $invalid_properties[] = "'recurring_fee' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['billing_cycle_length'] === null) {
            return false;
        }
        if ($this->container['billing_cycle_unit'] === null) {
            return false;
        }
        $allowed_values = $this->getBillingCycleUnitAllowableValues();
        if (!in_array($this->container['billing_cycle_unit'], $allowed_values)) {
            return false;
        }
        if ($this->container['consolidated'] === null) {
            return false;
        }
        if ($this->container['currency_code'] === null) {
            return false;
        }
        $allowed_values = $this->getFirstBillingCycleUnitAllowableValues();
        if (!in_array($this->container['first_billing_cycle_unit'], $allowed_values)) {
            return false;
        }
        if ($this->container['grace_period'] === null) {
            return false;
        }
        if ($this->container['initial_fee'] === null) {
            return false;
        }
        if ($this->container['late_payment_fee'] === null) {
            return false;
        }
        if ($this->container['max_bill_attempts'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['published'] === null) {
            return false;
        }
        if ($this->container['reactivation_fee'] === null) {
            return false;
        }
        if ($this->container['recurring_fee'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this subscription
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets billing_cycle_length
     * @return int
     */
    public function getBillingCycleLength()
    {
        return $this->container['billing_cycle_length'];
    }

    /**
     * Sets billing_cycle_length
     * @param int $billing_cycle_length The length of the billing cycle in number of billing cycle unit
     * @return $this
     */
    public function setBillingCycleLength($billing_cycle_length)
    {
        $this->container['billing_cycle_length'] = $billing_cycle_length;

        return $this;
    }

    /**
     * Gets billing_cycle_unit
     * @return string
     */
    public function getBillingCycleUnit()
    {
        return $this->container['billing_cycle_unit'];
    }

    /**
     * Sets billing_cycle_unit
     * @param string $billing_cycle_unit The time period unit to apply to the length of billing cycles
     * @return $this
     */
    public function setBillingCycleUnit($billing_cycle_unit)
    {
        $allowed_values = $this->getBillingCycleUnitAllowableValues();
        if (!in_array($billing_cycle_unit, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_cycle_unit', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['billing_cycle_unit'] = $billing_cycle_unit;

        return $this;
    }

    /**
     * Gets consolidated
     * @return bool
     */
    public function getConsolidated()
    {
        return $this->container['consolidated'];
    }

    /**
     * Sets consolidated
     * @param bool $consolidated Whether this plan will be renewed on the consolidated billing cycle
     * @return $this
     */
    public function setConsolidated($consolidated)
    {
        $this->container['consolidated'] = $consolidated;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code The ISO3 currency code to use for the fees
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets end_date
     * @return int
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param int $end_date Used to schedule plan availability end date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets first_billing_cycle_length
     * @return int
     */
    public function getFirstBillingCycleLength()
    {
        return $this->container['first_billing_cycle_length'];
    }

    /**
     * Sets first_billing_cycle_length
     * @param int $first_billing_cycle_length Optional override for the length of the first billing cycle before the first recurring billing
     * @return $this
     */
    public function setFirstBillingCycleLength($first_billing_cycle_length)
    {
        $this->container['first_billing_cycle_length'] = $first_billing_cycle_length;

        return $this;
    }

    /**
     * Gets first_billing_cycle_unit
     * @return string
     */
    public function getFirstBillingCycleUnit()
    {
        return $this->container['first_billing_cycle_unit'];
    }

    /**
     * Sets first_billing_cycle_unit
     * @param string $first_billing_cycle_unit The time period unit to apply to the length of the first billing cycle. Required when first_billing_cycle_length is specified
     * @return $this
     */
    public function setFirstBillingCycleUnit($first_billing_cycle_unit)
    {
        $allowed_values = $this->getFirstBillingCycleUnitAllowableValues();
        if (!is_null($first_billing_cycle_unit) && !in_array($first_billing_cycle_unit, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'first_billing_cycle_unit', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['first_billing_cycle_unit'] = $first_billing_cycle_unit;

        return $this;
    }

    /**
     * Gets grace_period
     * @return int
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     * @param int $grace_period The number of late payment days before a subscription is canceled
     * @return $this
     */
    public function setGracePeriod($grace_period)
    {
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The id of the plan used to generate the SKUs
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets initial_fee
     * @return float
     */
    public function getInitialFee()
    {
        return $this->container['initial_fee'];
    }

    /**
     * Sets initial_fee
     * @param float $initial_fee The fee charged when the subscription is purchased
     * @return $this
     */
    public function setInitialFee($initial_fee)
    {
        $this->container['initial_fee'] = $initial_fee;

        return $this;
    }

    /**
     * Gets initial_sku
     * @return string
     */
    public function getInitialSku()
    {
        return $this->container['initial_sku'];
    }

    /**
     * Sets initial_sku
     * @param string $initial_sku The SKU to be used when purchasing the subscription through the cart
     * @return $this
     */
    public function setInitialSku($initial_sku)
    {
        $this->container['initial_sku'] = $initial_sku;

        return $this;
    }

    /**
     * Gets late_payment_fee
     * @return float
     */
    public function getLatePaymentFee()
    {
        return $this->container['late_payment_fee'];
    }

    /**
     * Sets late_payment_fee
     * @param float $late_payment_fee The fee to add to the bill when an invoice has gone unpaid passed the grace period
     * @return $this
     */
    public function setLatePaymentFee($late_payment_fee)
    {
        $this->container['late_payment_fee'] = $late_payment_fee;

        return $this;
    }

    /**
     * Gets late_payment_sku
     * @return string
     */
    public function getLatePaymentSku()
    {
        return $this->container['late_payment_sku'];
    }

    /**
     * Sets late_payment_sku
     * @param string $late_payment_sku The SKU that will show on the invoice when the subscription is delinquent
     * @return $this
     */
    public function setLatePaymentSku($late_payment_sku)
    {
        $this->container['late_payment_sku'] = $late_payment_sku;

        return $this;
    }

    /**
     * Gets locked
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     * @param bool $locked Whether this plan is locked because it has been purchased by at least one user.  When locked, a number of properties can no longer be changed
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets max_bill_attempts
     * @return int
     */
    public function getMaxBillAttempts()
    {
        return $this->container['max_bill_attempts'];
    }

    /**
     * Sets max_bill_attempts
     * @param int $max_bill_attempts The number of charge attempts before the subscription becomes delinquent
     * @return $this
     */
    public function setMaxBillAttempts($max_bill_attempts)
    {
        $this->container['max_bill_attempts'] = $max_bill_attempts;

        return $this;
    }

    /**
     * Gets max_cycles
     * @return int
     */
    public function getMaxCycles()
    {
        return $this->container['max_cycles'];
    }

    /**
     * Sets max_cycles
     * @param int $max_cycles Maximum number of renewals. If a migration plan is provided, the subscription will automatically switch to it when this limit is reached
     * @return $this
     */
    public function setMaxCycles($max_cycles)
    {
        $this->container['max_cycles'] = $max_cycles;

        return $this;
    }

    /**
     * Gets migrate_to_plan
     * @return string
     */
    public function getMigrateToPlan()
    {
        return $this->container['migrate_to_plan'];
    }

    /**
     * Sets migrate_to_plan
     * @param string $migrate_to_plan Automatically migrate to the specified plan when the subscription is first renewed
     * @return $this
     */
    public function setMigrateToPlan($migrate_to_plan)
    {
        $this->container['migrate_to_plan'] = $migrate_to_plan;

        return $this;
    }

    /**
     * Gets min_cycles
     * @return int
     */
    public function getMinCycles()
    {
        return $this->container['min_cycles'];
    }

    /**
     * Sets min_cycles
     * @param int $min_cycles The minimum number of renewals to charge for
     * @return $this
     */
    public function setMinCycles($min_cycles)
    {
        $this->container['min_cycles'] = $min_cycles;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the plan used to generate the SKUs
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets published
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     * @param bool $published Whether this plan is currently available
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets reactivation_fee
     * @return float
     */
    public function getReactivationFee()
    {
        return $this->container['reactivation_fee'];
    }

    /**
     * Sets reactivation_fee
     * @param float $reactivation_fee The fee to charge when a suspended subscription is to be re-activated
     * @return $this
     */
    public function setReactivationFee($reactivation_fee)
    {
        $this->container['reactivation_fee'] = $reactivation_fee;

        return $this;
    }

    /**
     * Gets reactivation_sku
     * @return string
     */
    public function getReactivationSku()
    {
        return $this->container['reactivation_sku'];
    }

    /**
     * Sets reactivation_sku
     * @param string $reactivation_sku The SKU that will show on the invoice when the subscription is re-activated after a suspension
     * @return $this
     */
    public function setReactivationSku($reactivation_sku)
    {
        $this->container['reactivation_sku'] = $reactivation_sku;

        return $this;
    }

    /**
     * Gets recurring_fee
     * @return float
     */
    public function getRecurringFee()
    {
        return $this->container['recurring_fee'];
    }

    /**
     * Sets recurring_fee
     * @param float $recurring_fee The recurring fee to charge for each renewal
     * @return $this
     */
    public function setRecurringFee($recurring_fee)
    {
        $this->container['recurring_fee'] = $recurring_fee;

        return $this;
    }

    /**
     * Gets recurring_sku
     * @return string
     */
    public function getRecurringSku()
    {
        return $this->container['recurring_sku'];
    }

    /**
     * Sets recurring_sku
     * @param string $recurring_sku The SKU that will show on the invoice when the subscription is activated
     * @return $this
     */
    public function setRecurringSku($recurring_sku)
    {
        $this->container['recurring_sku'] = $recurring_sku;

        return $this;
    }

    /**
     * Gets start_date
     * @return int
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param int $start_date Used to schedule plan availability start date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


