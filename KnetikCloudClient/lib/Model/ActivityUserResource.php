<?php
/**
 * ActivityUserResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * ActivityUserResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ActivityUserResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ActivityUserResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'host' => 'bool',
        'id' => 'int',
        'joined_date' => 'int',
        'left_date' => 'int',
        'metric' => '\KnetikCloud\Model\MetricResource',
        'status' => 'string',
        'user' => '\KnetikCloud\Model\SimpleUserResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'host' => 'host',
        'id' => 'id',
        'joined_date' => 'joined_date',
        'left_date' => 'left_date',
        'metric' => 'metric',
        'status' => 'status',
        'user' => 'user'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'host' => 'setHost',
        'id' => 'setId',
        'joined_date' => 'setJoinedDate',
        'left_date' => 'setLeftDate',
        'metric' => 'setMetric',
        'status' => 'setStatus',
        'user' => 'setUser'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'host' => 'getHost',
        'id' => 'getId',
        'joined_date' => 'getJoinedDate',
        'left_date' => 'getLeftDate',
        'metric' => 'getMetric',
        'status' => 'getStatus',
        'user' => 'getUser'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_PRESENT = 'present';
    const STATUS_READY = 'ready';
    const STATUS_LEFT = 'left';
    const STATUS_SURRENDERED = 'surrendered';
    const STATUS_DISCONNECTED = 'disconnected';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PRESENT,
            self::STATUS_READY,
            self::STATUS_LEFT,
            self::STATUS_SURRENDERED,
            self::STATUS_DISCONNECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['joined_date'] = isset($data['joined_date']) ? $data['joined_date'] : null;
        $this->container['left_date'] = isset($data['left_date']) ? $data['left_date'] : null;
        $this->container['metric'] = isset($data['metric']) ? $data['metric'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["present", "ready", "left", "surrendered", "disconnected"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'present', 'ready', 'left', 'surrendered', 'disconnected'.";
        }

        if ($this->container['user'] === null) {
            $invalid_properties[] = "'user' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["present", "ready", "left", "surrendered", "disconnected"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['user'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets host
     * @return bool
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     * @param bool $host Whether this user is the 'host' of the occurrence and has increased access to settings/etc (default: false)
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the activity user entry
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets joined_date
     * @return int
     */
    public function getJoinedDate()
    {
        return $this->container['joined_date'];
    }

    /**
     * Sets joined_date
     * @param int $joined_date The date this user last joined the occurrence, unix timestamp in seconds
     * @return $this
     */
    public function setJoinedDate($joined_date)
    {
        $this->container['joined_date'] = $joined_date;

        return $this;
    }

    /**
     * Gets left_date
     * @return int
     */
    public function getLeftDate()
    {
        return $this->container['left_date'];
    }

    /**
     * Sets left_date
     * @param int $left_date The date this user last left the occurrence, unix timestamp in seconds. Null if still present
     * @return $this
     */
    public function setLeftDate($left_date)
    {
        $this->container['left_date'] = $left_date;

        return $this;
    }

    /**
     * Gets metric
     * @return \KnetikCloud\Model\MetricResource
     */
    public function getMetric()
    {
        return $this->container['metric'];
    }

    /**
     * Sets metric
     * @param \KnetikCloud\Model\MetricResource $metric The metric for the user's results, after the game is over
     * @return $this
     */
    public function setMetric($metric)
    {
        $this->container['metric'] = $metric;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status The current status of the user in the occurrence (default: present)
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('present', 'ready', 'left', 'surrendered', 'disconnected');
        if (!is_null($status) && (!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'present', 'ready', 'left', 'surrendered', 'disconnected'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user
     * @return \KnetikCloud\Model\SimpleUserResource
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     * @param \KnetikCloud\Model\SimpleUserResource $user The user
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


