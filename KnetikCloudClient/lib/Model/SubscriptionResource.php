<?php
/**
 * SubscriptionResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * SubscriptionResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'availability' => 'string',
        'category' => 'string',
        'consolidation_day_of_month' => 'int',
        'created_date' => 'int',
        'geo_country_list' => 'string[]',
        'geo_policy_type' => 'string',
        'id' => 'int',
        'long_description' => 'string',
        'name' => 'string',
        'plans' => '\KnetikCloud\Model\SubscriptionPlanResource[]',
        'short_description' => 'string',
        'sort' => 'int',
        'store_end' => 'int',
        'store_start' => 'int',
        'tags' => 'string[]',
        'template' => 'string',
        'unique_key' => 'string',
        'updated_date' => 'int',
        'vendor_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_properties' => null,
        'availability' => null,
        'category' => null,
        'consolidation_day_of_month' => 'int32',
        'created_date' => 'int64',
        'geo_country_list' => null,
        'geo_policy_type' => null,
        'id' => 'int32',
        'long_description' => null,
        'name' => null,
        'plans' => null,
        'short_description' => null,
        'sort' => 'int32',
        'store_end' => 'int64',
        'store_start' => 'int64',
        'tags' => null,
        'template' => null,
        'unique_key' => null,
        'updated_date' => 'int64',
        'vendor_id' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_properties' => 'additional_properties',
        'availability' => 'availability',
        'category' => 'category',
        'consolidation_day_of_month' => 'consolidation_day_of_month',
        'created_date' => 'created_date',
        'geo_country_list' => 'geo_country_list',
        'geo_policy_type' => 'geo_policy_type',
        'id' => 'id',
        'long_description' => 'long_description',
        'name' => 'name',
        'plans' => 'plans',
        'short_description' => 'short_description',
        'sort' => 'sort',
        'store_end' => 'store_end',
        'store_start' => 'store_start',
        'tags' => 'tags',
        'template' => 'template',
        'unique_key' => 'unique_key',
        'updated_date' => 'updated_date',
        'vendor_id' => 'vendor_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'additional_properties' => 'setAdditionalProperties',
        'availability' => 'setAvailability',
        'category' => 'setCategory',
        'consolidation_day_of_month' => 'setConsolidationDayOfMonth',
        'created_date' => 'setCreatedDate',
        'geo_country_list' => 'setGeoCountryList',
        'geo_policy_type' => 'setGeoPolicyType',
        'id' => 'setId',
        'long_description' => 'setLongDescription',
        'name' => 'setName',
        'plans' => 'setPlans',
        'short_description' => 'setShortDescription',
        'sort' => 'setSort',
        'store_end' => 'setStoreEnd',
        'store_start' => 'setStoreStart',
        'tags' => 'setTags',
        'template' => 'setTemplate',
        'unique_key' => 'setUniqueKey',
        'updated_date' => 'setUpdatedDate',
        'vendor_id' => 'setVendorId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'additional_properties' => 'getAdditionalProperties',
        'availability' => 'getAvailability',
        'category' => 'getCategory',
        'consolidation_day_of_month' => 'getConsolidationDayOfMonth',
        'created_date' => 'getCreatedDate',
        'geo_country_list' => 'getGeoCountryList',
        'geo_policy_type' => 'getGeoPolicyType',
        'id' => 'getId',
        'long_description' => 'getLongDescription',
        'name' => 'getName',
        'plans' => 'getPlans',
        'short_description' => 'getShortDescription',
        'sort' => 'getSort',
        'store_end' => 'getStoreEnd',
        'store_start' => 'getStoreStart',
        'tags' => 'getTags',
        'template' => 'getTemplate',
        'unique_key' => 'getUniqueKey',
        'updated_date' => 'getUpdatedDate',
        'vendor_id' => 'getVendorId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const AVAILABILITY_ALL = 'all';
    const AVAILABILITY_NEW_SUBSCRIBERS = 'new_subscribers';
    const GEO_POLICY_TYPE_WHITELIST = 'whitelist';
    const GEO_POLICY_TYPE_BLACKLIST = 'blacklist';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAvailabilityAllowableValues()
    {
        return [
            self::AVAILABILITY_ALL,
            self::AVAILABILITY_NEW_SUBSCRIBERS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGeoPolicyTypeAllowableValues()
    {
        return [
            self::GEO_POLICY_TYPE_WHITELIST,
            self::GEO_POLICY_TYPE_BLACKLIST,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['consolidation_day_of_month'] = isset($data['consolidation_day_of_month']) ? $data['consolidation_day_of_month'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['geo_country_list'] = isset($data['geo_country_list']) ? $data['geo_country_list'] : null;
        $this->container['geo_policy_type'] = isset($data['geo_policy_type']) ? $data['geo_policy_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['plans'] = isset($data['plans']) ? $data['plans'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['store_end'] = isset($data['store_end']) ? $data['store_end'] : null;
        $this->container['store_start'] = isset($data['store_start']) ? $data['store_start'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['unique_key'] = isset($data['unique_key']) ? $data['unique_key'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getAvailabilityAllowableValues();
        if (!in_array($this->container['availability'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'availability', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getGeoPolicyTypeAllowableValues();
        if (!in_array($this->container['geo_policy_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'geo_policy_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['vendor_id'] === null) {
            $invalid_properties[] = "'vendor_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getAvailabilityAllowableValues();
        if (!in_array($this->container['availability'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getGeoPolicyTypeAllowableValues();
        if (!in_array($this->container['geo_policy_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['vendor_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties A map of item additional properties, keyed on the property name. Must match the names and types defined in the template for this item type.
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets availability
     * @return string
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     * @param string $availability Who can purchase this subscription
     * @return $this
     */
    public function setAvailability($availability)
    {
        $allowed_values = $this->getAvailabilityAllowableValues();
        if (!is_null($availability) && !in_array($availability, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'availability', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category A category for filtering items
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets consolidation_day_of_month
     * @return int
     */
    public function getConsolidationDayOfMonth()
    {
        return $this->container['consolidation_day_of_month'];
    }

    /**
     * Sets consolidation_day_of_month
     * @param int $consolidation_day_of_month The day of the month 1..31 this subscription will renew
     * @return $this
     */
    public function setConsolidationDayOfMonth($consolidation_day_of_month)
    {
        $this->container['consolidation_day_of_month'] = $consolidation_day_of_month;

        return $this;
    }

    /**
     * Gets created_date
     * @return int
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     * @param int $created_date The date the item was created, unix timestamp in seconds
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets geo_country_list
     * @return string[]
     */
    public function getGeoCountryList()
    {
        return $this->container['geo_country_list'];
    }

    /**
     * Sets geo_country_list
     * @param string[] $geo_country_list A list of country iso3 codes to include in the blacklist/whitelist geo policy
     * @return $this
     */
    public function setGeoCountryList($geo_country_list)
    {
        $this->container['geo_country_list'] = $geo_country_list;

        return $this;
    }

    /**
     * Gets geo_policy_type
     * @return string
     */
    public function getGeoPolicyType()
    {
        return $this->container['geo_policy_type'];
    }

    /**
     * Sets geo_policy_type
     * @param string $geo_policy_type Whether to use the geo_country_list as a black list or white list for item geographical availability
     * @return $this
     */
    public function setGeoPolicyType($geo_policy_type)
    {
        $allowed_values = $this->getGeoPolicyTypeAllowableValues();
        if (!is_null($geo_policy_type) && !in_array($geo_policy_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'geo_policy_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['geo_policy_type'] = $geo_policy_type;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the item
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets long_description
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     * @param string $long_description A long description of the subscription
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the item
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plans
     * @return \KnetikCloud\Model\SubscriptionPlanResource[]
     */
    public function getPlans()
    {
        return $this->container['plans'];
    }

    /**
     * Sets plans
     * @param \KnetikCloud\Model\SubscriptionPlanResource[] $plans The billing options for this subscription
     * @return $this
     */
    public function setPlans($plans)
    {
        $this->container['plans'] = $plans;

        return $this;
    }

    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     * @param string $short_description A short description of the subscription.  Max 255 characters
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets sort
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     * @param int $sort A number to use in sorting items.  Default 500
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets store_end
     * @return int
     */
    public function getStoreEnd()
    {
        return $this->container['store_end'];
    }

    /**
     * Sets store_end
     * @param int $store_end Used to schedule removal from store.  Null means the subscription will never be removed
     * @return $this
     */
    public function setStoreEnd($store_end)
    {
        $this->container['store_end'] = $store_end;

        return $this;
    }

    /**
     * Gets store_start
     * @return int
     */
    public function getStoreStart()
    {
        return $this->container['store_start'];
    }

    /**
     * Sets store_start
     * @param int $store_start Used to schedule appearance in store.  Null means the subscription will appear now
     * @return $this
     */
    public function setStoreStart($store_start)
    {
        $this->container['store_start'] = $store_start;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags List of tags used for filtering items
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template An item template this item is validated against. May be null and no validation of additional properties will be done.
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets unique_key
     * @return string
     */
    public function getUniqueKey()
    {
        return $this->container['unique_key'];
    }

    /**
     * Sets unique_key
     * @param string $unique_key The unique key for the item
     * @return $this
     */
    public function setUniqueKey($unique_key)
    {
        $this->container['unique_key'] = $unique_key;

        return $this;
    }

    /**
     * Gets updated_date
     * @return int
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     * @param int $updated_date The date the item was last updated
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets vendor_id
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     * @param int $vendor_id The vendor who provides the item
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


