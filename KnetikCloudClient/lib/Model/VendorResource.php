<?php
/**
 * VendorResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * VendorResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VendorResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VendorResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'create_date' => 'int',
        'description' => 'string',
        'id' => 'int',
        'image_url' => 'string',
        'manual_approval' => 'bool',
        'name' => 'string',
        'primary_contact_email' => 'string',
        'primary_contact_name' => 'string',
        'primary_contact_phone' => 'string',
        'sales_email' => 'string',
        'support_email' => 'string',
        'template' => 'string',
        'update_date' => 'int',
        'url' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'additional_properties' => 'additional_properties',
        'create_date' => 'create_date',
        'description' => 'description',
        'id' => 'id',
        'image_url' => 'image_url',
        'manual_approval' => 'manual_approval',
        'name' => 'name',
        'primary_contact_email' => 'primary_contact_email',
        'primary_contact_name' => 'primary_contact_name',
        'primary_contact_phone' => 'primary_contact_phone',
        'sales_email' => 'sales_email',
        'support_email' => 'support_email',
        'template' => 'template',
        'update_date' => 'update_date',
        'url' => 'url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'additional_properties' => 'setAdditionalProperties',
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'id' => 'setId',
        'image_url' => 'setImageUrl',
        'manual_approval' => 'setManualApproval',
        'name' => 'setName',
        'primary_contact_email' => 'setPrimaryContactEmail',
        'primary_contact_name' => 'setPrimaryContactName',
        'primary_contact_phone' => 'setPrimaryContactPhone',
        'sales_email' => 'setSalesEmail',
        'support_email' => 'setSupportEmail',
        'template' => 'setTemplate',
        'update_date' => 'setUpdateDate',
        'url' => 'setUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'additional_properties' => 'getAdditionalProperties',
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'id' => 'getId',
        'image_url' => 'getImageUrl',
        'manual_approval' => 'getManualApproval',
        'name' => 'getName',
        'primary_contact_email' => 'getPrimaryContactEmail',
        'primary_contact_name' => 'getPrimaryContactName',
        'primary_contact_phone' => 'getPrimaryContactPhone',
        'sales_email' => 'getSalesEmail',
        'support_email' => 'getSupportEmail',
        'template' => 'getTemplate',
        'update_date' => 'getUpdateDate',
        'url' => 'getUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['manual_approval'] = isset($data['manual_approval']) ? $data['manual_approval'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['primary_contact_email'] = isset($data['primary_contact_email']) ? $data['primary_contact_email'] : null;
        $this->container['primary_contact_name'] = isset($data['primary_contact_name']) ? $data['primary_contact_name'] : null;
        $this->container['primary_contact_phone'] = isset($data['primary_contact_phone']) ? $data['primary_contact_phone'] : null;
        $this->container['sales_email'] = isset($data['sales_email']) ? $data['sales_email'] : null;
        $this->container['support_email'] = isset($data['support_email']) ? $data['support_email'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active Whether the vendor is active.  Default = true
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this user type, or be an extra not from the template
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets create_date
     * @return int
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     * @param int $create_date The date the vendor was added. Unix timestamp in seconds
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description A description of the vendor
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the vendor
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     * @param string $image_url The url of an image for the vendor
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets manual_approval
     * @return bool
     */
    public function getManualApproval()
    {
        return $this->container['manual_approval'];
    }

    /**
     * Sets manual_approval
     * @param bool $manual_approval Whether the vendor needs to manually approve invoices before they are paid.  A separate checkout flow is required in this case.  Default: false
     * @return $this
     */
    public function setManualApproval($manual_approval)
    {
        $this->container['manual_approval'] = $manual_approval;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the vendor
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets primary_contact_email
     * @return string
     */
    public function getPrimaryContactEmail()
    {
        return $this->container['primary_contact_email'];
    }

    /**
     * Sets primary_contact_email
     * @param string $primary_contact_email The primary email address for the vendor
     * @return $this
     */
    public function setPrimaryContactEmail($primary_contact_email)
    {
        $this->container['primary_contact_email'] = $primary_contact_email;

        return $this;
    }

    /**
     * Gets primary_contact_name
     * @return string
     */
    public function getPrimaryContactName()
    {
        return $this->container['primary_contact_name'];
    }

    /**
     * Sets primary_contact_name
     * @param string $primary_contact_name The name of the primary contact for the vendor
     * @return $this
     */
    public function setPrimaryContactName($primary_contact_name)
    {
        $this->container['primary_contact_name'] = $primary_contact_name;

        return $this;
    }

    /**
     * Gets primary_contact_phone
     * @return string
     */
    public function getPrimaryContactPhone()
    {
        return $this->container['primary_contact_phone'];
    }

    /**
     * Sets primary_contact_phone
     * @param string $primary_contact_phone The primary phone number for the vendor
     * @return $this
     */
    public function setPrimaryContactPhone($primary_contact_phone)
    {
        $this->container['primary_contact_phone'] = $primary_contact_phone;

        return $this;
    }

    /**
     * Gets sales_email
     * @return string
     */
    public function getSalesEmail()
    {
        return $this->container['sales_email'];
    }

    /**
     * Sets sales_email
     * @param string $sales_email The email address for sale inquiries for the vendor
     * @return $this
     */
    public function setSalesEmail($sales_email)
    {
        $this->container['sales_email'] = $sales_email;

        return $this;
    }

    /**
     * Gets support_email
     * @return string
     */
    public function getSupportEmail()
    {
        return $this->container['support_email'];
    }

    /**
     * Sets support_email
     * @param string $support_email The email address for support inquiries for the vendor
     * @return $this
     */
    public function setSupportEmail($support_email)
    {
        $this->container['support_email'] = $support_email;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template A user template this user is validated against (private). May be null and no validation of properties will be done
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets update_date
     * @return int
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     * @param int $update_date The date the vendor was last updated. Unix timestamp in seconds
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url The url for the vendor's site
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


