<?php
/**
 * TimePeriodGettable
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * TimePeriodGettable Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TimePeriodGettable extends Behavior implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TimePeriodGettable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'get_limit' => 'int',
        'group_name' => 'string',
        'time_length' => 'int',
        'unit_of_time' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'get_limit' => 'get_limit',
        'group_name' => 'group_name',
        'time_length' => 'time_length',
        'unit_of_time' => 'unit_of_time'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'get_limit' => 'setGetLimit',
        'group_name' => 'setGroupName',
        'time_length' => 'setTimeLength',
        'unit_of_time' => 'setUnitOfTime'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'get_limit' => 'getGetLimit',
        'group_name' => 'getGroupName',
        'time_length' => 'getTimeLength',
        'unit_of_time' => 'getUnitOfTime'
    ];

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['get_limit'] = isset($data['get_limit']) ? $data['get_limit'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['time_length'] = isset($data['time_length']) ? $data['time_length'] : null;
        $this->container['unit_of_time'] = isset($data['unit_of_time']) ? $data['unit_of_time'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = parent::listInvalidProperties();

        if ($this->container['get_limit'] === null) {
            $invalid_properties[] = "'get_limit' can't be null";
        }
        if ($this->container['time_length'] === null) {
            $invalid_properties[] = "'time_length' can't be null";
        }
        if ($this->container['unit_of_time'] === null) {
            $invalid_properties[] = "'unit_of_time' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        if ($this->container['get_limit'] === null) {
            return false;
        }
        if ($this->container['time_length'] === null) {
            return false;
        }
        if ($this->container['unit_of_time'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets get_limit
     * @return int
     */
    public function getGetLimit()
    {
        return $this->container['get_limit'];
    }

    /**
     * Sets get_limit
     * @param int $get_limit The time period limit
     * @return $this
     */
    public function setGetLimit($get_limit)
    {
        $this->container['get_limit'] = $get_limit;

        return $this;
    }

    /**
     * Gets group_name
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     * @param string $group_name The name of a group of items. Multiple items with the same group name will be limited together, leave null to be assigned a random unique name. It is typical that the other properties here will be the same for all, but this is not enforced and the item being recieved will use its settings.
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets time_length
     * @return int
     */
    public function getTimeLength()
    {
        return $this->container['time_length'];
    }

    /**
     * Sets time_length
     * @param int $time_length The length of time
     * @return $this
     */
    public function setTimeLength($time_length)
    {
        $this->container['time_length'] = $time_length;

        return $this;
    }

    /**
     * Gets unit_of_time
     * @return string
     */
    public function getUnitOfTime()
    {
        return $this->container['unit_of_time'];
    }

    /**
     * Sets unit_of_time
     * @param string $unit_of_time The unit of time
     * @return $this
     */
    public function setUnitOfTime($unit_of_time)
    {
        $this->container['unit_of_time'] = $unit_of_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


