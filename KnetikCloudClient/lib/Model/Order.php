<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * Order Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Order implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ascending' => 'bool',
        'direction' => 'string',
        'ignore_case' => 'bool',
        'null_handling' => 'string',
        'property' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ascending' => 'ascending',
        'direction' => 'direction',
        'ignore_case' => 'ignore_case',
        'null_handling' => 'null_handling',
        'property' => 'property'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ascending' => 'setAscending',
        'direction' => 'setDirection',
        'ignore_case' => 'setIgnoreCase',
        'null_handling' => 'setNullHandling',
        'property' => 'setProperty'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ascending' => 'getAscending',
        'direction' => 'getDirection',
        'ignore_case' => 'getIgnoreCase',
        'null_handling' => 'getNullHandling',
        'property' => 'getProperty'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const DIRECTION_ASC = 'ASC';
    const DIRECTION_DESC = 'DESC';
    const NULL_HANDLING_NATIVE = 'NATIVE';
    const NULL_HANDLING_NULLS_FIRST = 'NULLS_FIRST';
    const NULL_HANDLING_NULLS_LAST = 'NULLS_LAST';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_ASC,
            self::DIRECTION_DESC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getNullHandlingAllowableValues()
    {
        return [
            self::NULL_HANDLING_NATIVE,
            self::NULL_HANDLING_NULLS_FIRST,
            self::NULL_HANDLING_NULLS_LAST,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ascending'] = isset($data['ascending']) ? $data['ascending'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['ignore_case'] = isset($data['ignore_case']) ? $data['ignore_case'] : null;
        $this->container['null_handling'] = isset($data['null_handling']) ? $data['null_handling'] : null;
        $this->container['property'] = isset($data['property']) ? $data['property'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["ASC", "DESC"];
        if (!in_array($this->container['direction'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'direction', must be one of 'ASC', 'DESC'.";
        }

        $allowed_values = ["NATIVE", "NULLS_FIRST", "NULLS_LAST"];
        if (!in_array($this->container['null_handling'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'null_handling', must be one of 'NATIVE', 'NULLS_FIRST', 'NULLS_LAST'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["ASC", "DESC"];
        if (!in_array($this->container['direction'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NATIVE", "NULLS_FIRST", "NULLS_LAST"];
        if (!in_array($this->container['null_handling'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets ascending
     * @return bool
     */
    public function getAscending()
    {
        return $this->container['ascending'];
    }

    /**
     * Sets ascending
     * @param bool $ascending
     * @return $this
     */
    public function setAscending($ascending)
    {
        $this->container['ascending'] = $ascending;

        return $this;
    }

    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     * @param string $direction
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowed_values = array('ASC', 'DESC');
        if (!is_null($direction) && (!in_array($direction, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'direction', must be one of 'ASC', 'DESC'");
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets ignore_case
     * @return bool
     */
    public function getIgnoreCase()
    {
        return $this->container['ignore_case'];
    }

    /**
     * Sets ignore_case
     * @param bool $ignore_case
     * @return $this
     */
    public function setIgnoreCase($ignore_case)
    {
        $this->container['ignore_case'] = $ignore_case;

        return $this;
    }

    /**
     * Gets null_handling
     * @return string
     */
    public function getNullHandling()
    {
        return $this->container['null_handling'];
    }

    /**
     * Sets null_handling
     * @param string $null_handling
     * @return $this
     */
    public function setNullHandling($null_handling)
    {
        $allowed_values = array('NATIVE', 'NULLS_FIRST', 'NULLS_LAST');
        if (!is_null($null_handling) && (!in_array($null_handling, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'null_handling', must be one of 'NATIVE', 'NULLS_FIRST', 'NULLS_LAST'");
        }
        $this->container['null_handling'] = $null_handling;

        return $this;
    }

    /**
     * Gets property
     * @return string
     */
    public function getProperty()
    {
        return $this->container['property'];
    }

    /**
     * Sets property
     * @param string $property
     * @return $this
     */
    public function setProperty($property)
    {
        $this->container['property'] = $property;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


