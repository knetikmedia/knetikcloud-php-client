<?php
/**
 * Sku
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * Sku Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Sku implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Sku';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'currency_code' => 'string',
        'description' => 'string',
        'inventory' => 'int',
        'min_inventory_threshold' => 'int',
        'original_price' => 'double',
        'price' => 'double',
        'published' => 'bool',
        'sale_id' => 'int',
        'sale_name' => 'string',
        'sku' => 'string',
        'start_date' => 'int',
        'stop_date' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_properties' => 'additional_properties',
        'currency_code' => 'currency_code',
        'description' => 'description',
        'inventory' => 'inventory',
        'min_inventory_threshold' => 'min_inventory_threshold',
        'original_price' => 'original_price',
        'price' => 'price',
        'published' => 'published',
        'sale_id' => 'sale_id',
        'sale_name' => 'sale_name',
        'sku' => 'sku',
        'start_date' => 'start_date',
        'stop_date' => 'stop_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'additional_properties' => 'setAdditionalProperties',
        'currency_code' => 'setCurrencyCode',
        'description' => 'setDescription',
        'inventory' => 'setInventory',
        'min_inventory_threshold' => 'setMinInventoryThreshold',
        'original_price' => 'setOriginalPrice',
        'price' => 'setPrice',
        'published' => 'setPublished',
        'sale_id' => 'setSaleId',
        'sale_name' => 'setSaleName',
        'sku' => 'setSku',
        'start_date' => 'setStartDate',
        'stop_date' => 'setStopDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'additional_properties' => 'getAdditionalProperties',
        'currency_code' => 'getCurrencyCode',
        'description' => 'getDescription',
        'inventory' => 'getInventory',
        'min_inventory_threshold' => 'getMinInventoryThreshold',
        'original_price' => 'getOriginalPrice',
        'price' => 'getPrice',
        'published' => 'getPublished',
        'sale_id' => 'getSaleId',
        'sale_name' => 'getSaleName',
        'sku' => 'getSku',
        'start_date' => 'getStartDate',
        'stop_date' => 'getStopDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['min_inventory_threshold'] = isset($data['min_inventory_threshold']) ? $data['min_inventory_threshold'] : null;
        $this->container['original_price'] = isset($data['original_price']) ? $data['original_price'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['sale_id'] = isset($data['sale_id']) ? $data['sale_id'] : null;
        $this->container['sale_name'] = isset($data['sale_name']) ? $data['sale_name'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['stop_date'] = isset($data['stop_date']) ? $data['stop_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['currency_code'] === null) {
            $invalid_properties[] = "'currency_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['original_price'] === null) {
            $invalid_properties[] = "'original_price' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalid_properties[] = "'sku' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['currency_code'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['original_price'] === null) {
            return false;
        }
        if ($this->container['sku'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code The currency code for the SKU, a three letter string (ISO3)
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The friendly name of the SKU as it will appear on invoices and reports. Typically represents the option name like red, large, etc
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets inventory
     * @return int
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     * @param int $inventory The number of SKUs currently in stock
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets min_inventory_threshold
     * @return int
     */
    public function getMinInventoryThreshold()
    {
        return $this->container['min_inventory_threshold'];
    }

    /**
     * Sets min_inventory_threshold
     * @param int $min_inventory_threshold Alerts vendor when SKU inventory drops below this value
     * @return $this
     */
    public function setMinInventoryThreshold($min_inventory_threshold)
    {
        $this->container['min_inventory_threshold'] = $min_inventory_threshold;

        return $this;
    }

    /**
     * Gets original_price
     * @return double
     */
    public function getOriginalPrice()
    {
        return $this->container['original_price'];
    }

    /**
     * Sets original_price
     * @param double $original_price The base price before any sale
     * @return $this
     */
    public function setOriginalPrice($original_price)
    {
        $this->container['original_price'] = $original_price;

        return $this;
    }

    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param double $price The current price of the SKU with sales, if any. Set original_price for the base
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets published
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     * @param bool $published Whether or not the SKU is currently published
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets sale_id
     * @return int
     */
    public function getSaleId()
    {
        return $this->container['sale_id'];
    }

    /**
     * Sets sale_id
     * @param int $sale_id The id of a sale affecting the price, if any
     * @return $this
     */
    public function setSaleId($sale_id)
    {
        $this->container['sale_id'] = $sale_id;

        return $this;
    }

    /**
     * Gets sale_name
     * @return string
     */
    public function getSaleName()
    {
        return $this->container['sale_name'];
    }

    /**
     * Sets sale_name
     * @param string $sale_name The name of a sale affecting the price, if any
     * @return $this
     */
    public function setSaleName($sale_name)
    {
        $this->container['sale_name'] = $sale_name;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku The stock keeping unit (SKU), a unique identifier for a given product.  Max 40 characters
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets start_date
     * @return int
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param int $start_date The date the sku becomes available, unix timestamp in seconds.  If set to null, sku will become available immediately
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets stop_date
     * @return int
     */
    public function getStopDate()
    {
        return $this->container['stop_date'];
    }

    /**
     * Sets stop_date
     * @param int $stop_date The date the sku becomes unavailable, unix timestamp in seconds.  If set to null, sku is always available
     * @return $this
     */
    public function setStopDate($stop_date)
    {
        $this->container['stop_date'] = $stop_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


