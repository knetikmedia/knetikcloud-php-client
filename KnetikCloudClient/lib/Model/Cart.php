<?php
/**
 * Cart
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * Cart Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Cart implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Cart';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'available_shipping_options' => '\KnetikCloud\Model\CartShippingOption[]',
        'country_tax' => 'double',
        'coupons' => '\KnetikCloud\Model\CouponDefinition[]',
        'created' => 'int',
        'currency_code' => 'string',
        'discount_total' => 'double',
        'error_code' => 'int',
        'error_message' => 'string',
        'grand_total' => 'double',
        'id' => 'string',
        'invoice_id' => 'double',
        'items' => '\KnetikCloud\Model\CartLineItem[]',
        'owner' => 'int',
        'selected_shipping_options' => '\KnetikCloud\Model\CartShippingOption[]',
        'shippable' => 'bool',
        'shipping_address' => '\KnetikCloud\Model\CartShippingAddressRequest',
        'shipping_cost' => 'double',
        'state_tax' => 'double',
        'status' => 'string',
        'subtotal' => 'double',
        'updated' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'available_shipping_options' => null,
        'country_tax' => 'double',
        'coupons' => null,
        'created' => 'int64',
        'currency_code' => null,
        'discount_total' => 'double',
        'error_code' => 'int32',
        'error_message' => null,
        'grand_total' => 'double',
        'id' => null,
        'invoice_id' => 'double',
        'items' => null,
        'owner' => 'int32',
        'selected_shipping_options' => null,
        'shippable' => null,
        'shipping_address' => null,
        'shipping_cost' => 'double',
        'state_tax' => 'double',
        'status' => null,
        'subtotal' => 'double',
        'updated' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'available_shipping_options' => 'available_shipping_options',
        'country_tax' => 'country_tax',
        'coupons' => 'coupons',
        'created' => 'created',
        'currency_code' => 'currency_code',
        'discount_total' => 'discount_total',
        'error_code' => 'error_code',
        'error_message' => 'error_message',
        'grand_total' => 'grand_total',
        'id' => 'id',
        'invoice_id' => 'invoice_id',
        'items' => 'items',
        'owner' => 'owner',
        'selected_shipping_options' => 'selected_shipping_options',
        'shippable' => 'shippable',
        'shipping_address' => 'shipping_address',
        'shipping_cost' => 'shipping_cost',
        'state_tax' => 'state_tax',
        'status' => 'status',
        'subtotal' => 'subtotal',
        'updated' => 'updated'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'available_shipping_options' => 'setAvailableShippingOptions',
        'country_tax' => 'setCountryTax',
        'coupons' => 'setCoupons',
        'created' => 'setCreated',
        'currency_code' => 'setCurrencyCode',
        'discount_total' => 'setDiscountTotal',
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage',
        'grand_total' => 'setGrandTotal',
        'id' => 'setId',
        'invoice_id' => 'setInvoiceId',
        'items' => 'setItems',
        'owner' => 'setOwner',
        'selected_shipping_options' => 'setSelectedShippingOptions',
        'shippable' => 'setShippable',
        'shipping_address' => 'setShippingAddress',
        'shipping_cost' => 'setShippingCost',
        'state_tax' => 'setStateTax',
        'status' => 'setStatus',
        'subtotal' => 'setSubtotal',
        'updated' => 'setUpdated'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'available_shipping_options' => 'getAvailableShippingOptions',
        'country_tax' => 'getCountryTax',
        'coupons' => 'getCoupons',
        'created' => 'getCreated',
        'currency_code' => 'getCurrencyCode',
        'discount_total' => 'getDiscountTotal',
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage',
        'grand_total' => 'getGrandTotal',
        'id' => 'getId',
        'invoice_id' => 'getInvoiceId',
        'items' => 'getItems',
        'owner' => 'getOwner',
        'selected_shipping_options' => 'getSelectedShippingOptions',
        'shippable' => 'getShippable',
        'shipping_address' => 'getShippingAddress',
        'shipping_cost' => 'getShippingCost',
        'state_tax' => 'getStateTax',
        'status' => 'getStatus',
        'subtotal' => 'getSubtotal',
        'updated' => 'getUpdated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_ACTIVE = 'active';
    const STATUS_PROCESSING = 'processing';
    const STATUS_CLOSED = 'closed';
    const STATUS_ONHOLD = 'onhold';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_PROCESSING,
            self::STATUS_CLOSED,
            self::STATUS_ONHOLD,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['available_shipping_options'] = isset($data['available_shipping_options']) ? $data['available_shipping_options'] : null;
        $this->container['country_tax'] = isset($data['country_tax']) ? $data['country_tax'] : null;
        $this->container['coupons'] = isset($data['coupons']) ? $data['coupons'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['discount_total'] = isset($data['discount_total']) ? $data['discount_total'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['grand_total'] = isset($data['grand_total']) ? $data['grand_total'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['selected_shipping_options'] = isset($data['selected_shipping_options']) ? $data['selected_shipping_options'] : null;
        $this->container['shippable'] = isset($data['shippable']) ? $data['shippable'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['shipping_cost'] = isset($data['shipping_cost']) ? $data['shipping_cost'] : null;
        $this->container['state_tax'] = isset($data['state_tax']) ? $data['state_tax'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets available_shipping_options
     * @return \KnetikCloud\Model\CartShippingOption[]
     */
    public function getAvailableShippingOptions()
    {
        return $this->container['available_shipping_options'];
    }

    /**
     * Sets available_shipping_options
     * @param \KnetikCloud\Model\CartShippingOption[] $available_shipping_options
     * @return $this
     */
    public function setAvailableShippingOptions($available_shipping_options)
    {
        $this->container['available_shipping_options'] = $available_shipping_options;

        return $this;
    }

    /**
     * Gets country_tax
     * @return double
     */
    public function getCountryTax()
    {
        return $this->container['country_tax'];
    }

    /**
     * Sets country_tax
     * @param double $country_tax
     * @return $this
     */
    public function setCountryTax($country_tax)
    {
        $this->container['country_tax'] = $country_tax;

        return $this;
    }

    /**
     * Gets coupons
     * @return \KnetikCloud\Model\CouponDefinition[]
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     * @param \KnetikCloud\Model\CouponDefinition[] $coupons
     * @return $this
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets created
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param int $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets discount_total
     * @return double
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     * @param double $discount_total
     * @return $this
     */
    public function setDiscountTotal($discount_total)
    {
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets error_code
     * @return int
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     * @param int $error_code
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     * @param string $error_message
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets grand_total
     * @return double
     */
    public function getGrandTotal()
    {
        return $this->container['grand_total'];
    }

    /**
     * Sets grand_total
     * @param double $grand_total
     * @return $this
     */
    public function setGrandTotal($grand_total)
    {
        $this->container['grand_total'] = $grand_total;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_id
     * @return double
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     * @param double $invoice_id
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets items
     * @return \KnetikCloud\Model\CartLineItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     * @param \KnetikCloud\Model\CartLineItem[] $items
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets owner
     * @return int
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param int $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets selected_shipping_options
     * @return \KnetikCloud\Model\CartShippingOption[]
     */
    public function getSelectedShippingOptions()
    {
        return $this->container['selected_shipping_options'];
    }

    /**
     * Sets selected_shipping_options
     * @param \KnetikCloud\Model\CartShippingOption[] $selected_shipping_options
     * @return $this
     */
    public function setSelectedShippingOptions($selected_shipping_options)
    {
        $this->container['selected_shipping_options'] = $selected_shipping_options;

        return $this;
    }

    /**
     * Gets shippable
     * @return bool
     */
    public function getShippable()
    {
        return $this->container['shippable'];
    }

    /**
     * Sets shippable
     * @param bool $shippable
     * @return $this
     */
    public function setShippable($shippable)
    {
        $this->container['shippable'] = $shippable;

        return $this;
    }

    /**
     * Gets shipping_address
     * @return \KnetikCloud\Model\CartShippingAddressRequest
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     * @param \KnetikCloud\Model\CartShippingAddressRequest $shipping_address
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_cost
     * @return double
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     * @param double $shipping_cost
     * @return $this
     */
    public function setShippingCost($shipping_cost)
    {
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets state_tax
     * @return double
     */
    public function getStateTax()
    {
        return $this->container['state_tax'];
    }

    /**
     * Sets state_tax
     * @param double $state_tax
     * @return $this
     */
    public function setStateTax($state_tax)
    {
        $this->container['state_tax'] = $state_tax;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subtotal
     * @return double
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     * @param double $subtotal
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets updated
     * @return int
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param int $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


