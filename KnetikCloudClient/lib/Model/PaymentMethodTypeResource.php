<?php
/**
 * PaymentMethodTypeResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * PaymentMethodTypeResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentMethodTypeResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentMethodTypeResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'invoice_processing_hours' => 'int',
        'name' => 'string',
        'supports_capture' => 'bool',
        'supports_partial' => 'bool',
        'supports_rebill' => 'bool',
        'supports_refunds' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'invoice_processing_hours' => 'int32',
        'name' => null,
        'supports_capture' => null,
        'supports_partial' => null,
        'supports_rebill' => null,
        'supports_refunds' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice_processing_hours' => 'invoice_processing_hours',
        'name' => 'name',
        'supports_capture' => 'supports_capture',
        'supports_partial' => 'supports_partial',
        'supports_rebill' => 'supports_rebill',
        'supports_refunds' => 'supports_refunds'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice_processing_hours' => 'setInvoiceProcessingHours',
        'name' => 'setName',
        'supports_capture' => 'setSupportsCapture',
        'supports_partial' => 'setSupportsPartial',
        'supports_rebill' => 'setSupportsRebill',
        'supports_refunds' => 'setSupportsRefunds'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice_processing_hours' => 'getInvoiceProcessingHours',
        'name' => 'getName',
        'supports_capture' => 'getSupportsCapture',
        'supports_partial' => 'getSupportsPartial',
        'supports_rebill' => 'getSupportsRebill',
        'supports_refunds' => 'getSupportsRefunds'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_processing_hours'] = isset($data['invoice_processing_hours']) ? $data['invoice_processing_hours'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['supports_capture'] = isset($data['supports_capture']) ? $data['supports_capture'] : null;
        $this->container['supports_partial'] = isset($data['supports_partial']) ? $data['supports_partial'] : null;
        $this->container['supports_rebill'] = isset($data['supports_rebill']) ? $data['supports_rebill'] : null;
        $this->container['supports_refunds'] = isset($data['supports_refunds']) ? $data['supports_refunds'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the payment method type
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_processing_hours
     * @return int
     */
    public function getInvoiceProcessingHours()
    {
        return $this->container['invoice_processing_hours'];
    }

    /**
     * Sets invoice_processing_hours
     * @param int $invoice_processing_hours The maximum timelimit in hours for an invoice in the processing status while waiting on this payment method type. Defaults to the global config invoice.processing_expiration_hours if null
     * @return $this
     */
    public function setInvoiceProcessingHours($invoice_processing_hours)
    {
        $this->container['invoice_processing_hours'] = $invoice_processing_hours;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the payment method type
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets supports_capture
     * @return bool
     */
    public function getSupportsCapture()
    {
        return $this->container['supports_capture'];
    }

    /**
     * Sets supports_capture
     * @param bool $supports_capture Whether the payment handler supports the authorize and capture flow
     * @return $this
     */
    public function setSupportsCapture($supports_capture)
    {
        $this->container['supports_capture'] = $supports_capture;

        return $this;
    }

    /**
     * Gets supports_partial
     * @return bool
     */
    public function getSupportsPartial()
    {
        return $this->container['supports_partial'];
    }

    /**
     * Sets supports_partial
     * @param bool $supports_partial Whether the payment handler supports paying for part of an invoice, rather than the full grand_total
     * @return $this
     */
    public function setSupportsPartial($supports_partial)
    {
        $this->container['supports_partial'] = $supports_partial;

        return $this;
    }

    /**
     * Gets supports_rebill
     * @return bool
     */
    public function getSupportsRebill()
    {
        return $this->container['supports_rebill'];
    }

    /**
     * Sets supports_rebill
     * @param bool $supports_rebill Whether the payment handler supports rebilling the method later (for saved payments or subscriptions)
     * @return $this
     */
    public function setSupportsRebill($supports_rebill)
    {
        $this->container['supports_rebill'] = $supports_rebill;

        return $this;
    }

    /**
     * Gets supports_refunds
     * @return bool
     */
    public function getSupportsRefunds()
    {
        return $this->container['supports_refunds'];
    }

    /**
     * Sets supports_refunds
     * @param bool $supports_refunds Whether the payment handler supports refunding
     * @return $this
     */
    public function setSupportsRefunds($supports_refunds)
    {
        $this->container['supports_refunds'] = $supports_refunds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


