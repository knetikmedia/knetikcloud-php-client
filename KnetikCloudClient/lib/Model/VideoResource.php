<?php
/**
 * VideoResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * VideoResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VideoResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VideoResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'author' => '\KnetikCloud\Model\SimpleReferenceResourceLong_',
        'authored' => 'int',
        'banned' => 'bool',
        'category' => '\KnetikCloud\Model\SimpleReferenceResourceString_',
        'comments' => '\KnetikCloud\Model\CommentResource[]',
        'contributors' => '\KnetikCloud\Model\ContributionResource[]',
        'created_date' => 'int',
        'embed' => 'string',
        'extension' => 'string',
        'height' => 'int',
        'id' => 'int',
        'length' => 'int',
        'location' => 'string',
        'long_description' => 'string',
        'mime_type' => 'string',
        'name' => 'string',
        'priority' => 'int',
        'privacy' => 'string',
        'published' => 'bool',
        'short_description' => 'string',
        'size' => 'int',
        'tags' => 'string[]',
        'thumbnail' => 'string',
        'updated_date' => 'int',
        'uploader' => '\KnetikCloud\Model\SimpleUserResource',
        'views' => 'int',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'author' => null,
        'authored' => 'int64',
        'banned' => null,
        'category' => null,
        'comments' => null,
        'contributors' => null,
        'created_date' => 'int64',
        'embed' => null,
        'extension' => null,
        'height' => 'int32',
        'id' => 'int64',
        'length' => 'int32',
        'location' => null,
        'long_description' => null,
        'mime_type' => null,
        'name' => null,
        'priority' => 'int32',
        'privacy' => null,
        'published' => null,
        'short_description' => null,
        'size' => 'int64',
        'tags' => null,
        'thumbnail' => null,
        'updated_date' => 'int64',
        'uploader' => null,
        'views' => 'int64',
        'width' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'author' => 'author',
        'authored' => 'authored',
        'banned' => 'banned',
        'category' => 'category',
        'comments' => 'comments',
        'contributors' => 'contributors',
        'created_date' => 'created_date',
        'embed' => 'embed',
        'extension' => 'extension',
        'height' => 'height',
        'id' => 'id',
        'length' => 'length',
        'location' => 'location',
        'long_description' => 'long_description',
        'mime_type' => 'mime_type',
        'name' => 'name',
        'priority' => 'priority',
        'privacy' => 'privacy',
        'published' => 'published',
        'short_description' => 'short_description',
        'size' => 'size',
        'tags' => 'tags',
        'thumbnail' => 'thumbnail',
        'updated_date' => 'updated_date',
        'uploader' => 'uploader',
        'views' => 'views',
        'width' => 'width'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'author' => 'setAuthor',
        'authored' => 'setAuthored',
        'banned' => 'setBanned',
        'category' => 'setCategory',
        'comments' => 'setComments',
        'contributors' => 'setContributors',
        'created_date' => 'setCreatedDate',
        'embed' => 'setEmbed',
        'extension' => 'setExtension',
        'height' => 'setHeight',
        'id' => 'setId',
        'length' => 'setLength',
        'location' => 'setLocation',
        'long_description' => 'setLongDescription',
        'mime_type' => 'setMimeType',
        'name' => 'setName',
        'priority' => 'setPriority',
        'privacy' => 'setPrivacy',
        'published' => 'setPublished',
        'short_description' => 'setShortDescription',
        'size' => 'setSize',
        'tags' => 'setTags',
        'thumbnail' => 'setThumbnail',
        'updated_date' => 'setUpdatedDate',
        'uploader' => 'setUploader',
        'views' => 'setViews',
        'width' => 'setWidth'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'author' => 'getAuthor',
        'authored' => 'getAuthored',
        'banned' => 'getBanned',
        'category' => 'getCategory',
        'comments' => 'getComments',
        'contributors' => 'getContributors',
        'created_date' => 'getCreatedDate',
        'embed' => 'getEmbed',
        'extension' => 'getExtension',
        'height' => 'getHeight',
        'id' => 'getId',
        'length' => 'getLength',
        'location' => 'getLocation',
        'long_description' => 'getLongDescription',
        'mime_type' => 'getMimeType',
        'name' => 'getName',
        'priority' => 'getPriority',
        'privacy' => 'getPrivacy',
        'published' => 'getPublished',
        'short_description' => 'getShortDescription',
        'size' => 'getSize',
        'tags' => 'getTags',
        'thumbnail' => 'getThumbnail',
        'updated_date' => 'getUpdatedDate',
        'uploader' => 'getUploader',
        'views' => 'getViews',
        'width' => 'getWidth'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PRIVACY__PRIVATE = 'private';
    const PRIVACY_FRIENDS = 'friends';
    const PRIVACY__PUBLIC = 'public';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPrivacyAllowableValues()
    {
        return [
            self::PRIVACY__PRIVATE,
            self::PRIVACY_FRIENDS,
            self::PRIVACY__PUBLIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['authored'] = isset($data['authored']) ? $data['authored'] : null;
        $this->container['banned'] = isset($data['banned']) ? $data['banned'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['contributors'] = isset($data['contributors']) ? $data['contributors'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['embed'] = isset($data['embed']) ? $data['embed'] : null;
        $this->container['extension'] = isset($data['extension']) ? $data['extension'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['mime_type'] = isset($data['mime_type']) ? $data['mime_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['thumbnail'] = isset($data['thumbnail']) ? $data['thumbnail'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['uploader'] = isset($data['uploader']) ? $data['uploader'] : null;
        $this->container['views'] = isset($data['views']) ? $data['views'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        if ($this->container['extension'] === null) {
            $invalid_properties[] = "'extension' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalid_properties[] = "'height' can't be null";
        }
        if ($this->container['length'] === null) {
            $invalid_properties[] = "'length' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalid_properties[] = "'location' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        $allowed_values = $this->getPrivacyAllowableValues();
        if (!in_array($this->container['privacy'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'privacy', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['width'] === null) {
            $invalid_properties[] = "'width' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['category'] === null) {
            return false;
        }
        if ($this->container['extension'] === null) {
            return false;
        }
        if ($this->container['height'] === null) {
            return false;
        }
        if ($this->container['length'] === null) {
            return false;
        }
        if ($this->container['location'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        $allowed_values = $this->getPrivacyAllowableValues();
        if (!in_array($this->container['privacy'], $allowed_values)) {
            return false;
        }
        if ($this->container['width'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active Whether the video is available, based on various factors
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets author
     * @return \KnetikCloud\Model\SimpleReferenceResourceLong_
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     * @param \KnetikCloud\Model\SimpleReferenceResourceLong_ $author The original artist of the media
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets authored
     * @return int
     */
    public function getAuthored()
    {
        return $this->container['authored'];
    }

    /**
     * Sets authored
     * @param int $authored The date the media was created as a unix timestamp in seconds
     * @return $this
     */
    public function setAuthored($authored)
    {
        $this->container['authored'] = $authored;

        return $this;
    }

    /**
     * Gets banned
     * @return bool
     */
    public function getBanned()
    {
        return $this->container['banned'];
    }

    /**
     * Sets banned
     * @param bool $banned Whether the video has been banned or not
     * @return $this
     */
    public function setBanned($banned)
    {
        $this->container['banned'] = $banned;

        return $this;
    }

    /**
     * Gets category
     * @return \KnetikCloud\Model\SimpleReferenceResourceString_
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param \KnetikCloud\Model\SimpleReferenceResourceString_ $category The category of the video
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets comments
     * @return \KnetikCloud\Model\CommentResource[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     * @param \KnetikCloud\Model\CommentResource[] $comments The comments of the video
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets contributors
     * @return \KnetikCloud\Model\ContributionResource[]
     */
    public function getContributors()
    {
        return $this->container['contributors'];
    }

    /**
     * Sets contributors
     * @param \KnetikCloud\Model\ContributionResource[] $contributors Artists that contributed to the creation. See separate endpoint to add to list
     * @return $this
     */
    public function setContributors($contributors)
    {
        $this->container['contributors'] = $contributors;

        return $this;
    }

    /**
     * Gets created_date
     * @return int
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     * @param int $created_date The date/time this resource was created in seconds since unix epoch
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets embed
     * @return string
     */
    public function getEmbed()
    {
        return $this->container['embed'];
    }

    /**
     * Sets embed
     * @param string $embed The country of an embedable version
     * @return $this
     */
    public function setEmbed($embed)
    {
        $this->container['embed'] = $embed;

        return $this;
    }

    /**
     * Gets extension
     * @return string
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     * @param string $extension The file extension of the media file. 1-5 characters
     * @return $this
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets height
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param int $height The height of the video in px
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The unique ID for that resource
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets length
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     * @param int $length The length of the video in seconds
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets location
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     * @param string $location The country of the media. Typically a url. Cannot be blank
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets long_description
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     * @param string $long_description The user friendly name of that resource. Defaults to blank string
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets mime_type
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     * @param string $mime_type The mime-type of the media
     * @return $this
     */
    public function setMimeType($mime_type)
    {
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The user friendly name of that resource
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param int $priority The sort order of the video. default: 100
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets privacy
     * @return string
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     * @param string $privacy The privacy setting. default: private
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $allowed_values = $this->getPrivacyAllowableValues();
        if (!is_null($privacy) && !in_array($privacy, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'privacy', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets published
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     * @param bool $published Whether the video has been made public. Default true
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     * @param string $short_description The user friendly name of that resource. Defaults to blank string
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets size
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param int $size The size of the media. Minimum 0 if supplied
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags The tags for the video
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets thumbnail
     * @return string
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     * @param string $thumbnail The country of a thumbnail version. Typically a url
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets updated_date
     * @return int
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     * @param int $updated_date The date/time this resource was last updated in seconds since unix epoch
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets uploader
     * @return \KnetikCloud\Model\SimpleUserResource
     */
    public function getUploader()
    {
        return $this->container['uploader'];
    }

    /**
     * Sets uploader
     * @param \KnetikCloud\Model\SimpleUserResource $uploader The user the media was uploaded by. May be null for system uploaded media. May only be set to a user other than the current caller if VIDEOS_ADMIN permission. Null will mean the caller is the uploader unless the caller has VIDEOS_ADMIN permission, in which case it will be set to null
     * @return $this
     */
    public function setUploader($uploader)
    {
        $this->container['uploader'] = $uploader;

        return $this;
    }

    /**
     * Gets views
     * @return int
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     * @param int $views The view count of the video
     * @return $this
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets width
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param int $width The width of the video in px
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


