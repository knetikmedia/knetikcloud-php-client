<?php
/**
 * UserResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * UserResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UserResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'address' => 'string',
        'address2' => 'string',
        'avatar_url' => 'string',
        'children' => '\KnetikCloud\Model\UserRelationshipReferenceResource[]',
        'city' => 'string',
        'country_code' => 'string',
        'currency_code' => 'string',
        'date_of_birth' => 'int',
        'description' => 'string',
        'display_name' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'fullname' => 'string',
        'gender' => 'string',
        'id' => 'int',
        'language_code' => 'string',
        'last_activity' => 'int',
        'last_name' => 'string',
        'last_updated' => 'int',
        'member_since' => 'int',
        'mobile_number' => 'string',
        'parents' => '\KnetikCloud\Model\UserRelationshipReferenceResource[]',
        'password' => 'string',
        'postal_code' => 'string',
        'state' => 'string',
        'tags' => 'string[]',
        'template' => 'string',
        'timezone_code' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_properties' => null,
        'address' => null,
        'address2' => null,
        'avatar_url' => null,
        'children' => null,
        'city' => null,
        'country_code' => null,
        'currency_code' => null,
        'date_of_birth' => 'int64',
        'description' => null,
        'display_name' => null,
        'email' => null,
        'first_name' => null,
        'fullname' => null,
        'gender' => null,
        'id' => 'int32',
        'language_code' => null,
        'last_activity' => 'int64',
        'last_name' => null,
        'last_updated' => 'int64',
        'member_since' => 'int64',
        'mobile_number' => null,
        'parents' => null,
        'password' => null,
        'postal_code' => null,
        'state' => null,
        'tags' => null,
        'template' => null,
        'timezone_code' => null,
        'username' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_properties' => 'additional_properties',
        'address' => 'address',
        'address2' => 'address2',
        'avatar_url' => 'avatar_url',
        'children' => 'children',
        'city' => 'city',
        'country_code' => 'country_code',
        'currency_code' => 'currency_code',
        'date_of_birth' => 'date_of_birth',
        'description' => 'description',
        'display_name' => 'display_name',
        'email' => 'email',
        'first_name' => 'first_name',
        'fullname' => 'fullname',
        'gender' => 'gender',
        'id' => 'id',
        'language_code' => 'language_code',
        'last_activity' => 'last_activity',
        'last_name' => 'last_name',
        'last_updated' => 'last_updated',
        'member_since' => 'member_since',
        'mobile_number' => 'mobile_number',
        'parents' => 'parents',
        'password' => 'password',
        'postal_code' => 'postal_code',
        'state' => 'state',
        'tags' => 'tags',
        'template' => 'template',
        'timezone_code' => 'timezone_code',
        'username' => 'username'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'additional_properties' => 'setAdditionalProperties',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'avatar_url' => 'setAvatarUrl',
        'children' => 'setChildren',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'currency_code' => 'setCurrencyCode',
        'date_of_birth' => 'setDateOfBirth',
        'description' => 'setDescription',
        'display_name' => 'setDisplayName',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'fullname' => 'setFullname',
        'gender' => 'setGender',
        'id' => 'setId',
        'language_code' => 'setLanguageCode',
        'last_activity' => 'setLastActivity',
        'last_name' => 'setLastName',
        'last_updated' => 'setLastUpdated',
        'member_since' => 'setMemberSince',
        'mobile_number' => 'setMobileNumber',
        'parents' => 'setParents',
        'password' => 'setPassword',
        'postal_code' => 'setPostalCode',
        'state' => 'setState',
        'tags' => 'setTags',
        'template' => 'setTemplate',
        'timezone_code' => 'setTimezoneCode',
        'username' => 'setUsername'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'additional_properties' => 'getAdditionalProperties',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'avatar_url' => 'getAvatarUrl',
        'children' => 'getChildren',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'currency_code' => 'getCurrencyCode',
        'date_of_birth' => 'getDateOfBirth',
        'description' => 'getDescription',
        'display_name' => 'getDisplayName',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'fullname' => 'getFullname',
        'gender' => 'getGender',
        'id' => 'getId',
        'language_code' => 'getLanguageCode',
        'last_activity' => 'getLastActivity',
        'last_name' => 'getLastName',
        'last_updated' => 'getLastUpdated',
        'member_since' => 'getMemberSince',
        'mobile_number' => 'getMobileNumber',
        'parents' => 'getParents',
        'password' => 'getPassword',
        'postal_code' => 'getPostalCode',
        'state' => 'getState',
        'tags' => 'getTags',
        'template' => 'getTemplate',
        'timezone_code' => 'getTimezoneCode',
        'username' => 'getUsername'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['avatar_url'] = isset($data['avatar_url']) ? $data['avatar_url'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['fullname'] = isset($data['fullname']) ? $data['fullname'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
        $this->container['last_activity'] = isset($data['last_activity']) ? $data['last_activity'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['member_since'] = isset($data['member_since']) ? $data['member_since'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['parents'] = isset($data['parents']) ? $data['parents'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['timezone_code'] = isset($data['timezone_code']) ? $data['timezone_code'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalid_properties[] = "'username' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['username'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this user type, or be an extra not from the template
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param string $address The first line of the user's address (private)
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2 The second line of user's address (private)
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets avatar_url
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     * @param string $avatar_url The url of the user's avatar image
     * @return $this
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets children
     * @return \KnetikCloud\Model\UserRelationshipReferenceResource[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     * @param \KnetikCloud\Model\UserRelationshipReferenceResource[] $children Relationships where this user is the parent. Read-Only, manage through separate endpoints
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city The user's city (private)
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code The ISO3 code for the country from the user's address (private). Will be filled in based on GeoIP country at registration if not provided.
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code The code for the user's real money currency (private)
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets date_of_birth
     * @return int
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     * @param int $date_of_birth The user's date of birth (private) as a unix timestamp
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The user's self description (private)
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name The chosen display name of the user, defaults to username if not present
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email The user's email address (private). May be required and/or unique depending on system configuration (both on by default). Must match standard email requirements if provided (RFC 2822)
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name The user's first name (private)
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets fullname
     * @return string
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     * @param string $fullname The user's full name (private)
     * @return $this
     */
    public function setFullname($fullname)
    {
        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender The user's gender (private)
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the user
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets language_code
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     * @param string $language_code The ISO3 code for the user's currency (private)
     * @return $this
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets last_activity
     * @return int
     */
    public function getLastActivity()
    {
        return $this->container['last_activity'];
    }

    /**
     * Sets last_activity
     * @param int $last_activity The date the user last interacted with the API (private)
     * @return $this
     */
    public function setLastActivity($last_activity)
    {
        $this->container['last_activity'] = $last_activity;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name The user's last name (private)
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets last_updated
     * @return int
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     * @param int $last_updated The date the user's info was last updated as a unix timestamp
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets member_since
     * @return int
     */
    public function getMemberSince()
    {
        return $this->container['member_since'];
    }

    /**
     * Sets member_since
     * @param int $member_since The user's date of registration as a unix timestamp
     * @return $this
     */
    public function setMemberSince($member_since)
    {
        $this->container['member_since'] = $member_since;

        return $this;
    }

    /**
     * Gets mobile_number
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     * @param string $mobile_number The user's mobile phone number (private)
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets parents
     * @return \KnetikCloud\Model\UserRelationshipReferenceResource[]
     */
    public function getParents()
    {
        return $this->container['parents'];
    }

    /**
     * Sets parents
     * @param \KnetikCloud\Model\UserRelationshipReferenceResource[] $parents Relationships where this user is the child. Read-Only, manage through separate endpoints
     * @return $this
     */
    public function setParents($parents)
    {
        $this->container['parents'] = $parents;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password The plain text password for the new user account. Required for registration; ignored on profile update.  Use password specific endpoints for editing
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets postal_code
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     * @param string $postal_code The user's postal code (private)
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state The user's state (private)
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags Tags on the user. Can only be set by admin. Max length per tag is 64 characters
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template A user template this user is validated against (private). May be null and no validation of properties will be done
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets timezone_code
     * @return string
     */
    public function getTimezoneCode()
    {
        return $this->container['timezone_code'];
    }

    /**
     * Sets timezone_code
     * @param string $timezone_code The code for the user's timezone (private)
     * @return $this
     */
    public function setTimezoneCode($timezone_code)
    {
        $this->container['timezone_code'] = $timezone_code;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username The login username for the user (private). May be set to match email if system does not require usernames separately.
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


