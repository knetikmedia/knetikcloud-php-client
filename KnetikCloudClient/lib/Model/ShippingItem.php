<?php
/**
 * ShippingItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * ShippingItem Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ShippingItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ShippingItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'behaviors' => '\KnetikCloud\Model\Behavior[]',
        'category' => 'string',
        'countries' => 'string[]',
        'created_date' => 'int',
        'displayable' => 'bool',
        'geo_country_list' => 'string[]',
        'geo_policy_type' => 'string',
        'id' => 'int',
        'long_description' => 'string',
        'max_tier_total' => 'int',
        'name' => 'string',
        'shipping_tier' => 'int',
        'short_description' => 'string',
        'skus' => '\KnetikCloud\Model\Sku[]',
        'sort' => 'int',
        'store_end' => 'int',
        'store_start' => 'int',
        'tags' => 'string[]',
        'taxable' => 'bool',
        'template' => 'string',
        'type_hint' => 'string',
        'unique_key' => 'string',
        'updated_date' => 'int',
        'vendor_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_properties' => 'additional_properties',
        'behaviors' => 'behaviors',
        'category' => 'category',
        'countries' => 'countries',
        'created_date' => 'created_date',
        'displayable' => 'displayable',
        'geo_country_list' => 'geo_country_list',
        'geo_policy_type' => 'geo_policy_type',
        'id' => 'id',
        'long_description' => 'long_description',
        'max_tier_total' => 'max_tier_total',
        'name' => 'name',
        'shipping_tier' => 'shipping_tier',
        'short_description' => 'short_description',
        'skus' => 'skus',
        'sort' => 'sort',
        'store_end' => 'store_end',
        'store_start' => 'store_start',
        'tags' => 'tags',
        'taxable' => 'taxable',
        'template' => 'template',
        'type_hint' => 'type_hint',
        'unique_key' => 'unique_key',
        'updated_date' => 'updated_date',
        'vendor_id' => 'vendor_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'additional_properties' => 'setAdditionalProperties',
        'behaviors' => 'setBehaviors',
        'category' => 'setCategory',
        'countries' => 'setCountries',
        'created_date' => 'setCreatedDate',
        'displayable' => 'setDisplayable',
        'geo_country_list' => 'setGeoCountryList',
        'geo_policy_type' => 'setGeoPolicyType',
        'id' => 'setId',
        'long_description' => 'setLongDescription',
        'max_tier_total' => 'setMaxTierTotal',
        'name' => 'setName',
        'shipping_tier' => 'setShippingTier',
        'short_description' => 'setShortDescription',
        'skus' => 'setSkus',
        'sort' => 'setSort',
        'store_end' => 'setStoreEnd',
        'store_start' => 'setStoreStart',
        'tags' => 'setTags',
        'taxable' => 'setTaxable',
        'template' => 'setTemplate',
        'type_hint' => 'setTypeHint',
        'unique_key' => 'setUniqueKey',
        'updated_date' => 'setUpdatedDate',
        'vendor_id' => 'setVendorId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'additional_properties' => 'getAdditionalProperties',
        'behaviors' => 'getBehaviors',
        'category' => 'getCategory',
        'countries' => 'getCountries',
        'created_date' => 'getCreatedDate',
        'displayable' => 'getDisplayable',
        'geo_country_list' => 'getGeoCountryList',
        'geo_policy_type' => 'getGeoPolicyType',
        'id' => 'getId',
        'long_description' => 'getLongDescription',
        'max_tier_total' => 'getMaxTierTotal',
        'name' => 'getName',
        'shipping_tier' => 'getShippingTier',
        'short_description' => 'getShortDescription',
        'skus' => 'getSkus',
        'sort' => 'getSort',
        'store_end' => 'getStoreEnd',
        'store_start' => 'getStoreStart',
        'tags' => 'getTags',
        'taxable' => 'getTaxable',
        'template' => 'getTemplate',
        'type_hint' => 'getTypeHint',
        'unique_key' => 'getUniqueKey',
        'updated_date' => 'getUpdatedDate',
        'vendor_id' => 'getVendorId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const GEO_POLICY_TYPE_WHITELIST = 'whitelist';
    const GEO_POLICY_TYPE_BLACKLIST = 'blacklist';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGeoPolicyTypeAllowableValues()
    {
        return [
            self::GEO_POLICY_TYPE_WHITELIST,
            self::GEO_POLICY_TYPE_BLACKLIST,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['behaviors'] = isset($data['behaviors']) ? $data['behaviors'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['displayable'] = isset($data['displayable']) ? $data['displayable'] : null;
        $this->container['geo_country_list'] = isset($data['geo_country_list']) ? $data['geo_country_list'] : null;
        $this->container['geo_policy_type'] = isset($data['geo_policy_type']) ? $data['geo_policy_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['max_tier_total'] = isset($data['max_tier_total']) ? $data['max_tier_total'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['shipping_tier'] = isset($data['shipping_tier']) ? $data['shipping_tier'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['skus'] = isset($data['skus']) ? $data['skus'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['store_end'] = isset($data['store_end']) ? $data['store_end'] : null;
        $this->container['store_start'] = isset($data['store_start']) ? $data['store_start'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['type_hint'] = isset($data['type_hint']) ? $data['type_hint'] : null;
        $this->container['unique_key'] = isset($data['unique_key']) ? $data['unique_key'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["whitelist", "blacklist"];
        if (!in_array($this->container['geo_policy_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'geo_policy_type', must be one of 'whitelist', 'blacklist'.";
        }

        if ($this->container['max_tier_total'] === null) {
            $invalid_properties[] = "'max_tier_total' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['skus'] === null) {
            $invalid_properties[] = "'skus' can't be null";
        }
        if ($this->container['type_hint'] === null) {
            $invalid_properties[] = "'type_hint' can't be null";
        }
        if ($this->container['vendor_id'] === null) {
            $invalid_properties[] = "'vendor_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["whitelist", "blacklist"];
        if (!in_array($this->container['geo_policy_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['max_tier_total'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['skus'] === null) {
            return false;
        }
        if ($this->container['type_hint'] === null) {
            return false;
        }
        if ($this->container['vendor_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets behaviors
     * @return \KnetikCloud\Model\Behavior[]
     */
    public function getBehaviors()
    {
        return $this->container['behaviors'];
    }

    /**
     * Sets behaviors
     * @param \KnetikCloud\Model\Behavior[] $behaviors The behaviors linked to the item, describing various options and interactions. May not be included in item lists
     * @return $this
     */
    public function setBehaviors($behaviors)
    {
        $this->container['behaviors'] = $behaviors;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category A category for filtering items
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets countries
     * @return string[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     * @param string[] $countries A unique list of country iso3 codes that allow the shipping option
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets created_date
     * @return int
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     * @param int $created_date The date the item was created, unix timestamp in seconds
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets displayable
     * @return bool
     */
    public function getDisplayable()
    {
        return $this->container['displayable'];
    }

    /**
     * Sets displayable
     * @param bool $displayable Whether or not the item is currently displayable.  Default = true
     * @return $this
     */
    public function setDisplayable($displayable)
    {
        $this->container['displayable'] = $displayable;

        return $this;
    }

    /**
     * Gets geo_country_list
     * @return string[]
     */
    public function getGeoCountryList()
    {
        return $this->container['geo_country_list'];
    }

    /**
     * Sets geo_country_list
     * @param string[] $geo_country_list A list of country ID to include in the blacklist/whitelist geo policy
     * @return $this
     */
    public function setGeoCountryList($geo_country_list)
    {
        $this->container['geo_country_list'] = $geo_country_list;

        return $this;
    }

    /**
     * Gets geo_policy_type
     * @return string
     */
    public function getGeoPolicyType()
    {
        return $this->container['geo_policy_type'];
    }

    /**
     * Sets geo_policy_type
     * @param string $geo_policy_type Whether to use the geo_country_list as a black list or white list for item geographical availability
     * @return $this
     */
    public function setGeoPolicyType($geo_policy_type)
    {
        $allowed_values = array('whitelist', 'blacklist');
        if (!is_null($geo_policy_type) && (!in_array($geo_policy_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'geo_policy_type', must be one of 'whitelist', 'blacklist'");
        }
        $this->container['geo_policy_type'] = $geo_policy_type;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the item
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets long_description
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     * @param string $long_description A long description of the item
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets max_tier_total
     * @return int
     */
    public function getMaxTierTotal()
    {
        return $this->container['max_tier_total'];
    }

    /**
     * Sets max_tier_total
     * @param int $max_tier_total An abstract max value that the values of item's shipping_tier work against to decide whether an order can be fulfilled
     * @return $this
     */
    public function setMaxTierTotal($max_tier_total)
    {
        $this->container['max_tier_total'] = $max_tier_total;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the item
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shipping_tier
     * @return int
     */
    public function getShippingTier()
    {
        return $this->container['shipping_tier'];
    }

    /**
     * Sets shipping_tier
     * @param int $shipping_tier Provides the abstract shipping needs if this item is physical and can be shipped.  A value of zero means no shipping needed.  Default = 0
     * @return $this
     */
    public function setShippingTier($shipping_tier)
    {
        $this->container['shipping_tier'] = $shipping_tier;

        return $this;
    }

    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     * @param string $short_description A short description of the item, max 255 chars
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets skus
     * @return \KnetikCloud\Model\Sku[]
     */
    public function getSkus()
    {
        return $this->container['skus'];
    }

    /**
     * Sets skus
     * @param \KnetikCloud\Model\Sku[] $skus The skus for the item. Each defines a unique configuration for the item to be purchased (Large-Blue, Small-Green, etc). These are what is ultimately selected in the store and added to the cart
     * @return $this
     */
    public function setSkus($skus)
    {
        $this->container['skus'] = $skus;

        return $this;
    }

    /**
     * Gets sort
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     * @param int $sort A number to use in sorting items.  Default 500
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets store_end
     * @return int
     */
    public function getStoreEnd()
    {
        return $this->container['store_end'];
    }

    /**
     * Sets store_end
     * @param int $store_end The date the item will leave the store, unix timestamp in seconds.  If set to null, item will never leave the store
     * @return $this
     */
    public function setStoreEnd($store_end)
    {
        $this->container['store_end'] = $store_end;

        return $this;
    }

    /**
     * Gets store_start
     * @return int
     */
    public function getStoreStart()
    {
        return $this->container['store_start'];
    }

    /**
     * Sets store_start
     * @param int $store_start The date the item will appear in the store, unix timestamp in seconds.  If set to null, item will appear in store immediately
     * @return $this
     */
    public function setStoreStart($store_start)
    {
        $this->container['store_start'] = $store_start;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags List of tags used for filtering items
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets taxable
     * @return bool
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     * @param bool $taxable Whether tax should be applied to the shipping price.  Default = false
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template An item template this item is validated against.  May be null and no validation of additional_properties will be done.  Default = null
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets type_hint
     * @return string
     */
    public function getTypeHint()
    {
        return $this->container['type_hint'];
    }

    /**
     * Sets type_hint
     * @param string $type_hint The type of the item
     * @return $this
     */
    public function setTypeHint($type_hint)
    {
        $this->container['type_hint'] = $type_hint;

        return $this;
    }

    /**
     * Gets unique_key
     * @return string
     */
    public function getUniqueKey()
    {
        return $this->container['unique_key'];
    }

    /**
     * Sets unique_key
     * @param string $unique_key The unique key for the item
     * @return $this
     */
    public function setUniqueKey($unique_key)
    {
        $this->container['unique_key'] = $unique_key;

        return $this;
    }

    /**
     * Gets updated_date
     * @return int
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     * @param int $updated_date The date the item was last updated, unix timestamp in seconds
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets vendor_id
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     * @param int $vendor_id The vendor who provides the item
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


