<?php
/**
 * CartLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * CartLineItem Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CartLineItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CartLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_code' => 'string',
        'description' => 'string',
        'discount' => '\KnetikCloud\Model\Discount',
        'line_total' => 'float',
        'name' => 'string',
        'original_line_total' => 'float',
        'original_unit_price' => 'float',
        'qty' => 'int',
        'sale_name' => 'string',
        'sku' => 'string',
        'sku_description' => 'string',
        'store_item_id' => 'int',
        'tags' => 'string[]',
        'thumb_url' => 'string',
        'unique_key' => 'string',
        'unit_price' => 'float',
        'vendor_id' => 'int',
        'vendor_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency_code' => null,
        'description' => null,
        'discount' => null,
        'line_total' => null,
        'name' => null,
        'original_line_total' => null,
        'original_unit_price' => null,
        'qty' => 'int32',
        'sale_name' => null,
        'sku' => null,
        'sku_description' => null,
        'store_item_id' => 'int32',
        'tags' => null,
        'thumb_url' => null,
        'unique_key' => null,
        'unit_price' => null,
        'vendor_id' => 'int32',
        'vendor_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'currency_code',
        'description' => 'description',
        'discount' => 'discount',
        'line_total' => 'line_total',
        'name' => 'name',
        'original_line_total' => 'original_line_total',
        'original_unit_price' => 'original_unit_price',
        'qty' => 'qty',
        'sale_name' => 'sale_name',
        'sku' => 'sku',
        'sku_description' => 'sku_description',
        'store_item_id' => 'store_item_id',
        'tags' => 'tags',
        'thumb_url' => 'thumb_url',
        'unique_key' => 'unique_key',
        'unit_price' => 'unit_price',
        'vendor_id' => 'vendor_id',
        'vendor_name' => 'vendor_name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'description' => 'setDescription',
        'discount' => 'setDiscount',
        'line_total' => 'setLineTotal',
        'name' => 'setName',
        'original_line_total' => 'setOriginalLineTotal',
        'original_unit_price' => 'setOriginalUnitPrice',
        'qty' => 'setQty',
        'sale_name' => 'setSaleName',
        'sku' => 'setSku',
        'sku_description' => 'setSkuDescription',
        'store_item_id' => 'setStoreItemId',
        'tags' => 'setTags',
        'thumb_url' => 'setThumbUrl',
        'unique_key' => 'setUniqueKey',
        'unit_price' => 'setUnitPrice',
        'vendor_id' => 'setVendorId',
        'vendor_name' => 'setVendorName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'description' => 'getDescription',
        'discount' => 'getDiscount',
        'line_total' => 'getLineTotal',
        'name' => 'getName',
        'original_line_total' => 'getOriginalLineTotal',
        'original_unit_price' => 'getOriginalUnitPrice',
        'qty' => 'getQty',
        'sale_name' => 'getSaleName',
        'sku' => 'getSku',
        'sku_description' => 'getSkuDescription',
        'store_item_id' => 'getStoreItemId',
        'tags' => 'getTags',
        'thumb_url' => 'getThumbUrl',
        'unique_key' => 'getUniqueKey',
        'unit_price' => 'getUnitPrice',
        'vendor_id' => 'getVendorId',
        'vendor_name' => 'getVendorName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['line_total'] = isset($data['line_total']) ? $data['line_total'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['original_line_total'] = isset($data['original_line_total']) ? $data['original_line_total'] : null;
        $this->container['original_unit_price'] = isset($data['original_unit_price']) ? $data['original_unit_price'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['sale_name'] = isset($data['sale_name']) ? $data['sale_name'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['sku_description'] = isset($data['sku_description']) ? $data['sku_description'] : null;
        $this->container['store_item_id'] = isset($data['store_item_id']) ? $data['store_item_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['thumb_url'] = isset($data['thumb_url']) ? $data['thumb_url'] : null;
        $this->container['unique_key'] = isset($data['unique_key']) ? $data['unique_key'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount
     * @return \KnetikCloud\Model\Discount
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     * @param \KnetikCloud\Model\Discount $discount
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets line_total
     * @return float
     */
    public function getLineTotal()
    {
        return $this->container['line_total'];
    }

    /**
     * Sets line_total
     * @param float $line_total
     * @return $this
     */
    public function setLineTotal($line_total)
    {
        $this->container['line_total'] = $line_total;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_line_total
     * @return float
     */
    public function getOriginalLineTotal()
    {
        return $this->container['original_line_total'];
    }

    /**
     * Sets original_line_total
     * @param float $original_line_total
     * @return $this
     */
    public function setOriginalLineTotal($original_line_total)
    {
        $this->container['original_line_total'] = $original_line_total;

        return $this;
    }

    /**
     * Gets original_unit_price
     * @return float
     */
    public function getOriginalUnitPrice()
    {
        return $this->container['original_unit_price'];
    }

    /**
     * Sets original_unit_price
     * @param float $original_unit_price
     * @return $this
     */
    public function setOriginalUnitPrice($original_unit_price)
    {
        $this->container['original_unit_price'] = $original_unit_price;

        return $this;
    }

    /**
     * Gets qty
     * @return int
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     * @param int $qty
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets sale_name
     * @return string
     */
    public function getSaleName()
    {
        return $this->container['sale_name'];
    }

    /**
     * Sets sale_name
     * @param string $sale_name
     * @return $this
     */
    public function setSaleName($sale_name)
    {
        $this->container['sale_name'] = $sale_name;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets sku_description
     * @return string
     */
    public function getSkuDescription()
    {
        return $this->container['sku_description'];
    }

    /**
     * Sets sku_description
     * @param string $sku_description
     * @return $this
     */
    public function setSkuDescription($sku_description)
    {
        $this->container['sku_description'] = $sku_description;

        return $this;
    }

    /**
     * Gets store_item_id
     * @return int
     */
    public function getStoreItemId()
    {
        return $this->container['store_item_id'];
    }

    /**
     * Sets store_item_id
     * @param int $store_item_id
     * @return $this
     */
    public function setStoreItemId($store_item_id)
    {
        $this->container['store_item_id'] = $store_item_id;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets thumb_url
     * @return string
     */
    public function getThumbUrl()
    {
        return $this->container['thumb_url'];
    }

    /**
     * Sets thumb_url
     * @param string $thumb_url
     * @return $this
     */
    public function setThumbUrl($thumb_url)
    {
        $this->container['thumb_url'] = $thumb_url;

        return $this;
    }

    /**
     * Gets unique_key
     * @return string
     */
    public function getUniqueKey()
    {
        return $this->container['unique_key'];
    }

    /**
     * Sets unique_key
     * @param string $unique_key
     * @return $this
     */
    public function setUniqueKey($unique_key)
    {
        $this->container['unique_key'] = $unique_key;

        return $this;
    }

    /**
     * Gets unit_price
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     * @param float $unit_price
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets vendor_id
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     * @param int $vendor_id
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets vendor_name
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     * @param string $vendor_name
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


