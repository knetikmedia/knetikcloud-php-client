<?php
/**
 * BreRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * BreRule Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BreRule implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BreRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actions' => '\KnetikCloud\Model\ActionContextObject_[]',
        'condition' => '\KnetikCloud\Model\PredicateResource',
        'condition_text' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'end_date' => 'int',
        'evaluation_count' => 'int',
        'event_name' => 'string',
        'id' => 'string',
        'name' => 'string',
        'run_count' => 'int',
        'sort' => 'int',
        'start_date' => 'int',
        'system_rule' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actions' => null,
        'condition' => null,
        'condition_text' => null,
        'description' => null,
        'enabled' => null,
        'end_date' => 'int64',
        'evaluation_count' => 'int64',
        'event_name' => null,
        'id' => null,
        'name' => null,
        'run_count' => 'int64',
        'sort' => 'int32',
        'start_date' => 'int64',
        'system_rule' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'actions' => 'actions',
        'condition' => 'condition',
        'condition_text' => 'condition_text',
        'description' => 'description',
        'enabled' => 'enabled',
        'end_date' => 'end_date',
        'evaluation_count' => 'evaluation_count',
        'event_name' => 'event_name',
        'id' => 'id',
        'name' => 'name',
        'run_count' => 'run_count',
        'sort' => 'sort',
        'start_date' => 'start_date',
        'system_rule' => 'system_rule'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'actions' => 'setActions',
        'condition' => 'setCondition',
        'condition_text' => 'setConditionText',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'end_date' => 'setEndDate',
        'evaluation_count' => 'setEvaluationCount',
        'event_name' => 'setEventName',
        'id' => 'setId',
        'name' => 'setName',
        'run_count' => 'setRunCount',
        'sort' => 'setSort',
        'start_date' => 'setStartDate',
        'system_rule' => 'setSystemRule'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'actions' => 'getActions',
        'condition' => 'getCondition',
        'condition_text' => 'getConditionText',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'end_date' => 'getEndDate',
        'evaluation_count' => 'getEvaluationCount',
        'event_name' => 'getEventName',
        'id' => 'getId',
        'name' => 'getName',
        'run_count' => 'getRunCount',
        'sort' => 'getSort',
        'start_date' => 'getStartDate',
        'system_rule' => 'getSystemRule'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['condition_text'] = isset($data['condition_text']) ? $data['condition_text'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['evaluation_count'] = isset($data['evaluation_count']) ? $data['evaluation_count'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['run_count'] = isset($data['run_count']) ? $data['run_count'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['system_rule'] = isset($data['system_rule']) ? $data['system_rule'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['actions'] === null) {
            $invalid_properties[] = "'actions' can't be null";
        }
        if ($this->container['event_name'] === null) {
            $invalid_properties[] = "'event_name' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['actions'] === null) {
            return false;
        }
        if ($this->container['event_name'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets actions
     * @return \KnetikCloud\Model\ActionContextObject_[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     * @param \KnetikCloud\Model\ActionContextObject_[] $actions A list of actions to execute, and the mapping for their parameters, when the rule runs. Minimum 1
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets condition
     * @return \KnetikCloud\Model\PredicateResource
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     * @param \KnetikCloud\Model\PredicateResource $condition A condition expression that must be met in a given event for the rule to run. Null to always run.
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets condition_text
     * @return string
     */
    public function getConditionText()
    {
        return $this->container['condition_text'];
    }

    /**
     * Sets condition_text
     * @param string $condition_text The condition as a readable string. Filled in by the system from the condition
     * @return $this
     */
    public function setConditionText($condition_text)
    {
        $this->container['condition_text'] = $condition_text;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The human readable description of the rule
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param bool $enabled Whether the rule is enabled to run (in conjunction with dates). Default true
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets end_date
     * @return int
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param int $end_date The date the rule ceases to take effect, or null if never. Unix timestamp in seconds
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets evaluation_count
     * @return int
     */
    public function getEvaluationCount()
    {
        return $this->container['evaluation_count'];
    }

    /**
     * Sets evaluation_count
     * @param int $evaluation_count How many times the rule has been evaluated (it's conditions checked, whether it then runs or not)
     * @return $this
     */
    public function setEvaluationCount($evaluation_count)
    {
        $this->container['evaluation_count'] = $evaluation_count;

        return $this;
    }

    /**
     * Gets event_name
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     * @param string $event_name The event name of the trigger this rule runs for. Affects which parameters are available
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The id of the rule for later references. If left null a random guid will be generated. Must be unique. Cannot be changed
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The human readable name of the rule
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets run_count
     * @return int
     */
    public function getRunCount()
    {
        return $this->container['run_count'];
    }

    /**
     * Sets run_count
     * @param int $run_count How many times the rule has run
     * @return $this
     */
    public function setRunCount($run_count)
    {
        $this->container['run_count'] = $run_count;

        return $this;
    }

    /**
     * Gets sort
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     * @param int $sort Used to sort rules to control the order they run in. Larger numbered sort values run first.  Default 500
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets start_date
     * @return int
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param int $start_date The date the rule begins to take effect, or null if always. Unix timestamp in seconds
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets system_rule
     * @return bool
     */
    public function getSystemRule()
    {
        return $this->container['system_rule'];
    }

    /**
     * Sets system_rule
     * @param bool $system_rule Whether the rule is a default part of the system. System rules cannot be edited or deleted, but may be disabled
     * @return $this
     */
    public function setSystemRule($system_rule)
    {
        $this->container['system_rule'] = $system_rule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


