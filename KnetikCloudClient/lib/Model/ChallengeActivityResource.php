<?php
/**
 * ChallengeActivityResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * ChallengeActivityResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChallengeActivityResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ChallengeActivityResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activity_id' => 'int',
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'challenge_id' => 'int',
        'entitlement' => '\KnetikCloud\Model\ActivityEntitlementResource',
        'id' => 'int',
        'reward_set' => '\KnetikCloud\Model\RewardSetResource',
        'settings' => '\KnetikCloud\Model\SelectedSettingResource[]',
        'template' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activity_id' => 'int64',
        'additional_properties' => null,
        'challenge_id' => 'int64',
        'entitlement' => null,
        'id' => 'int64',
        'reward_set' => null,
        'settings' => null,
        'template' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'activity_id' => 'activity_id',
        'additional_properties' => 'additional_properties',
        'challenge_id' => 'challenge_id',
        'entitlement' => 'entitlement',
        'id' => 'id',
        'reward_set' => 'reward_set',
        'settings' => 'settings',
        'template' => 'template'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'activity_id' => 'setActivityId',
        'additional_properties' => 'setAdditionalProperties',
        'challenge_id' => 'setChallengeId',
        'entitlement' => 'setEntitlement',
        'id' => 'setId',
        'reward_set' => 'setRewardSet',
        'settings' => 'setSettings',
        'template' => 'setTemplate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'activity_id' => 'getActivityId',
        'additional_properties' => 'getAdditionalProperties',
        'challenge_id' => 'getChallengeId',
        'entitlement' => 'getEntitlement',
        'id' => 'getId',
        'reward_set' => 'getRewardSet',
        'settings' => 'getSettings',
        'template' => 'getTemplate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['challenge_id'] = isset($data['challenge_id']) ? $data['challenge_id'] : null;
        $this->container['entitlement'] = isset($data['entitlement']) ? $data['entitlement'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reward_set'] = isset($data['reward_set']) ? $data['reward_set'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['activity_id'] === null) {
            $invalid_properties[] = "'activity_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['activity_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets activity_id
     * @return int
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     * @param int $activity_id The id of the activity
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets challenge_id
     * @return int
     */
    public function getChallengeId()
    {
        return $this->container['challenge_id'];
    }

    /**
     * Sets challenge_id
     * @param int $challenge_id The id of the challenge
     * @return $this
     */
    public function setChallengeId($challenge_id)
    {
        $this->container['challenge_id'] = $challenge_id;

        return $this;
    }

    /**
     * Gets entitlement
     * @return \KnetikCloud\Model\ActivityEntitlementResource
     */
    public function getEntitlement()
    {
        return $this->container['entitlement'];
    }

    /**
     * Sets entitlement
     * @param \KnetikCloud\Model\ActivityEntitlementResource $entitlement The entitlement item needed to participate in the activity as part of this event. Null indicates free entry. When creating/updating only id is used. Item must be pre-existing
     * @return $this
     */
    public function setEntitlement($entitlement)
    {
        $this->container['entitlement'] = $entitlement;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The unique ID for this resource
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reward_set
     * @return \KnetikCloud\Model\RewardSetResource
     */
    public function getRewardSet()
    {
        return $this->container['reward_set'];
    }

    /**
     * Sets reward_set
     * @param \KnetikCloud\Model\RewardSetResource $reward_set The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing
     * @return $this
     */
    public function setRewardSet($reward_set)
    {
        $this->container['reward_set'] = $reward_set;

        return $this;
    }

    /**
     * Gets settings
     * @return \KnetikCloud\Model\SelectedSettingResource[]
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     * @param \KnetikCloud\Model\SelectedSettingResource[] $settings The list of settings and the select options
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template A challenge activity template this challenge activity is validated against (private). May be null and no validation of additional_properties will be done
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


