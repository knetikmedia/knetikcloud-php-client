<?php
/**
 * ChallengeEventResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * ChallengeEventResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChallengeEventResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ChallengeEventResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'challenge_id' => 'int',
        'end_date' => 'int',
        'id' => 'int',
        'reward_status' => 'string',
        'start_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'challenge_id' => 'int64',
        'end_date' => 'int64',
        'id' => 'int64',
        'reward_status' => null,
        'start_date' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'challenge_id' => 'challenge_id',
        'end_date' => 'end_date',
        'id' => 'id',
        'reward_status' => 'reward_status',
        'start_date' => 'start_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'challenge_id' => 'setChallengeId',
        'end_date' => 'setEndDate',
        'id' => 'setId',
        'reward_status' => 'setRewardStatus',
        'start_date' => 'setStartDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'challenge_id' => 'getChallengeId',
        'end_date' => 'getEndDate',
        'id' => 'getId',
        'reward_status' => 'getRewardStatus',
        'start_date' => 'getStartDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const REWARD_STATUS_PENDING = 'pending';
    const REWARD_STATUS_FAILED = 'failed';
    const REWARD_STATUS_COMPLETE = 'complete';
    const REWARD_STATUS_PARTIAL = 'partial';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRewardStatusAllowableValues()
    {
        return [
            self::REWARD_STATUS_PENDING,
            self::REWARD_STATUS_FAILED,
            self::REWARD_STATUS_COMPLETE,
            self::REWARD_STATUS_PARTIAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['challenge_id'] = isset($data['challenge_id']) ? $data['challenge_id'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reward_status'] = isset($data['reward_status']) ? $data['reward_status'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getRewardStatusAllowableValues();
        if (!in_array($this->container['reward_status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'reward_status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getRewardStatusAllowableValues();
        if (!in_array($this->container['reward_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets challenge_id
     * @return int
     */
    public function getChallengeId()
    {
        return $this->container['challenge_id'];
    }

    /**
     * Sets challenge_id
     * @param int $challenge_id The id of the challenge
     * @return $this
     */
    public function setChallengeId($challenge_id)
    {
        $this->container['challenge_id'] = $challenge_id;

        return $this;
    }

    /**
     * Gets end_date
     * @return int
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param int $end_date The end date in seconds
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the challenge event
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reward_status
     * @return string
     */
    public function getRewardStatus()
    {
        return $this->container['reward_status'];
    }

    /**
     * Sets reward_status
     * @param string $reward_status Indicate if the rewards have been given out already
     * @return $this
     */
    public function setRewardStatus($reward_status)
    {
        $allowed_values = $this->getRewardStatusAllowableValues();
        if (!is_null($reward_status) && !in_array($reward_status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reward_status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['reward_status'] = $reward_status;

        return $this;
    }

    /**
     * Gets start_date
     * @return int
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param int $start_date The start date in seconds
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


