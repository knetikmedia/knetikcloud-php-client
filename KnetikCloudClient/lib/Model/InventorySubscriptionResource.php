<?php
/**
 * InventorySubscriptionResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * InventorySubscriptionResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InventorySubscriptionResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InventorySubscriptionResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bill_date' => 'int',
        'credit' => 'double',
        'credit_log' => '\KnetikCloud\Model\SubscriptionCreditResource[]',
        'grace_end' => 'int',
        'inventory_id' => 'int',
        'inventory_status' => 'string',
        'item_id' => 'int',
        'payment_method' => '\KnetikCloud\Model\PaymentMethodResource',
        'price_override' => 'double',
        'price_override_reason' => 'string',
        'recurring_price' => 'double',
        'sku' => 'string',
        'start_date' => 'int',
        'subscription_status' => 'int',
        'user' => '\KnetikCloud\Model\SimpleUserResource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bill_date' => 'int64',
        'credit' => 'double',
        'credit_log' => null,
        'grace_end' => 'int64',
        'inventory_id' => 'int32',
        'inventory_status' => null,
        'item_id' => 'int32',
        'payment_method' => null,
        'price_override' => 'double',
        'price_override_reason' => null,
        'recurring_price' => 'double',
        'sku' => null,
        'start_date' => 'int64',
        'subscription_status' => 'int32',
        'user' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bill_date' => 'bill_date',
        'credit' => 'credit',
        'credit_log' => 'credit_log',
        'grace_end' => 'grace_end',
        'inventory_id' => 'inventory_id',
        'inventory_status' => 'inventory_status',
        'item_id' => 'item_id',
        'payment_method' => 'payment_method',
        'price_override' => 'price_override',
        'price_override_reason' => 'price_override_reason',
        'recurring_price' => 'recurring_price',
        'sku' => 'sku',
        'start_date' => 'start_date',
        'subscription_status' => 'subscription_status',
        'user' => 'user'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bill_date' => 'setBillDate',
        'credit' => 'setCredit',
        'credit_log' => 'setCreditLog',
        'grace_end' => 'setGraceEnd',
        'inventory_id' => 'setInventoryId',
        'inventory_status' => 'setInventoryStatus',
        'item_id' => 'setItemId',
        'payment_method' => 'setPaymentMethod',
        'price_override' => 'setPriceOverride',
        'price_override_reason' => 'setPriceOverrideReason',
        'recurring_price' => 'setRecurringPrice',
        'sku' => 'setSku',
        'start_date' => 'setStartDate',
        'subscription_status' => 'setSubscriptionStatus',
        'user' => 'setUser'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bill_date' => 'getBillDate',
        'credit' => 'getCredit',
        'credit_log' => 'getCreditLog',
        'grace_end' => 'getGraceEnd',
        'inventory_id' => 'getInventoryId',
        'inventory_status' => 'getInventoryStatus',
        'item_id' => 'getItemId',
        'payment_method' => 'getPaymentMethod',
        'price_override' => 'getPriceOverride',
        'price_override_reason' => 'getPriceOverrideReason',
        'recurring_price' => 'getRecurringPrice',
        'sku' => 'getSku',
        'start_date' => 'getStartDate',
        'subscription_status' => 'getSubscriptionStatus',
        'user' => 'getUser'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const INVENTORY_STATUS_PENDING = 'pending';
    const INVENTORY_STATUS_ACTIVE = 'active';
    const INVENTORY_STATUS_INACTIVE = 'inactive';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInventoryStatusAllowableValues()
    {
        return [
            self::INVENTORY_STATUS_PENDING,
            self::INVENTORY_STATUS_ACTIVE,
            self::INVENTORY_STATUS_INACTIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bill_date'] = isset($data['bill_date']) ? $data['bill_date'] : null;
        $this->container['credit'] = isset($data['credit']) ? $data['credit'] : null;
        $this->container['credit_log'] = isset($data['credit_log']) ? $data['credit_log'] : null;
        $this->container['grace_end'] = isset($data['grace_end']) ? $data['grace_end'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['inventory_status'] = isset($data['inventory_status']) ? $data['inventory_status'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['price_override'] = isset($data['price_override']) ? $data['price_override'] : null;
        $this->container['price_override_reason'] = isset($data['price_override_reason']) ? $data['price_override_reason'] : null;
        $this->container['recurring_price'] = isset($data['recurring_price']) ? $data['recurring_price'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['subscription_status'] = isset($data['subscription_status']) ? $data['subscription_status'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getInventoryStatusAllowableValues();
        if (!in_array($this->container['inventory_status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'inventory_status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getInventoryStatusAllowableValues();
        if (!in_array($this->container['inventory_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets bill_date
     * @return int
     */
    public function getBillDate()
    {
        return $this->container['bill_date'];
    }

    /**
     * Sets bill_date
     * @param int $bill_date The date the subscription will be billed
     * @return $this
     */
    public function setBillDate($bill_date)
    {
        $this->container['bill_date'] = $bill_date;

        return $this;
    }

    /**
     * Gets credit
     * @return double
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     * @param double $credit A credit of money already applied to a subscription for the next bill, or a debt if negative
     * @return $this
     */
    public function setCredit($credit)
    {
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets credit_log
     * @return \KnetikCloud\Model\SubscriptionCreditResource[]
     */
    public function getCreditLog()
    {
        return $this->container['credit_log'];
    }

    /**
     * Sets credit_log
     * @param \KnetikCloud\Model\SubscriptionCreditResource[] $credit_log A record of past and present credit/debt changes
     * @return $this
     */
    public function setCreditLog($credit_log)
    {
        $this->container['credit_log'] = $credit_log;

        return $this;
    }

    /**
     * Gets grace_end
     * @return int
     */
    public function getGraceEnd()
    {
        return $this->container['grace_end'];
    }

    /**
     * Sets grace_end
     * @param int $grace_end The date the grace period ends
     * @return $this
     */
    public function setGraceEnd($grace_end)
    {
        $this->container['grace_end'] = $grace_end;

        return $this;
    }

    /**
     * Gets inventory_id
     * @return int
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     * @param int $inventory_id The id of the inventory
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets inventory_status
     * @return string
     */
    public function getInventoryStatus()
    {
        return $this->container['inventory_status'];
    }

    /**
     * Sets inventory_status
     * @param string $inventory_status The inventory status object
     * @return $this
     */
    public function setInventoryStatus($inventory_status)
    {
        $allowed_values = $this->getInventoryStatusAllowableValues();
        if (!is_null($inventory_status) && !in_array($inventory_status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inventory_status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['inventory_status'] = $inventory_status;

        return $this;
    }

    /**
     * Gets item_id
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     * @param int $item_id The id of the item
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets payment_method
     * @return \KnetikCloud\Model\PaymentMethodResource
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     * @param \KnetikCloud\Model\PaymentMethodResource $payment_method The payment method object
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets price_override
     * @return double
     */
    public function getPriceOverride()
    {
        return $this->container['price_override'];
    }

    /**
     * Sets price_override
     * @param double $price_override The recurring price that has been set to override the base price. Null if not overriding
     * @return $this
     */
    public function setPriceOverride($price_override)
    {
        $this->container['price_override'] = $price_override;

        return $this;
    }

    /**
     * Gets price_override_reason
     * @return string
     */
    public function getPriceOverrideReason()
    {
        return $this->container['price_override_reason'];
    }

    /**
     * Sets price_override_reason
     * @param string $price_override_reason An explanation for the reason the price is being overridden
     * @return $this
     */
    public function setPriceOverrideReason($price_override_reason)
    {
        $this->container['price_override_reason'] = $price_override_reason;

        return $this;
    }

    /**
     * Gets recurring_price
     * @return double
     */
    public function getRecurringPrice()
    {
        return $this->container['recurring_price'];
    }

    /**
     * Sets recurring_price
     * @param double $recurring_price The default recurring price
     * @return $this
     */
    public function setRecurringPrice($recurring_price)
    {
        $this->container['recurring_price'] = $recurring_price;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku The recurring sku of the subscription
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets start_date
     * @return int
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param int $start_date The date the subscription will start
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets subscription_status
     * @return int
     */
    public function getSubscriptionStatus()
    {
        return $this->container['subscription_status'];
    }

    /**
     * Sets subscription_status
     * @param int $subscription_status The status of the subscription
     * @return $this
     */
    public function setSubscriptionStatus($subscription_status)
    {
        $this->container['subscription_status'] = $subscription_status;

        return $this;
    }

    /**
     * Gets user
     * @return \KnetikCloud\Model\SimpleUserResource
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     * @param \KnetikCloud\Model\SimpleUserResource $user The user
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


