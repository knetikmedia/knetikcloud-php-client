<?php
/**
 * OptimalPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * OptimalPaymentRequest Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OptimalPaymentRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OptimalPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'string',
        'first_name' => 'string',
        'invoice_id' => 'int',
        'last_name' => 'string',
        'on_decline' => 'string',
        'on_error' => 'string',
        'on_success' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'first_name' => 'first_name',
        'invoice_id' => 'invoice_id',
        'last_name' => 'last_name',
        'on_decline' => 'on_decline',
        'on_error' => 'on_error',
        'on_success' => 'on_success'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'invoice_id' => 'setInvoiceId',
        'last_name' => 'setLastName',
        'on_decline' => 'setOnDecline',
        'on_error' => 'setOnError',
        'on_success' => 'setOnSuccess'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'invoice_id' => 'getInvoiceId',
        'last_name' => 'getLastName',
        'on_decline' => 'getOnDecline',
        'on_error' => 'getOnError',
        'on_success' => 'getOnSuccess'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['on_decline'] = isset($data['on_decline']) ? $data['on_decline'] : null;
        $this->container['on_error'] = isset($data['on_error']) ? $data['on_error'] : null;
        $this->container['on_success'] = isset($data['on_success']) ? $data['on_success'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['invoice_id'] === null) {
            $invalid_properties[] = "'invoice_id' can't be null";
        }
        if ($this->container['on_decline'] === null) {
            $invalid_properties[] = "'on_decline' can't be null";
        }
        if ($this->container['on_error'] === null) {
            $invalid_properties[] = "'on_error' can't be null";
        }
        if ($this->container['on_success'] === null) {
            $invalid_properties[] = "'on_success' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['invoice_id'] === null) {
            return false;
        }
        if ($this->container['on_decline'] === null) {
            return false;
        }
        if ($this->container['on_error'] === null) {
            return false;
        }
        if ($this->container['on_success'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email The email address of the user
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name The first name of the user
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets invoice_id
     * @return int
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     * @param int $invoice_id The id of the invoice to pay
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name The last name of the user
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets on_decline
     * @return string
     */
    public function getOnDecline()
    {
        return $this->container['on_decline'];
    }

    /**
     * Sets on_decline
     * @param string $on_decline The url to redirect the user to after declining payment
     * @return $this
     */
    public function setOnDecline($on_decline)
    {
        $this->container['on_decline'] = $on_decline;

        return $this;
    }

    /**
     * Gets on_error
     * @return string
     */
    public function getOnError()
    {
        return $this->container['on_error'];
    }

    /**
     * Sets on_error
     * @param string $on_error The url to redirect the user to after an error in payment
     * @return $this
     */
    public function setOnError($on_error)
    {
        $this->container['on_error'] = $on_error;

        return $this;
    }

    /**
     * Gets on_success
     * @return string
     */
    public function getOnSuccess()
    {
        return $this->container['on_success'];
    }

    /**
     * Sets on_success
     * @param string $on_success The url to redirect the user to after successful payment
     * @return $this
     */
    public function setOnSuccess($on_success)
    {
        $this->container['on_success'] = $on_success;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


