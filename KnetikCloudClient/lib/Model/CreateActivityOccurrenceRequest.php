<?php
/**
 * CreateActivityOccurrenceRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * CreateActivityOccurrenceRequest Class Doc Comment
 *
 * @category    Class
 * @description A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateActivityOccurrenceRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreateActivityOccurrenceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activity_id' => 'int',
        'challenge_activity_id' => 'int',
        'core_settings' => '\KnetikCloud\Model\CoreActivityOccurrenceSettings',
        'entitlement' => '\KnetikCloud\Model\ItemIdRequest',
        'event_id' => 'int',
        'host' => 'int',
        'settings' => '\KnetikCloud\Model\SelectedSettingRequest[]',
        'simulated' => 'bool',
        'status' => 'string',
        'users' => '\KnetikCloud\Model\Participant[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activity_id' => 'int64',
        'challenge_activity_id' => 'int64',
        'core_settings' => null,
        'entitlement' => null,
        'event_id' => 'int64',
        'host' => 'int32',
        'settings' => null,
        'simulated' => null,
        'status' => null,
        'users' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'activity_id' => 'activity_id',
        'challenge_activity_id' => 'challenge_activity_id',
        'core_settings' => 'core_settings',
        'entitlement' => 'entitlement',
        'event_id' => 'event_id',
        'host' => 'host',
        'settings' => 'settings',
        'simulated' => 'simulated',
        'status' => 'status',
        'users' => 'users'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'activity_id' => 'setActivityId',
        'challenge_activity_id' => 'setChallengeActivityId',
        'core_settings' => 'setCoreSettings',
        'entitlement' => 'setEntitlement',
        'event_id' => 'setEventId',
        'host' => 'setHost',
        'settings' => 'setSettings',
        'simulated' => 'setSimulated',
        'status' => 'setStatus',
        'users' => 'setUsers'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'activity_id' => 'getActivityId',
        'challenge_activity_id' => 'getChallengeActivityId',
        'core_settings' => 'getCoreSettings',
        'entitlement' => 'getEntitlement',
        'event_id' => 'getEventId',
        'host' => 'getHost',
        'settings' => 'getSettings',
        'simulated' => 'getSimulated',
        'status' => 'getStatus',
        'users' => 'getUsers'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_SETUP = 'SETUP';
    const STATUS_OPEN = 'OPEN';
    const STATUS_LAUNCHING = 'LAUNCHING';
    const STATUS_PLAYING = 'PLAYING';
    const STATUS_FINISHED = 'FINISHED';
    const STATUS_ABANDONED = 'ABANDONED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SETUP,
            self::STATUS_OPEN,
            self::STATUS_LAUNCHING,
            self::STATUS_PLAYING,
            self::STATUS_FINISHED,
            self::STATUS_ABANDONED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['challenge_activity_id'] = isset($data['challenge_activity_id']) ? $data['challenge_activity_id'] : null;
        $this->container['core_settings'] = isset($data['core_settings']) ? $data['core_settings'] : null;
        $this->container['entitlement'] = isset($data['entitlement']) ? $data['entitlement'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['simulated'] = isset($data['simulated']) ? $data['simulated'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets activity_id
     * @return int
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     * @param int $activity_id The id of the activity, only needed when outside of challenge/event
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets challenge_activity_id
     * @return int
     */
    public function getChallengeActivityId()
    {
        return $this->container['challenge_activity_id'];
    }

    /**
     * Sets challenge_activity_id
     * @param int $challenge_activity_id The id of the challenge activity (required if playing in a challenge/event). Note that this is the challenge_activity_id in case the same activity apears twice in the challenge.
     * @return $this
     */
    public function setChallengeActivityId($challenge_activity_id)
    {
        $this->container['challenge_activity_id'] = $challenge_activity_id;

        return $this;
    }

    /**
     * Gets core_settings
     * @return \KnetikCloud\Model\CoreActivityOccurrenceSettings
     */
    public function getCoreSettings()
    {
        return $this->container['core_settings'];
    }

    /**
     * Sets core_settings
     * @param \KnetikCloud\Model\CoreActivityOccurrenceSettings $core_settings Defines core settings about the activity that affect how it can be created/played by users.
     * @return $this
     */
    public function setCoreSettings($core_settings)
    {
        $this->container['core_settings'] = $core_settings;

        return $this;
    }

    /**
     * Gets entitlement
     * @return \KnetikCloud\Model\ItemIdRequest
     */
    public function getEntitlement()
    {
        return $this->container['entitlement'];
    }

    /**
     * Sets entitlement
     * @param \KnetikCloud\Model\ItemIdRequest $entitlement The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity
     * @return $this
     */
    public function setEntitlement($entitlement)
    {
        $this->container['entitlement'] = $entitlement;

        return $this;
    }

    /**
     * Gets event_id
     * @return int
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     * @param int $event_id The id of the event this occurence is a part of, if any
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets host
     * @return int
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     * @param int $host The host of the occurrence, if not a participant (will be left out of users array). Must be the caller that creates the occurrence unless admin. Requires activity/challenge to allow host_option of 'non_player' if not admin as well
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets settings
     * @return \KnetikCloud\Model\SelectedSettingRequest[]
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     * @param \KnetikCloud\Model\SelectedSettingRequest[] $settings The values selected from the available settings defined for the activity. Ex: difficulty: hard. Can be left out if the activity is played during an event and the settings are already set at the event level. Ex: every monday, difficulty: hard, number of questions: 10, category: sport. Otherwise, the set must exactly match those of the activity.
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets simulated
     * @return bool
     */
    public function getSimulated()
    {
        return $this->container['simulated'];
    }

    /**
     * Sets simulated
     * @param bool $simulated Whether this occurrence will be ran as a simulation. Simulations will not be rewarded. Useful for bot play or trials
     * @return $this
     */
    public function setSimulated($simulated)
    {
        $this->container['simulated'] = $simulated;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status The current status of the occurrence (default: SETUP).
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets users
     * @return \KnetikCloud\Model\Participant[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     * @param \KnetikCloud\Model\Participant[] $users The list of users participating in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


