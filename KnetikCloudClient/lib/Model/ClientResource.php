<?php
/**
 * ClientResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * ClientResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ClientResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ClientResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_token_validity_seconds' => 'int',
        'client_key' => 'string',
        'grant_types' => 'string[]',
        'id' => 'int',
        'is_public' => 'bool',
        'locked' => 'bool',
        'name' => 'string',
        'redirect_uris' => 'string[]',
        'refresh_token_validity_seconds' => 'int',
        'secret' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'access_token_validity_seconds' => 'access_token_validity_seconds',
        'client_key' => 'client_key',
        'grant_types' => 'grant_types',
        'id' => 'id',
        'is_public' => 'is_public',
        'locked' => 'locked',
        'name' => 'name',
        'redirect_uris' => 'redirect_uris',
        'refresh_token_validity_seconds' => 'refresh_token_validity_seconds',
        'secret' => 'secret'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'access_token_validity_seconds' => 'setAccessTokenValiditySeconds',
        'client_key' => 'setClientKey',
        'grant_types' => 'setGrantTypes',
        'id' => 'setId',
        'is_public' => 'setIsPublic',
        'locked' => 'setLocked',
        'name' => 'setName',
        'redirect_uris' => 'setRedirectUris',
        'refresh_token_validity_seconds' => 'setRefreshTokenValiditySeconds',
        'secret' => 'setSecret'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'access_token_validity_seconds' => 'getAccessTokenValiditySeconds',
        'client_key' => 'getClientKey',
        'grant_types' => 'getGrantTypes',
        'id' => 'getId',
        'is_public' => 'getIsPublic',
        'locked' => 'getLocked',
        'name' => 'getName',
        'redirect_uris' => 'getRedirectUris',
        'refresh_token_validity_seconds' => 'getRefreshTokenValiditySeconds',
        'secret' => 'getSecret'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_token_validity_seconds'] = isset($data['access_token_validity_seconds']) ? $data['access_token_validity_seconds'] : null;
        $this->container['client_key'] = isset($data['client_key']) ? $data['client_key'] : null;
        $this->container['grant_types'] = isset($data['grant_types']) ? $data['grant_types'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_public'] = isset($data['is_public']) ? $data['is_public'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['redirect_uris'] = isset($data['redirect_uris']) ? $data['redirect_uris'] : null;
        $this->container['refresh_token_validity_seconds'] = isset($data['refresh_token_validity_seconds']) ? $data['refresh_token_validity_seconds'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['client_key'] === null) {
            $invalid_properties[] = "'client_key' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['secret'] === null) {
            $invalid_properties[] = "'secret' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['client_key'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['secret'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_token_validity_seconds
     * @return int
     */
    public function getAccessTokenValiditySeconds()
    {
        return $this->container['access_token_validity_seconds'];
    }

    /**
     * Sets access_token_validity_seconds
     * @param int $access_token_validity_seconds The expiration time of an initial oauth token in seconds
     * @return $this
     */
    public function setAccessTokenValiditySeconds($access_token_validity_seconds)
    {
        $this->container['access_token_validity_seconds'] = $access_token_validity_seconds;

        return $this;
    }

    /**
     * Gets client_key
     * @return string
     */
    public function getClientKey()
    {
        return $this->container['client_key'];
    }

    /**
     * Sets client_key
     * @param string $client_key The client_id field of the oauth token request
     * @return $this
     */
    public function setClientKey($client_key)
    {
        $this->container['client_key'] = $client_key;

        return $this;
    }

    /**
     * Gets grant_types
     * @return string[]
     */
    public function getGrantTypes()
    {
        return $this->container['grant_types'];
    }

    /**
     * Sets grant_types
     * @param string[] $grant_types The oauth grant type as in: password (username/password auth), client_credentials (server-to-server, private clients), refresh_token (to allow clients to refresh their initial token), facebook, google, etc) See documentation for a compelte list.
     * @return $this
     */
    public function setGrantTypes($grant_types)
    {
        $this->container['grant_types'] = $grant_types;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Generated unique ID for the client
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_public
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     * @param bool $is_public Set to true if the client is public i.e the secret key can be secured
     * @return $this
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets locked
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     * @param bool $locked Used to flag system clients that are not meant to be tinkered with
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The friendly name of the client
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets redirect_uris
     * @return string[]
     */
    public function getRedirectUris()
    {
        return $this->container['redirect_uris'];
    }

    /**
     * Sets redirect_uris
     * @param string[] $redirect_uris A redirection URL to use when granting access to third-parties (seldomly used)
     * @return $this
     */
    public function setRedirectUris($redirect_uris)
    {
        $this->container['redirect_uris'] = $redirect_uris;

        return $this;
    }

    /**
     * Gets refresh_token_validity_seconds
     * @return int
     */
    public function getRefreshTokenValiditySeconds()
    {
        return $this->container['refresh_token_validity_seconds'];
    }

    /**
     * Sets refresh_token_validity_seconds
     * @param int $refresh_token_validity_seconds The expiration time of a refresh oauth token in seconds
     * @return $this
     */
    public function setRefreshTokenValiditySeconds($refresh_token_validity_seconds)
    {
        $this->container['refresh_token_validity_seconds'] = $refresh_token_validity_seconds;

        return $this;
    }

    /**
     * Gets secret
     * @return string
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     * @param string $secret The client-secret field of the oauth request when creating a private client
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


