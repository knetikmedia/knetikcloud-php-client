<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * User Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class User implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'address' => 'string',
        'address2' => 'string',
        'affiliate' => '\KnetikCloud\Model\Affiliate',
        'avatar_url' => 'string',
        'children' => '\KnetikCloud\Model\UserRelationship[]',
        'city' => 'string',
        'country' => '\KnetikCloud\Model\Country',
        'currency' => '\KnetikCloud\Model\Currency',
        'date_created' => 'int',
        'date_of_birth' => 'int',
        'date_updated' => 'int',
        'description' => 'string',
        'display_name' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'fullname' => 'string',
        'gender' => 'string',
        'groups' => '\KnetikCloud\Model\GroupMember[]',
        'guest' => 'bool',
        'id' => 'int',
        'invite_token' => 'string',
        'lang' => '\KnetikCloud\Model\Language',
        'last_activity' => 'int',
        'last_login' => 'int',
        'last_name' => 'string',
        'lockout_attempts' => 'int',
        'lockout_date' => 'int',
        'mobile_number' => 'string',
        'old_id' => 'int',
        'parents' => '\KnetikCloud\Model\UserRelationship[]',
        'password' => 'string',
        'postal_code' => 'string',
        'properties_string' => 'string',
        'roles' => '\KnetikCloud\Model\Role[]',
        'state' => 'string',
        'status' => 'string',
        'tag_strings' => 'string[]',
        'tags' => '\KnetikCloud\Model\UserTag[]',
        'template' => 'string',
        'timezone' => '\KnetikCloud\Model\Timezone',
        'token' => 'string',
        'type_hint' => 'string',
        'username' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_properties' => 'additional_properties',
        'address' => 'address',
        'address2' => 'address2',
        'affiliate' => 'affiliate',
        'avatar_url' => 'avatar_url',
        'children' => 'children',
        'city' => 'city',
        'country' => 'country',
        'currency' => 'currency',
        'date_created' => 'date_created',
        'date_of_birth' => 'date_of_birth',
        'date_updated' => 'date_updated',
        'description' => 'description',
        'display_name' => 'display_name',
        'email' => 'email',
        'first_name' => 'first_name',
        'fullname' => 'fullname',
        'gender' => 'gender',
        'groups' => 'groups',
        'guest' => 'guest',
        'id' => 'id',
        'invite_token' => 'invite_token',
        'lang' => 'lang',
        'last_activity' => 'last_activity',
        'last_login' => 'last_login',
        'last_name' => 'last_name',
        'lockout_attempts' => 'lockout_attempts',
        'lockout_date' => 'lockout_date',
        'mobile_number' => 'mobile_number',
        'old_id' => 'old_id',
        'parents' => 'parents',
        'password' => 'password',
        'postal_code' => 'postal_code',
        'properties_string' => 'properties_string',
        'roles' => 'roles',
        'state' => 'state',
        'status' => 'status',
        'tag_strings' => 'tag_strings',
        'tags' => 'tags',
        'template' => 'template',
        'timezone' => 'timezone',
        'token' => 'token',
        'type_hint' => 'type_hint',
        'username' => 'username'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'additional_properties' => 'setAdditionalProperties',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'affiliate' => 'setAffiliate',
        'avatar_url' => 'setAvatarUrl',
        'children' => 'setChildren',
        'city' => 'setCity',
        'country' => 'setCountry',
        'currency' => 'setCurrency',
        'date_created' => 'setDateCreated',
        'date_of_birth' => 'setDateOfBirth',
        'date_updated' => 'setDateUpdated',
        'description' => 'setDescription',
        'display_name' => 'setDisplayName',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'fullname' => 'setFullname',
        'gender' => 'setGender',
        'groups' => 'setGroups',
        'guest' => 'setGuest',
        'id' => 'setId',
        'invite_token' => 'setInviteToken',
        'lang' => 'setLang',
        'last_activity' => 'setLastActivity',
        'last_login' => 'setLastLogin',
        'last_name' => 'setLastName',
        'lockout_attempts' => 'setLockoutAttempts',
        'lockout_date' => 'setLockoutDate',
        'mobile_number' => 'setMobileNumber',
        'old_id' => 'setOldId',
        'parents' => 'setParents',
        'password' => 'setPassword',
        'postal_code' => 'setPostalCode',
        'properties_string' => 'setPropertiesString',
        'roles' => 'setRoles',
        'state' => 'setState',
        'status' => 'setStatus',
        'tag_strings' => 'setTagStrings',
        'tags' => 'setTags',
        'template' => 'setTemplate',
        'timezone' => 'setTimezone',
        'token' => 'setToken',
        'type_hint' => 'setTypeHint',
        'username' => 'setUsername'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'additional_properties' => 'getAdditionalProperties',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'affiliate' => 'getAffiliate',
        'avatar_url' => 'getAvatarUrl',
        'children' => 'getChildren',
        'city' => 'getCity',
        'country' => 'getCountry',
        'currency' => 'getCurrency',
        'date_created' => 'getDateCreated',
        'date_of_birth' => 'getDateOfBirth',
        'date_updated' => 'getDateUpdated',
        'description' => 'getDescription',
        'display_name' => 'getDisplayName',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'fullname' => 'getFullname',
        'gender' => 'getGender',
        'groups' => 'getGroups',
        'guest' => 'getGuest',
        'id' => 'getId',
        'invite_token' => 'getInviteToken',
        'lang' => 'getLang',
        'last_activity' => 'getLastActivity',
        'last_login' => 'getLastLogin',
        'last_name' => 'getLastName',
        'lockout_attempts' => 'getLockoutAttempts',
        'lockout_date' => 'getLockoutDate',
        'mobile_number' => 'getMobileNumber',
        'old_id' => 'getOldId',
        'parents' => 'getParents',
        'password' => 'getPassword',
        'postal_code' => 'getPostalCode',
        'properties_string' => 'getPropertiesString',
        'roles' => 'getRoles',
        'state' => 'getState',
        'status' => 'getStatus',
        'tag_strings' => 'getTagStrings',
        'tags' => 'getTags',
        'template' => 'getTemplate',
        'timezone' => 'getTimezone',
        'token' => 'getToken',
        'type_hint' => 'getTypeHint',
        'username' => 'getUsername'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['affiliate'] = isset($data['affiliate']) ? $data['affiliate'] : null;
        $this->container['avatar_url'] = isset($data['avatar_url']) ? $data['avatar_url'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['date_updated'] = isset($data['date_updated']) ? $data['date_updated'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['fullname'] = isset($data['fullname']) ? $data['fullname'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['guest'] = isset($data['guest']) ? $data['guest'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invite_token'] = isset($data['invite_token']) ? $data['invite_token'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['last_activity'] = isset($data['last_activity']) ? $data['last_activity'] : null;
        $this->container['last_login'] = isset($data['last_login']) ? $data['last_login'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['lockout_attempts'] = isset($data['lockout_attempts']) ? $data['lockout_attempts'] : null;
        $this->container['lockout_date'] = isset($data['lockout_date']) ? $data['lockout_date'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['old_id'] = isset($data['old_id']) ? $data['old_id'] : null;
        $this->container['parents'] = isset($data['parents']) ? $data['parents'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['properties_string'] = isset($data['properties_string']) ? $data['properties_string'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tag_strings'] = isset($data['tag_strings']) ? $data['tag_strings'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['type_hint'] = isset($data['type_hint']) ? $data['type_hint'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param string $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets affiliate
     * @return \KnetikCloud\Model\Affiliate
     */
    public function getAffiliate()
    {
        return $this->container['affiliate'];
    }

    /**
     * Sets affiliate
     * @param \KnetikCloud\Model\Affiliate $affiliate
     * @return $this
     */
    public function setAffiliate($affiliate)
    {
        $this->container['affiliate'] = $affiliate;

        return $this;
    }

    /**
     * Gets avatar_url
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     * @param string $avatar_url
     * @return $this
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets children
     * @return \KnetikCloud\Model\UserRelationship[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     * @param \KnetikCloud\Model\UserRelationship[] $children
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     * @return \KnetikCloud\Model\Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param \KnetikCloud\Model\Country $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets currency
     * @return \KnetikCloud\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \KnetikCloud\Model\Currency $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date_created
     * @return int
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param int $date_created
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_of_birth
     * @return int
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     * @param int $date_of_birth
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets date_updated
     * @return int
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     * @param int $date_updated
     * @return $this
     */
    public function setDateUpdated($date_updated)
    {
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets fullname
     * @return string
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     * @param string $fullname
     * @return $this
     */
    public function setFullname($fullname)
    {
        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets groups
     * @return \KnetikCloud\Model\GroupMember[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     * @param \KnetikCloud\Model\GroupMember[] $groups
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets guest
     * @return bool
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     * @param bool $guest
     * @return $this
     */
    public function setGuest($guest)
    {
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invite_token
     * @return string
     */
    public function getInviteToken()
    {
        return $this->container['invite_token'];
    }

    /**
     * Sets invite_token
     * @param string $invite_token
     * @return $this
     */
    public function setInviteToken($invite_token)
    {
        $this->container['invite_token'] = $invite_token;

        return $this;
    }

    /**
     * Gets lang
     * @return \KnetikCloud\Model\Language
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     * @param \KnetikCloud\Model\Language $lang
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets last_activity
     * @return int
     */
    public function getLastActivity()
    {
        return $this->container['last_activity'];
    }

    /**
     * Sets last_activity
     * @param int $last_activity
     * @return $this
     */
    public function setLastActivity($last_activity)
    {
        $this->container['last_activity'] = $last_activity;

        return $this;
    }

    /**
     * Gets last_login
     * @return int
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     * @param int $last_login
     * @return $this
     */
    public function setLastLogin($last_login)
    {
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets lockout_attempts
     * @return int
     */
    public function getLockoutAttempts()
    {
        return $this->container['lockout_attempts'];
    }

    /**
     * Sets lockout_attempts
     * @param int $lockout_attempts
     * @return $this
     */
    public function setLockoutAttempts($lockout_attempts)
    {
        $this->container['lockout_attempts'] = $lockout_attempts;

        return $this;
    }

    /**
     * Gets lockout_date
     * @return int
     */
    public function getLockoutDate()
    {
        return $this->container['lockout_date'];
    }

    /**
     * Sets lockout_date
     * @param int $lockout_date
     * @return $this
     */
    public function setLockoutDate($lockout_date)
    {
        $this->container['lockout_date'] = $lockout_date;

        return $this;
    }

    /**
     * Gets mobile_number
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     * @param string $mobile_number
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets old_id
     * @return int
     */
    public function getOldId()
    {
        return $this->container['old_id'];
    }

    /**
     * Sets old_id
     * @param int $old_id
     * @return $this
     */
    public function setOldId($old_id)
    {
        $this->container['old_id'] = $old_id;

        return $this;
    }

    /**
     * Gets parents
     * @return \KnetikCloud\Model\UserRelationship[]
     */
    public function getParents()
    {
        return $this->container['parents'];
    }

    /**
     * Sets parents
     * @param \KnetikCloud\Model\UserRelationship[] $parents
     * @return $this
     */
    public function setParents($parents)
    {
        $this->container['parents'] = $parents;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets postal_code
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     * @param string $postal_code
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets properties_string
     * @return string
     */
    public function getPropertiesString()
    {
        return $this->container['properties_string'];
    }

    /**
     * Sets properties_string
     * @param string $properties_string
     * @return $this
     */
    public function setPropertiesString($properties_string)
    {
        $this->container['properties_string'] = $properties_string;

        return $this;
    }

    /**
     * Gets roles
     * @return \KnetikCloud\Model\Role[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     * @param \KnetikCloud\Model\Role[] $roles
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tag_strings
     * @return string[]
     */
    public function getTagStrings()
    {
        return $this->container['tag_strings'];
    }

    /**
     * Sets tag_strings
     * @param string[] $tag_strings
     * @return $this
     */
    public function setTagStrings($tag_strings)
    {
        $this->container['tag_strings'] = $tag_strings;

        return $this;
    }

    /**
     * Gets tags
     * @return \KnetikCloud\Model\UserTag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \KnetikCloud\Model\UserTag[] $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets timezone
     * @return \KnetikCloud\Model\Timezone
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param \KnetikCloud\Model\Timezone $timezone
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     * @param string $token
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets type_hint
     * @return string
     */
    public function getTypeHint()
    {
        return $this->container['type_hint'];
    }

    /**
     * Sets type_hint
     * @param string $type_hint
     * @return $this
     */
    public function setTypeHint($type_hint)
    {
        $this->container['type_hint'] = $type_hint;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


