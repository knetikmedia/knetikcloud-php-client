<?php
/**
 * InvoiceResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * InvoiceResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoiceResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_address1' => 'string',
        'billing_address2' => 'string',
        'billing_city_name' => 'string',
        'billing_country_name' => 'string',
        'billing_full_name' => 'string',
        'billing_postal_code' => 'string',
        'billing_state_name' => 'string',
        'cart_id' => 'string',
        'created_date' => 'int',
        'currency' => 'string',
        'current_fulfillment_status' => 'string',
        'current_payment_status' => 'string',
        'discount' => 'float',
        'email' => 'string',
        'external_ref' => 'string',
        'fed_tax' => 'float',
        'grand_total' => 'float',
        'id' => 'int',
        'invoice_number' => 'string',
        'items' => '\KnetikCloud\Model\InvoiceItemResource[]',
        'name_prefix' => 'string',
        'order_notes' => 'string',
        'parent_invoice_id' => 'int',
        'payment_method_id' => 'int',
        'phone' => 'string',
        'phone_number' => 'string',
        'remaining_balance' => 'float',
        'shipping' => 'float',
        'shipping_address1' => 'string',
        'shipping_address2' => 'string',
        'shipping_city_name' => 'string',
        'shipping_country_name' => 'string',
        'shipping_full_name' => 'string',
        'shipping_postal_code' => 'string',
        'shipping_state_name' => 'string',
        'sort' => 'int',
        'state_tax' => 'float',
        'subtotal' => 'float',
        'updated_date' => 'int',
        'user' => '\KnetikCloud\Model\SimpleUserResource',
        'vendor_id' => 'int',
        'vendor_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_address1' => null,
        'billing_address2' => null,
        'billing_city_name' => null,
        'billing_country_name' => null,
        'billing_full_name' => null,
        'billing_postal_code' => null,
        'billing_state_name' => null,
        'cart_id' => null,
        'created_date' => 'int64',
        'currency' => null,
        'current_fulfillment_status' => null,
        'current_payment_status' => null,
        'discount' => null,
        'email' => null,
        'external_ref' => null,
        'fed_tax' => null,
        'grand_total' => null,
        'id' => 'int32',
        'invoice_number' => null,
        'items' => null,
        'name_prefix' => null,
        'order_notes' => null,
        'parent_invoice_id' => 'int32',
        'payment_method_id' => 'int32',
        'phone' => null,
        'phone_number' => null,
        'remaining_balance' => null,
        'shipping' => null,
        'shipping_address1' => null,
        'shipping_address2' => null,
        'shipping_city_name' => null,
        'shipping_country_name' => null,
        'shipping_full_name' => null,
        'shipping_postal_code' => null,
        'shipping_state_name' => null,
        'sort' => 'int32',
        'state_tax' => null,
        'subtotal' => null,
        'updated_date' => 'int64',
        'user' => null,
        'vendor_id' => 'int32',
        'vendor_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_address1' => 'billing_address1',
        'billing_address2' => 'billing_address2',
        'billing_city_name' => 'billing_city_name',
        'billing_country_name' => 'billing_country_name',
        'billing_full_name' => 'billing_full_name',
        'billing_postal_code' => 'billing_postal_code',
        'billing_state_name' => 'billing_state_name',
        'cart_id' => 'cart_id',
        'created_date' => 'created_date',
        'currency' => 'currency',
        'current_fulfillment_status' => 'current_fulfillment_status',
        'current_payment_status' => 'current_payment_status',
        'discount' => 'discount',
        'email' => 'email',
        'external_ref' => 'external_ref',
        'fed_tax' => 'fed_tax',
        'grand_total' => 'grand_total',
        'id' => 'id',
        'invoice_number' => 'invoice_number',
        'items' => 'items',
        'name_prefix' => 'name_prefix',
        'order_notes' => 'order_notes',
        'parent_invoice_id' => 'parent_invoice_id',
        'payment_method_id' => 'payment_method_id',
        'phone' => 'phone',
        'phone_number' => 'phone_number',
        'remaining_balance' => 'remaining_balance',
        'shipping' => 'shipping',
        'shipping_address1' => 'shipping_address1',
        'shipping_address2' => 'shipping_address2',
        'shipping_city_name' => 'shipping_city_name',
        'shipping_country_name' => 'shipping_country_name',
        'shipping_full_name' => 'shipping_full_name',
        'shipping_postal_code' => 'shipping_postal_code',
        'shipping_state_name' => 'shipping_state_name',
        'sort' => 'sort',
        'state_tax' => 'state_tax',
        'subtotal' => 'subtotal',
        'updated_date' => 'updated_date',
        'user' => 'user',
        'vendor_id' => 'vendor_id',
        'vendor_name' => 'vendor_name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'billing_address1' => 'setBillingAddress1',
        'billing_address2' => 'setBillingAddress2',
        'billing_city_name' => 'setBillingCityName',
        'billing_country_name' => 'setBillingCountryName',
        'billing_full_name' => 'setBillingFullName',
        'billing_postal_code' => 'setBillingPostalCode',
        'billing_state_name' => 'setBillingStateName',
        'cart_id' => 'setCartId',
        'created_date' => 'setCreatedDate',
        'currency' => 'setCurrency',
        'current_fulfillment_status' => 'setCurrentFulfillmentStatus',
        'current_payment_status' => 'setCurrentPaymentStatus',
        'discount' => 'setDiscount',
        'email' => 'setEmail',
        'external_ref' => 'setExternalRef',
        'fed_tax' => 'setFedTax',
        'grand_total' => 'setGrandTotal',
        'id' => 'setId',
        'invoice_number' => 'setInvoiceNumber',
        'items' => 'setItems',
        'name_prefix' => 'setNamePrefix',
        'order_notes' => 'setOrderNotes',
        'parent_invoice_id' => 'setParentInvoiceId',
        'payment_method_id' => 'setPaymentMethodId',
        'phone' => 'setPhone',
        'phone_number' => 'setPhoneNumber',
        'remaining_balance' => 'setRemainingBalance',
        'shipping' => 'setShipping',
        'shipping_address1' => 'setShippingAddress1',
        'shipping_address2' => 'setShippingAddress2',
        'shipping_city_name' => 'setShippingCityName',
        'shipping_country_name' => 'setShippingCountryName',
        'shipping_full_name' => 'setShippingFullName',
        'shipping_postal_code' => 'setShippingPostalCode',
        'shipping_state_name' => 'setShippingStateName',
        'sort' => 'setSort',
        'state_tax' => 'setStateTax',
        'subtotal' => 'setSubtotal',
        'updated_date' => 'setUpdatedDate',
        'user' => 'setUser',
        'vendor_id' => 'setVendorId',
        'vendor_name' => 'setVendorName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'billing_address1' => 'getBillingAddress1',
        'billing_address2' => 'getBillingAddress2',
        'billing_city_name' => 'getBillingCityName',
        'billing_country_name' => 'getBillingCountryName',
        'billing_full_name' => 'getBillingFullName',
        'billing_postal_code' => 'getBillingPostalCode',
        'billing_state_name' => 'getBillingStateName',
        'cart_id' => 'getCartId',
        'created_date' => 'getCreatedDate',
        'currency' => 'getCurrency',
        'current_fulfillment_status' => 'getCurrentFulfillmentStatus',
        'current_payment_status' => 'getCurrentPaymentStatus',
        'discount' => 'getDiscount',
        'email' => 'getEmail',
        'external_ref' => 'getExternalRef',
        'fed_tax' => 'getFedTax',
        'grand_total' => 'getGrandTotal',
        'id' => 'getId',
        'invoice_number' => 'getInvoiceNumber',
        'items' => 'getItems',
        'name_prefix' => 'getNamePrefix',
        'order_notes' => 'getOrderNotes',
        'parent_invoice_id' => 'getParentInvoiceId',
        'payment_method_id' => 'getPaymentMethodId',
        'phone' => 'getPhone',
        'phone_number' => 'getPhoneNumber',
        'remaining_balance' => 'getRemainingBalance',
        'shipping' => 'getShipping',
        'shipping_address1' => 'getShippingAddress1',
        'shipping_address2' => 'getShippingAddress2',
        'shipping_city_name' => 'getShippingCityName',
        'shipping_country_name' => 'getShippingCountryName',
        'shipping_full_name' => 'getShippingFullName',
        'shipping_postal_code' => 'getShippingPostalCode',
        'shipping_state_name' => 'getShippingStateName',
        'sort' => 'getSort',
        'state_tax' => 'getStateTax',
        'subtotal' => 'getSubtotal',
        'updated_date' => 'getUpdatedDate',
        'user' => 'getUser',
        'vendor_id' => 'getVendorId',
        'vendor_name' => 'getVendorName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_address1'] = isset($data['billing_address1']) ? $data['billing_address1'] : null;
        $this->container['billing_address2'] = isset($data['billing_address2']) ? $data['billing_address2'] : null;
        $this->container['billing_city_name'] = isset($data['billing_city_name']) ? $data['billing_city_name'] : null;
        $this->container['billing_country_name'] = isset($data['billing_country_name']) ? $data['billing_country_name'] : null;
        $this->container['billing_full_name'] = isset($data['billing_full_name']) ? $data['billing_full_name'] : null;
        $this->container['billing_postal_code'] = isset($data['billing_postal_code']) ? $data['billing_postal_code'] : null;
        $this->container['billing_state_name'] = isset($data['billing_state_name']) ? $data['billing_state_name'] : null;
        $this->container['cart_id'] = isset($data['cart_id']) ? $data['cart_id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['current_fulfillment_status'] = isset($data['current_fulfillment_status']) ? $data['current_fulfillment_status'] : null;
        $this->container['current_payment_status'] = isset($data['current_payment_status']) ? $data['current_payment_status'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['external_ref'] = isset($data['external_ref']) ? $data['external_ref'] : null;
        $this->container['fed_tax'] = isset($data['fed_tax']) ? $data['fed_tax'] : null;
        $this->container['grand_total'] = isset($data['grand_total']) ? $data['grand_total'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['name_prefix'] = isset($data['name_prefix']) ? $data['name_prefix'] : null;
        $this->container['order_notes'] = isset($data['order_notes']) ? $data['order_notes'] : null;
        $this->container['parent_invoice_id'] = isset($data['parent_invoice_id']) ? $data['parent_invoice_id'] : null;
        $this->container['payment_method_id'] = isset($data['payment_method_id']) ? $data['payment_method_id'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['remaining_balance'] = isset($data['remaining_balance']) ? $data['remaining_balance'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['shipping_address1'] = isset($data['shipping_address1']) ? $data['shipping_address1'] : null;
        $this->container['shipping_address2'] = isset($data['shipping_address2']) ? $data['shipping_address2'] : null;
        $this->container['shipping_city_name'] = isset($data['shipping_city_name']) ? $data['shipping_city_name'] : null;
        $this->container['shipping_country_name'] = isset($data['shipping_country_name']) ? $data['shipping_country_name'] : null;
        $this->container['shipping_full_name'] = isset($data['shipping_full_name']) ? $data['shipping_full_name'] : null;
        $this->container['shipping_postal_code'] = isset($data['shipping_postal_code']) ? $data['shipping_postal_code'] : null;
        $this->container['shipping_state_name'] = isset($data['shipping_state_name']) ? $data['shipping_state_name'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['state_tax'] = isset($data['state_tax']) ? $data['state_tax'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets billing_address1
     * @return string
     */
    public function getBillingAddress1()
    {
        return $this->container['billing_address1'];
    }

    /**
     * Sets billing_address1
     * @param string $billing_address1 Line one of the customer's billing address
     * @return $this
     */
    public function setBillingAddress1($billing_address1)
    {
        $this->container['billing_address1'] = $billing_address1;

        return $this;
    }

    /**
     * Gets billing_address2
     * @return string
     */
    public function getBillingAddress2()
    {
        return $this->container['billing_address2'];
    }

    /**
     * Sets billing_address2
     * @param string $billing_address2 Line two of the customer's billing address
     * @return $this
     */
    public function setBillingAddress2($billing_address2)
    {
        $this->container['billing_address2'] = $billing_address2;

        return $this;
    }

    /**
     * Gets billing_city_name
     * @return string
     */
    public function getBillingCityName()
    {
        return $this->container['billing_city_name'];
    }

    /**
     * Sets billing_city_name
     * @param string $billing_city_name The city for the customer's billing address
     * @return $this
     */
    public function setBillingCityName($billing_city_name)
    {
        $this->container['billing_city_name'] = $billing_city_name;

        return $this;
    }

    /**
     * Gets billing_country_name
     * @return string
     */
    public function getBillingCountryName()
    {
        return $this->container['billing_country_name'];
    }

    /**
     * Sets billing_country_name
     * @param string $billing_country_name The country for the customer's billing address
     * @return $this
     */
    public function setBillingCountryName($billing_country_name)
    {
        $this->container['billing_country_name'] = $billing_country_name;

        return $this;
    }

    /**
     * Gets billing_full_name
     * @return string
     */
    public function getBillingFullName()
    {
        return $this->container['billing_full_name'];
    }

    /**
     * Sets billing_full_name
     * @param string $billing_full_name The customer's name for the billing address
     * @return $this
     */
    public function setBillingFullName($billing_full_name)
    {
        $this->container['billing_full_name'] = $billing_full_name;

        return $this;
    }

    /**
     * Gets billing_postal_code
     * @return string
     */
    public function getBillingPostalCode()
    {
        return $this->container['billing_postal_code'];
    }

    /**
     * Sets billing_postal_code
     * @param string $billing_postal_code The postal code for the customer's billing address
     * @return $this
     */
    public function setBillingPostalCode($billing_postal_code)
    {
        $this->container['billing_postal_code'] = $billing_postal_code;

        return $this;
    }

    /**
     * Gets billing_state_name
     * @return string
     */
    public function getBillingStateName()
    {
        return $this->container['billing_state_name'];
    }

    /**
     * Sets billing_state_name
     * @param string $billing_state_name The state for the customer's billing address
     * @return $this
     */
    public function setBillingStateName($billing_state_name)
    {
        $this->container['billing_state_name'] = $billing_state_name;

        return $this;
    }

    /**
     * Gets cart_id
     * @return string
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     * @param string $cart_id The guid of the cart this invoice came from
     * @return $this
     */
    public function setCartId($cart_id)
    {
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets created_date
     * @return int
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     * @param int $created_date The date the invoice was created, unix timestamp in seconds
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency The code for the currency invoice prices are in
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets current_fulfillment_status
     * @return string
     */
    public function getCurrentFulfillmentStatus()
    {
        return $this->container['current_fulfillment_status'];
    }

    /**
     * Sets current_fulfillment_status
     * @param string $current_fulfillment_status The fulfillment status of the invoice
     * @return $this
     */
    public function setCurrentFulfillmentStatus($current_fulfillment_status)
    {
        $this->container['current_fulfillment_status'] = $current_fulfillment_status;

        return $this;
    }

    /**
     * Gets current_payment_status
     * @return string
     */
    public function getCurrentPaymentStatus()
    {
        return $this->container['current_payment_status'];
    }

    /**
     * Sets current_payment_status
     * @param string $current_payment_status The payment status of the invoice
     * @return $this
     */
    public function setCurrentPaymentStatus($current_payment_status)
    {
        $this->container['current_payment_status'] = $current_payment_status;

        return $this;
    }

    /**
     * Gets discount
     * @return float
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     * @param float $discount The amount of money saved through coupons
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email The customer's email address
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets external_ref
     * @return string
     */
    public function getExternalRef()
    {
        return $this->container['external_ref'];
    }

    /**
     * Sets external_ref
     * @param string $external_ref An external reference to filter on
     * @return $this
     */
    public function setExternalRef($external_ref)
    {
        $this->container['external_ref'] = $external_ref;

        return $this;
    }

    /**
     * Gets fed_tax
     * @return float
     */
    public function getFedTax()
    {
        return $this->container['fed_tax'];
    }

    /**
     * Sets fed_tax
     * @param float $fed_tax The amount of federal tax added
     * @return $this
     */
    public function setFedTax($fed_tax)
    {
        $this->container['fed_tax'] = $fed_tax;

        return $this;
    }

    /**
     * Gets grand_total
     * @return float
     */
    public function getGrandTotal()
    {
        return $this->container['grand_total'];
    }

    /**
     * Sets grand_total
     * @param float $grand_total The final price of the invoice
     * @return $this
     */
    public function setGrandTotal($grand_total)
    {
        $this->container['grand_total'] = $grand_total;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the invoice
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param string $invoice_number A reference number for the invoice
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets items
     * @return \KnetikCloud\Model\InvoiceItemResource[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     * @param \KnetikCloud\Model\InvoiceItemResource[] $items A list of items within the invoice
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets name_prefix
     * @return string
     */
    public function getNamePrefix()
    {
        return $this->container['name_prefix'];
    }

    /**
     * Sets name_prefix
     * @param string $name_prefix The customer's name prefix
     * @return $this
     */
    public function setNamePrefix($name_prefix)
    {
        $this->container['name_prefix'] = $name_prefix;

        return $this;
    }

    /**
     * Gets order_notes
     * @return string
     */
    public function getOrderNotes()
    {
        return $this->container['order_notes'];
    }

    /**
     * Sets order_notes
     * @param string $order_notes Notes about the order
     * @return $this
     */
    public function setOrderNotes($order_notes)
    {
        $this->container['order_notes'] = $order_notes;

        return $this;
    }

    /**
     * Gets parent_invoice_id
     * @return int
     */
    public function getParentInvoiceId()
    {
        return $this->container['parent_invoice_id'];
    }

    /**
     * Sets parent_invoice_id
     * @param int $parent_invoice_id The id of an invoice this is a child of
     * @return $this
     */
    public function setParentInvoiceId($parent_invoice_id)
    {
        $this->container['parent_invoice_id'] = $parent_invoice_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     * @return int
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     * @param int $payment_method_id The id of a saved payment method used to pay for the invoice
     * @return $this
     */
    public function setPaymentMethodId($payment_method_id)
    {
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone The customer's phone number
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param string $phone_number The customer's phone number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets remaining_balance
     * @return float
     */
    public function getRemainingBalance()
    {
        return $this->container['remaining_balance'];
    }

    /**
     * Sets remaining_balance
     * @param float $remaining_balance The remaining price of the invoice (after any payments made so far)
     * @return $this
     */
    public function setRemainingBalance($remaining_balance)
    {
        $this->container['remaining_balance'] = $remaining_balance;

        return $this;
    }

    /**
     * Gets shipping
     * @return float
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     * @param float $shipping The shipping cost
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets shipping_address1
     * @return string
     */
    public function getShippingAddress1()
    {
        return $this->container['shipping_address1'];
    }

    /**
     * Sets shipping_address1
     * @param string $shipping_address1 Line one of the customer's shipping address
     * @return $this
     */
    public function setShippingAddress1($shipping_address1)
    {
        $this->container['shipping_address1'] = $shipping_address1;

        return $this;
    }

    /**
     * Gets shipping_address2
     * @return string
     */
    public function getShippingAddress2()
    {
        return $this->container['shipping_address2'];
    }

    /**
     * Sets shipping_address2
     * @param string $shipping_address2 Line two of the customer's shipping address
     * @return $this
     */
    public function setShippingAddress2($shipping_address2)
    {
        $this->container['shipping_address2'] = $shipping_address2;

        return $this;
    }

    /**
     * Gets shipping_city_name
     * @return string
     */
    public function getShippingCityName()
    {
        return $this->container['shipping_city_name'];
    }

    /**
     * Sets shipping_city_name
     * @param string $shipping_city_name The city for the customer's shipping address
     * @return $this
     */
    public function setShippingCityName($shipping_city_name)
    {
        $this->container['shipping_city_name'] = $shipping_city_name;

        return $this;
    }

    /**
     * Gets shipping_country_name
     * @return string
     */
    public function getShippingCountryName()
    {
        return $this->container['shipping_country_name'];
    }

    /**
     * Sets shipping_country_name
     * @param string $shipping_country_name The country for the customer's shipping address
     * @return $this
     */
    public function setShippingCountryName($shipping_country_name)
    {
        $this->container['shipping_country_name'] = $shipping_country_name;

        return $this;
    }

    /**
     * Gets shipping_full_name
     * @return string
     */
    public function getShippingFullName()
    {
        return $this->container['shipping_full_name'];
    }

    /**
     * Sets shipping_full_name
     * @param string $shipping_full_name The customer's name for the shipping address
     * @return $this
     */
    public function setShippingFullName($shipping_full_name)
    {
        $this->container['shipping_full_name'] = $shipping_full_name;

        return $this;
    }

    /**
     * Gets shipping_postal_code
     * @return string
     */
    public function getShippingPostalCode()
    {
        return $this->container['shipping_postal_code'];
    }

    /**
     * Sets shipping_postal_code
     * @param string $shipping_postal_code The postal code for the customer's shipping address
     * @return $this
     */
    public function setShippingPostalCode($shipping_postal_code)
    {
        $this->container['shipping_postal_code'] = $shipping_postal_code;

        return $this;
    }

    /**
     * Gets shipping_state_name
     * @return string
     */
    public function getShippingStateName()
    {
        return $this->container['shipping_state_name'];
    }

    /**
     * Sets shipping_state_name
     * @param string $shipping_state_name The state for the customer's shipping address
     * @return $this
     */
    public function setShippingStateName($shipping_state_name)
    {
        $this->container['shipping_state_name'] = $shipping_state_name;

        return $this;
    }

    /**
     * Gets sort
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     * @param int $sort A number to use in sorting items. default 500.
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets state_tax
     * @return float
     */
    public function getStateTax()
    {
        return $this->container['state_tax'];
    }

    /**
     * Sets state_tax
     * @param float $state_tax The amount of state tax added
     * @return $this
     */
    public function setStateTax($state_tax)
    {
        $this->container['state_tax'] = $state_tax;

        return $this;
    }

    /**
     * Gets subtotal
     * @return float
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     * @param float $subtotal The sum price of all items before shipping, coupons and tax
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets updated_date
     * @return int
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     * @param int $updated_date The date the invoice was last updated, unix timestamp in seconds
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets user
     * @return \KnetikCloud\Model\SimpleUserResource
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     * @param \KnetikCloud\Model\SimpleUserResource $user The owner of the invoice
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets vendor_id
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     * @param int $vendor_id The id of the vendor
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets vendor_name
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     * @param string $vendor_name The name of the invoice
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


