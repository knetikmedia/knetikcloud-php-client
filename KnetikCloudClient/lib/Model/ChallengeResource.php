<?php
/**
 * ChallengeResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * ChallengeResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChallengeResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ChallengeResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activities' => 'int',
        'additional_properties' => 'map[string,\KnetikCloud\Model\Property]',
        'campaign_id' => 'int',
        'copy_of' => 'int',
        'created_date' => 'int',
        'end_date' => 'int',
        'id' => 'int',
        'leaderboard_strategy' => 'string',
        'long_description' => 'string',
        'name' => 'string',
        'next_event_date' => 'int',
        'reward_lag_minutes' => 'int',
        'reward_set' => '\KnetikCloud\Model\RewardSetResource',
        'schedule' => '\KnetikCloud\Model\Schedule',
        'short_description' => 'string',
        'start_date' => 'int',
        'template' => 'string',
        'updated_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activities' => 'int32',
        'additional_properties' => null,
        'campaign_id' => 'int64',
        'copy_of' => 'int64',
        'created_date' => 'int64',
        'end_date' => 'int64',
        'id' => 'int64',
        'leaderboard_strategy' => null,
        'long_description' => null,
        'name' => null,
        'next_event_date' => 'int64',
        'reward_lag_minutes' => 'int32',
        'reward_set' => null,
        'schedule' => null,
        'short_description' => null,
        'start_date' => 'int64',
        'template' => null,
        'updated_date' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'activities' => 'activities',
        'additional_properties' => 'additional_properties',
        'campaign_id' => 'campaign_id',
        'copy_of' => 'copy_of',
        'created_date' => 'created_date',
        'end_date' => 'end_date',
        'id' => 'id',
        'leaderboard_strategy' => 'leaderboard_strategy',
        'long_description' => 'long_description',
        'name' => 'name',
        'next_event_date' => 'next_event_date',
        'reward_lag_minutes' => 'reward_lag_minutes',
        'reward_set' => 'reward_set',
        'schedule' => 'schedule',
        'short_description' => 'short_description',
        'start_date' => 'start_date',
        'template' => 'template',
        'updated_date' => 'updated_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'activities' => 'setActivities',
        'additional_properties' => 'setAdditionalProperties',
        'campaign_id' => 'setCampaignId',
        'copy_of' => 'setCopyOf',
        'created_date' => 'setCreatedDate',
        'end_date' => 'setEndDate',
        'id' => 'setId',
        'leaderboard_strategy' => 'setLeaderboardStrategy',
        'long_description' => 'setLongDescription',
        'name' => 'setName',
        'next_event_date' => 'setNextEventDate',
        'reward_lag_minutes' => 'setRewardLagMinutes',
        'reward_set' => 'setRewardSet',
        'schedule' => 'setSchedule',
        'short_description' => 'setShortDescription',
        'start_date' => 'setStartDate',
        'template' => 'setTemplate',
        'updated_date' => 'setUpdatedDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'activities' => 'getActivities',
        'additional_properties' => 'getAdditionalProperties',
        'campaign_id' => 'getCampaignId',
        'copy_of' => 'getCopyOf',
        'created_date' => 'getCreatedDate',
        'end_date' => 'getEndDate',
        'id' => 'getId',
        'leaderboard_strategy' => 'getLeaderboardStrategy',
        'long_description' => 'getLongDescription',
        'name' => 'getName',
        'next_event_date' => 'getNextEventDate',
        'reward_lag_minutes' => 'getRewardLagMinutes',
        'reward_set' => 'getRewardSet',
        'schedule' => 'getSchedule',
        'short_description' => 'getShortDescription',
        'start_date' => 'getStartDate',
        'template' => 'getTemplate',
        'updated_date' => 'getUpdatedDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activities'] = isset($data['activities']) ? $data['activities'] : null;
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['copy_of'] = isset($data['copy_of']) ? $data['copy_of'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['leaderboard_strategy'] = isset($data['leaderboard_strategy']) ? $data['leaderboard_strategy'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['next_event_date'] = isset($data['next_event_date']) ? $data['next_event_date'] : null;
        $this->container['reward_lag_minutes'] = isset($data['reward_lag_minutes']) ? $data['reward_lag_minutes'] : null;
        $this->container['reward_set'] = isset($data['reward_set']) ? $data['reward_set'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets activities
     * @return int
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     * @param int $activities The number of activities allowed to this challenge
     * @return $this
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets additional_properties
     * @return map[string,\KnetikCloud\Model\Property]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     * @param map[string,\KnetikCloud\Model\Property] $additional_properties A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets campaign_id
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     * @param int $campaign_id The id of the campaign this challenge is a part of. The challenge must be tied to an active campaign before it will spawn events
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets copy_of
     * @return int
     */
    public function getCopyOf()
    {
        return $this->container['copy_of'];
    }

    /**
     * Sets copy_of
     * @param int $copy_of The ID of the original challenge it was copied from
     * @return $this
     */
    public function setCopyOf($copy_of)
    {
        $this->container['copy_of'] = $copy_of;

        return $this;
    }

    /**
     * Gets created_date
     * @return int
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     * @param int $created_date The date/time this resource was created in seconds since unix epoch
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return int
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param int $end_date The end date of this challenge in seconds since epoch. required if part of a campaign
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The unique ID for that resource
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets leaderboard_strategy
     * @return string
     */
    public function getLeaderboardStrategy()
    {
        return $this->container['leaderboard_strategy'];
    }

    /**
     * Sets leaderboard_strategy
     * @param string $leaderboard_strategy The strategy for calculating the leaderboard. Defaults to highest score. Value MUST come from the list of available strategies from the Leaderboard Service.
     * @return $this
     */
    public function setLeaderboardStrategy($leaderboard_strategy)
    {
        $this->container['leaderboard_strategy'] = $leaderboard_strategy;

        return $this;
    }

    /**
     * Gets long_description
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     * @param string $long_description The user friendly name of that resource. Defaults to blank string
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The user friendly name of that resource
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets next_event_date
     * @return int
     */
    public function getNextEventDate()
    {
        return $this->container['next_event_date'];
    }

    /**
     * Sets next_event_date
     * @param int $next_event_date The next date this challenge will be occur in seconds since epoch
     * @return $this
     */
    public function setNextEventDate($next_event_date)
    {
        $this->container['next_event_date'] = $next_event_date;

        return $this;
    }

    /**
     * Gets reward_lag_minutes
     * @return int
     */
    public function getRewardLagMinutes()
    {
        return $this->container['reward_lag_minutes'];
    }

    /**
     * Sets reward_lag_minutes
     * @param int $reward_lag_minutes The number of minutes minimum to wait at the end of this challenge before running rewards, to allow activities to complete
     * @return $this
     */
    public function setRewardLagMinutes($reward_lag_minutes)
    {
        $this->container['reward_lag_minutes'] = $reward_lag_minutes;

        return $this;
    }

    /**
     * Gets reward_set
     * @return \KnetikCloud\Model\RewardSetResource
     */
    public function getRewardSet()
    {
        return $this->container['reward_set'];
    }

    /**
     * Sets reward_set
     * @param \KnetikCloud\Model\RewardSetResource $reward_set The rewards to give at the end of the challenge. When creating/updating only id is used. Reward set must be pre-existing
     * @return $this
     */
    public function setRewardSet($reward_set)
    {
        $this->container['reward_set'] = $reward_set;

        return $this;
    }

    /**
     * Gets schedule
     * @return \KnetikCloud\Model\Schedule
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     * @param \KnetikCloud\Model\Schedule $schedule The repeat schedule for the challenge
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     * @param string $short_description The user friendly name of that resource. Defaults to blank string
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets start_date
     * @return int
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param int $start_date The start date of this challenge in seconds since epoch. required if part of a campaign
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template A challenge template this challenge is validated against (private). May be null and no validation of additional_properties will be done
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets updated_date
     * @return int
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     * @param int $updated_date The date/time this resource was last updated in seconds since unix epoch
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


