<?php
/**
 * CatalogSale
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * CatalogSale Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogSale implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogSale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_code' => 'string',
        'discount_type' => 'string',
        'discount_value' => 'double',
        'id' => 'int',
        'item' => 'int',
        'long_description' => 'string',
        'name' => 'string',
        'sale_end_date' => 'int',
        'sale_start_date' => 'int',
        'short_description' => 'string',
        'tag' => 'string',
        'vendor' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'currency_code',
        'discount_type' => 'discount_type',
        'discount_value' => 'discount_value',
        'id' => 'id',
        'item' => 'item',
        'long_description' => 'long_description',
        'name' => 'name',
        'sale_end_date' => 'sale_end_date',
        'sale_start_date' => 'sale_start_date',
        'short_description' => 'short_description',
        'tag' => 'tag',
        'vendor' => 'vendor'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'discount_type' => 'setDiscountType',
        'discount_value' => 'setDiscountValue',
        'id' => 'setId',
        'item' => 'setItem',
        'long_description' => 'setLongDescription',
        'name' => 'setName',
        'sale_end_date' => 'setSaleEndDate',
        'sale_start_date' => 'setSaleStartDate',
        'short_description' => 'setShortDescription',
        'tag' => 'setTag',
        'vendor' => 'setVendor'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'discount_type' => 'getDiscountType',
        'discount_value' => 'getDiscountValue',
        'id' => 'getId',
        'item' => 'getItem',
        'long_description' => 'getLongDescription',
        'name' => 'getName',
        'sale_end_date' => 'getSaleEndDate',
        'sale_start_date' => 'getSaleStartDate',
        'short_description' => 'getShortDescription',
        'tag' => 'getTag',
        'vendor' => 'getVendor'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const DISCOUNT_TYPE_VALUE = 'value';
    const DISCOUNT_TYPE_PERCENTAGE = 'percentage';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDiscountTypeAllowableValues()
    {
        return [
            self::DISCOUNT_TYPE_VALUE,
            self::DISCOUNT_TYPE_PERCENTAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['discount_type'] = isset($data['discount_type']) ? $data['discount_type'] : null;
        $this->container['discount_value'] = isset($data['discount_value']) ? $data['discount_value'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['sale_end_date'] = isset($data['sale_end_date']) ? $data['sale_end_date'] : null;
        $this->container['sale_start_date'] = isset($data['sale_start_date']) ? $data['sale_start_date'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['currency_code'] === null) {
            $invalid_properties[] = "'currency_code' can't be null";
        }
        if ($this->container['discount_type'] === null) {
            $invalid_properties[] = "'discount_type' can't be null";
        }
        $allowed_values = ["value", "percentage"];
        if (!in_array($this->container['discount_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'discount_type', must be one of 'value', 'percentage'.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['sale_start_date'] === null) {
            $invalid_properties[] = "'sale_start_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['currency_code'] === null) {
            return false;
        }
        if ($this->container['discount_type'] === null) {
            return false;
        }
        $allowed_values = ["value", "percentage"];
        if (!in_array($this->container['discount_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['sale_start_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code The iso3 code for the currency for this discountValue.  The sku purchased will have to match for it this sale to apply
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets discount_type
     * @return string
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     * @param string $discount_type The way in which the price is reduced. 'value' means subtracting directly, 'percentage' means subtracting by the price times the discountValue (1.0 == 100%)
     * @return $this
     */
    public function setDiscountType($discount_type)
    {
        $allowed_values = array('value', 'percentage');
        if ((!in_array($discount_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'discount_type', must be one of 'value', 'percentage'");
        }
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets discount_value
     * @return double
     */
    public function getDiscountValue()
    {
        return $this->container['discount_value'];
    }

    /**
     * Sets discount_value
     * @param double $discount_value The amount deducted from the price, in the same currencyCode as the item
     * @return $this
     */
    public function setDiscountValue($discount_value)
    {
        $this->container['discount_value'] = $discount_value;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The id of the sale
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets item
     * @return int
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     * @param int $item The id of the item this sale applies to.  Leave null to use other filters
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets long_description
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     * @param string $long_description The long description of the sale
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the sale.  Max 40 characters
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sale_end_date
     * @return int
     */
    public function getSaleEndDate()
    {
        return $this->container['sale_end_date'];
    }

    /**
     * Sets sale_end_date
     * @param int $sale_end_date The date the sale ends, null for never.  Unix timestamp in seconds
     * @return $this
     */
    public function setSaleEndDate($sale_end_date)
    {
        $this->container['sale_end_date'] = $sale_end_date;

        return $this;
    }

    /**
     * Gets sale_start_date
     * @return int
     */
    public function getSaleStartDate()
    {
        return $this->container['sale_start_date'];
    }

    /**
     * Sets sale_start_date
     * @param int $sale_start_date The date the sale begins.  Unix timestamp in seconds
     * @return $this
     */
    public function setSaleStartDate($sale_start_date)
    {
        $this->container['sale_start_date'] = $sale_start_date;

        return $this;
    }

    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     * @param string $short_description The short description of the sale.  Max 140 characters
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag The tag this sale applies to.  Leave null to skip this filter (applies to all tags)
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets vendor
     * @return int
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     * @param int $vendor The id of the vendor this sale applies to.  Leave null to skip this filter (applies to all vendors)
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


