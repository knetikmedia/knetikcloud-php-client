<?php
/**
 * ActionResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * ActionResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ActionResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ActionResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category' => 'string',
        'description' => 'string',
        'name' => 'string',
        'tags' => 'string[]',
        'variables' => '\KnetikCloud\Model\ActionVariableResource[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'description' => 'description',
        'name' => 'name',
        'tags' => 'tags',
        'variables' => 'variables'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'description' => 'setDescription',
        'name' => 'setName',
        'tags' => 'setTags',
        'variables' => 'setVariables'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'description' => 'getDescription',
        'name' => 'getName',
        'tags' => 'getTags',
        'variables' => 'getVariables'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CATEGORY_ACHIEVEMENT = 'achievement';
    const CATEGORY_BEHAVIOR = 'behavior';
    const CATEGORY_COMMENT = 'comment';
    const CATEGORY_DISPOSITION = 'disposition';
    const CATEGORY_DEVICE = 'device';
    const CATEGORY_ENTITLEMENT = 'entitlement';
    const CATEGORY_FRIENDS = 'friends';
    const CATEGORY_FULFILLMENT = 'fulfillment';
    const CATEGORY_GAMIFICATION = 'gamification';
    const CATEGORY_INVENTORY = 'inventory';
    const CATEGORY_INVOICE = 'invoice';
    const CATEGORY_MEDIA = 'media';
    const CATEGORY_SCHEDULER = 'scheduler';
    const CATEGORY_STORE = 'store';
    const CATEGORY_SUBSCRIPTION = 'subscription';
    const CATEGORY_USER = 'user';
    const CATEGORY_WALLET = 'wallet';
    const CATEGORY_CUSTOM = 'custom';
    const CATEGORY_CHALLENGE = 'challenge';
    const CATEGORY_ACTIVITY = 'activity';
    const CATEGORY_CAMPAIGN = 'campaign';
    const CATEGORY_EVENT = 'event';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_ACHIEVEMENT,
            self::CATEGORY_BEHAVIOR,
            self::CATEGORY_COMMENT,
            self::CATEGORY_DISPOSITION,
            self::CATEGORY_DEVICE,
            self::CATEGORY_ENTITLEMENT,
            self::CATEGORY_FRIENDS,
            self::CATEGORY_FULFILLMENT,
            self::CATEGORY_GAMIFICATION,
            self::CATEGORY_INVENTORY,
            self::CATEGORY_INVOICE,
            self::CATEGORY_MEDIA,
            self::CATEGORY_SCHEDULER,
            self::CATEGORY_STORE,
            self::CATEGORY_SUBSCRIPTION,
            self::CATEGORY_USER,
            self::CATEGORY_WALLET,
            self::CATEGORY_CUSTOM,
            self::CATEGORY_CHALLENGE,
            self::CATEGORY_ACTIVITY,
            self::CATEGORY_CAMPAIGN,
            self::CATEGORY_EVENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["achievement", "behavior", "comment", "disposition", "device", "entitlement", "friends", "fulfillment", "gamification", "inventory", "invoice", "media", "scheduler", "store", "subscription", "user", "wallet", "custom", "challenge", "activity", "campaign", "event"];
        if (!in_array($this->container['category'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'category', must be one of 'achievement', 'behavior', 'comment', 'disposition', 'device', 'entitlement', 'friends', 'fulfillment', 'gamification', 'inventory', 'invoice', 'media', 'scheduler', 'store', 'subscription', 'user', 'wallet', 'custom', 'challenge', 'activity', 'campaign', 'event'.";
        }

        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['variables'] === null) {
            $invalid_properties[] = "'variables' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["achievement", "behavior", "comment", "disposition", "device", "entitlement", "friends", "fulfillment", "gamification", "inventory", "invoice", "media", "scheduler", "store", "subscription", "user", "wallet", "custom", "challenge", "activity", "campaign", "event"];
        if (!in_array($this->container['category'], $allowed_values)) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['variables'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category The category the action is in. All customer specific actions are in the 'custom' category
     * @return $this
     */
    public function setCategory($category)
    {
        $allowed_values = array('achievement', 'behavior', 'comment', 'disposition', 'device', 'entitlement', 'friends', 'fulfillment', 'gamification', 'inventory', 'invoice', 'media', 'scheduler', 'store', 'subscription', 'user', 'wallet', 'custom', 'challenge', 'activity', 'campaign', 'event');
        if (!is_null($category) && (!in_array($category, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'category', must be one of 'achievement', 'behavior', 'comment', 'disposition', 'device', 'entitlement', 'friends', 'fulfillment', 'gamification', 'inventory', 'invoice', 'media', 'scheduler', 'store', 'subscription', 'user', 'wallet', 'custom', 'challenge', 'activity', 'campaign', 'event'");
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The description of the action
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the action. Used as the unique id for reference
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags A list of tags for searching
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets variables
     * @return \KnetikCloud\Model\ActionVariableResource[]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     * @param \KnetikCloud\Model\ActionVariableResource[] $variables The variables required for the action
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


