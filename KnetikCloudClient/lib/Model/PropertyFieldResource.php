<?php
/**
 * PropertyFieldResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Model;

use \ArrayAccess;

/**
 * PropertyFieldResource Class Doc Comment
 *
 * @category    Class
 * @package     KnetikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PropertyFieldResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PropertyFieldResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'inner_type' => 'string',
        'inner_type_fields' => '\KnetikCloud\Model\PropertyFieldResource[]',
        'name' => 'string',
        'required' => 'bool',
        'type' => 'string',
        'valid_values' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'inner_type' => null,
        'inner_type_fields' => null,
        'name' => null,
        'required' => null,
        'type' => null,
        'valid_values' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'inner_type' => 'inner_type',
        'inner_type_fields' => 'inner_type_fields',
        'name' => 'name',
        'required' => 'required',
        'type' => 'type',
        'valid_values' => 'valid_values'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'inner_type' => 'setInnerType',
        'inner_type_fields' => 'setInnerTypeFields',
        'name' => 'setName',
        'required' => 'setRequired',
        'type' => 'setType',
        'valid_values' => 'setValidValues'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'inner_type' => 'getInnerType',
        'inner_type_fields' => 'getInnerTypeFields',
        'name' => 'getName',
        'required' => 'getRequired',
        'type' => 'getType',
        'valid_values' => 'getValidValues'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const INNER_TYPE_INTEGER = 'integer';
    const INNER_TYPE_NUMBER = 'number';
    const INNER_TYPE_BOOL = 'bool';
    const INNER_TYPE_STRING = 'string';
    const INNER_TYPE_ENUMERATION = 'enumeration';
    const INNER_TYPE__LIST = 'list';
    const INNER_TYPE_OBJECT = 'object';
    const TYPE_INTEGER = 'integer';
    const TYPE_NUMBER = 'number';
    const TYPE_BOOL = 'bool';
    const TYPE_STRING = 'string';
    const TYPE_ENUMERATION = 'enumeration';
    const TYPE__LIST = 'list';
    const TYPE_OBJECT = 'object';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInnerTypeAllowableValues()
    {
        return [
            self::INNER_TYPE_INTEGER,
            self::INNER_TYPE_NUMBER,
            self::INNER_TYPE_BOOL,
            self::INNER_TYPE_STRING,
            self::INNER_TYPE_ENUMERATION,
            self::INNER_TYPE__LIST,
            self::INNER_TYPE_OBJECT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INTEGER,
            self::TYPE_NUMBER,
            self::TYPE_BOOL,
            self::TYPE_STRING,
            self::TYPE_ENUMERATION,
            self::TYPE__LIST,
            self::TYPE_OBJECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['inner_type'] = isset($data['inner_type']) ? $data['inner_type'] : null;
        $this->container['inner_type_fields'] = isset($data['inner_type_fields']) ? $data['inner_type_fields'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['valid_values'] = isset($data['valid_values']) ? $data['valid_values'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getInnerTypeAllowableValues();
        if (!in_array($this->container['inner_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'inner_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getInnerTypeAllowableValues();
        if (!in_array($this->container['inner_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description A description of the field
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets inner_type
     * @return string
     */
    public function getInnerType()
    {
        return $this->container['inner_type'];
    }

    /**
     * Sets inner_type
     * @param string $inner_type The type of values within a 'list' type field
     * @return $this
     */
    public function setInnerType($inner_type)
    {
        $allowed_values = $this->getInnerTypeAllowableValues();
        if (!is_null($inner_type) && !in_array($inner_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inner_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['inner_type'] = $inner_type;

        return $this;
    }

    /**
     * Gets inner_type_fields
     * @return \KnetikCloud\Model\PropertyFieldResource[]
     */
    public function getInnerTypeFields()
    {
        return $this->container['inner_type_fields'];
    }

    /**
     * Sets inner_type_fields
     * @param \KnetikCloud\Model\PropertyFieldResource[] $inner_type_fields A description of fields within objects within a 'list' type field, when inner_type is 'object'
     * @return $this
     */
    public function setInnerTypeFields($inner_type_fields)
    {
        $this->container['inner_type_fields'] = $inner_type_fields;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the field
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets required
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     * @param bool $required Whether the field is required
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The type of the field
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets valid_values
     * @return string[]
     */
    public function getValidValues()
    {
        return $this->container['valid_values'];
    }

    /**
     * Sets valid_values
     * @param string[] $valid_values A list of valid values for 'enum' type fields
     * @return $this
     */
    public function setValidValues($valid_values)
    {
        $this->container['valid_values'] = $valid_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KnetikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


