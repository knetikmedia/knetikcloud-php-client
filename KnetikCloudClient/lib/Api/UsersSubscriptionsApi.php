<?php
/**
 * UsersSubscriptionsApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use \KnetikCloud\ApiClient;
use \KnetikCloud\ApiException;
use \KnetikCloud\Configuration;
use \KnetikCloud\ObjectSerializer;

/**
 * UsersSubscriptionsApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersSubscriptionsApi
{
    /**
     * API Client
     *
     * @var \KnetikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \KnetikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\KnetikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \KnetikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \KnetikCloud\ApiClient $apiClient set the API client
     *
     * @return UsersSubscriptionsApi
     */
    public function setApiClient(\KnetikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getUserSubscriptionDetails
     *
     * Get details about a user's subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\InventorySubscriptionResource
     */
    public function getUserSubscriptionDetails($user_id, $inventory_id)
    {
        list($response) = $this->getUserSubscriptionDetailsWithHttpInfo($user_id, $inventory_id);
        return $response;
    }

    /**
     * Operation getUserSubscriptionDetailsWithHttpInfo
     *
     * Get details about a user's subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\InventorySubscriptionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserSubscriptionDetailsWithHttpInfo($user_id, $inventory_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserSubscriptionDetails');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling getUserSubscriptionDetails');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/subscriptions/{inventory_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace(
                "{" . "inventory_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($inventory_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\InventorySubscriptionResource',
                '/users/{user_id}/subscriptions/{inventory_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\InventorySubscriptionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\InventorySubscriptionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsersSubscriptionDetails
     *
     * Get details about a user's subscriptions
     *
     * @param int $user_id The id of the user (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\InventorySubscriptionResource[]
     */
    public function getUsersSubscriptionDetails($user_id)
    {
        list($response) = $this->getUsersSubscriptionDetailsWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation getUsersSubscriptionDetailsWithHttpInfo
     *
     * Get details about a user's subscriptions
     *
     * @param int $user_id The id of the user (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\InventorySubscriptionResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersSubscriptionDetailsWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUsersSubscriptionDetails');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\InventorySubscriptionResource[]',
                '/users/{user_id}/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\InventorySubscriptionResource[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\InventorySubscriptionResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reactivateUserSubscription
     *
     * Reactivate a subscription and charge fee
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\ReactivateSubscriptionRequest $reactivate_subscription_request The reactivate subscription request object inventory (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\InvoiceResource
     */
    public function reactivateUserSubscription($user_id, $inventory_id, $reactivate_subscription_request = null)
    {
        list($response) = $this->reactivateUserSubscriptionWithHttpInfo($user_id, $inventory_id, $reactivate_subscription_request);
        return $response;
    }

    /**
     * Operation reactivateUserSubscriptionWithHttpInfo
     *
     * Reactivate a subscription and charge fee
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\ReactivateSubscriptionRequest $reactivate_subscription_request The reactivate subscription request object inventory (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\InvoiceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function reactivateUserSubscriptionWithHttpInfo($user_id, $inventory_id, $reactivate_subscription_request = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling reactivateUserSubscription');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling reactivateUserSubscription');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/subscriptions/{inventory_id}/reactivate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace(
                "{" . "inventory_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($inventory_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($reactivate_subscription_request)) {
            $_tempBody = $reactivate_subscription_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\InvoiceResource',
                '/users/{user_id}/subscriptions/{inventory_id}/reactivate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\InvoiceResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\InvoiceResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setSubscriptionBillDate
     *
     * Set a new date to bill a subscription on
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $bill_date The new bill date. Unix timestamp in seconds (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function setSubscriptionBillDate($user_id, $inventory_id, $bill_date)
    {
        list($response) = $this->setSubscriptionBillDateWithHttpInfo($user_id, $inventory_id, $bill_date);
        return $response;
    }

    /**
     * Operation setSubscriptionBillDateWithHttpInfo
     *
     * Set a new date to bill a subscription on
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $bill_date The new bill date. Unix timestamp in seconds (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSubscriptionBillDateWithHttpInfo($user_id, $inventory_id, $bill_date)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setSubscriptionBillDate');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setSubscriptionBillDate');
        }
        // verify the required parameter 'bill_date' is set
        if ($bill_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bill_date when calling setSubscriptionBillDate');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/subscriptions/{inventory_id}/bill-date";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace(
                "{" . "inventory_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($inventory_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($bill_date)) {
            $_tempBody = $bill_date;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{user_id}/subscriptions/{inventory_id}/bill-date'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setSubscriptionPaymentMethod
     *
     * Set the payment method to use for a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $payment_method_id The id of the payment method (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function setSubscriptionPaymentMethod($user_id, $inventory_id, $payment_method_id = null)
    {
        list($response) = $this->setSubscriptionPaymentMethodWithHttpInfo($user_id, $inventory_id, $payment_method_id);
        return $response;
    }

    /**
     * Operation setSubscriptionPaymentMethodWithHttpInfo
     *
     * Set the payment method to use for a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $payment_method_id The id of the payment method (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSubscriptionPaymentMethodWithHttpInfo($user_id, $inventory_id, $payment_method_id = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setSubscriptionPaymentMethod');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setSubscriptionPaymentMethod');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/subscriptions/{inventory_id}/payment-method";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace(
                "{" . "inventory_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($inventory_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($payment_method_id)) {
            $_tempBody = $payment_method_id;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{user_id}/subscriptions/{inventory_id}/payment-method'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setSubscriptionStatus
     *
     * Set the status of a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param string $status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function setSubscriptionStatus($user_id, $inventory_id, $status)
    {
        list($response) = $this->setSubscriptionStatusWithHttpInfo($user_id, $inventory_id, $status);
        return $response;
    }

    /**
     * Operation setSubscriptionStatusWithHttpInfo
     *
     * Set the status of a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param string $status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSubscriptionStatusWithHttpInfo($user_id, $inventory_id, $status)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setSubscriptionStatus');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setSubscriptionStatus');
        }
        // verify the required parameter 'status' is set
        if ($status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling setSubscriptionStatus');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/subscriptions/{inventory_id}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace(
                "{" . "inventory_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($inventory_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($status)) {
            $_tempBody = $status;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{user_id}/subscriptions/{inventory_id}/status'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setUserSubscriptionPlan
     *
     * Set a new subscription plan for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param string $plan_id The id of the new plan. Must be from the same subscription (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function setUserSubscriptionPlan($user_id, $inventory_id, $plan_id = null)
    {
        list($response) = $this->setUserSubscriptionPlanWithHttpInfo($user_id, $inventory_id, $plan_id);
        return $response;
    }

    /**
     * Operation setUserSubscriptionPlanWithHttpInfo
     *
     * Set a new subscription plan for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param string $plan_id The id of the new plan. Must be from the same subscription (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserSubscriptionPlanWithHttpInfo($user_id, $inventory_id, $plan_id = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setUserSubscriptionPlan');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setUserSubscriptionPlan');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/subscriptions/{inventory_id}/plan";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace(
                "{" . "inventory_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($inventory_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($plan_id)) {
            $_tempBody = $plan_id;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{user_id}/subscriptions/{inventory_id}/plan'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
