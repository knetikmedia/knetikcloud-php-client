<?php
/**
 * UsersSubscriptionsApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use KnetikCloud\ApiException;
use KnetikCloud\Configuration;
use KnetikCloud\HeaderSelector;
use KnetikCloud\ObjectSerializer;

/**
 * UsersSubscriptionsApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersSubscriptionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getUserSubscriptionDetails
     *
     * Get details about a user's subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\InventorySubscriptionResource
     */
    public function getUserSubscriptionDetails($user_id, $inventory_id)
    {
        list($response) = $this->getUserSubscriptionDetailsWithHttpInfo($user_id, $inventory_id);
        return $response;
    }

    /**
     * Operation getUserSubscriptionDetailsWithHttpInfo
     *
     * Get details about a user's subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\InventorySubscriptionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserSubscriptionDetailsWithHttpInfo($user_id, $inventory_id)
    {
        $returnType = '\KnetikCloud\Model\InventorySubscriptionResource';
        $request = $this->getUserSubscriptionDetailsRequest($user_id, $inventory_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\InventorySubscriptionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserSubscriptionDetailsAsync
     *
     * Get details about a user's subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserSubscriptionDetailsAsync($user_id, $inventory_id)
    {
        return $this->getUserSubscriptionDetailsAsyncWithHttpInfo($user_id, $inventory_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUserSubscriptionDetailsAsyncWithHttpInfo
     *
     * Get details about a user's subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserSubscriptionDetailsAsyncWithHttpInfo($user_id, $inventory_id)
    {
        $returnType = '\KnetikCloud\Model\InventorySubscriptionResource';
        $request = $this->getUserSubscriptionDetailsRequest($user_id, $inventory_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUserSubscriptionDetails'
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserSubscriptionDetailsRequest($user_id, $inventory_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserSubscriptionDetails');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling getUserSubscriptionDetails');
        }

        $resourcePath = '/users/{user_id}/subscriptions/{inventory_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace('{' . 'inventory_id' . '}', ObjectSerializer::toPathValue($inventory_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsersSubscriptionDetails
     *
     * Get details about a user's subscriptions
     *
     * @param int $user_id The id of the user (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\InventorySubscriptionResource[]
     */
    public function getUsersSubscriptionDetails($user_id)
    {
        list($response) = $this->getUsersSubscriptionDetailsWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation getUsersSubscriptionDetailsWithHttpInfo
     *
     * Get details about a user's subscriptions
     *
     * @param int $user_id The id of the user (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\InventorySubscriptionResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersSubscriptionDetailsWithHttpInfo($user_id)
    {
        $returnType = '\KnetikCloud\Model\InventorySubscriptionResource[]';
        $request = $this->getUsersSubscriptionDetailsRequest($user_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\InventorySubscriptionResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsersSubscriptionDetailsAsync
     *
     * Get details about a user's subscriptions
     *
     * @param int $user_id The id of the user (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersSubscriptionDetailsAsync($user_id)
    {
        return $this->getUsersSubscriptionDetailsAsyncWithHttpInfo($user_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUsersSubscriptionDetailsAsyncWithHttpInfo
     *
     * Get details about a user's subscriptions
     *
     * @param int $user_id The id of the user (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersSubscriptionDetailsAsyncWithHttpInfo($user_id)
    {
        $returnType = '\KnetikCloud\Model\InventorySubscriptionResource[]';
        $request = $this->getUsersSubscriptionDetailsRequest($user_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUsersSubscriptionDetails'
     *
     * @param int $user_id The id of the user (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsersSubscriptionDetailsRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUsersSubscriptionDetails');
        }

        $resourcePath = '/users/{user_id}/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reactivateUserSubscription
     *
     * Reactivate a subscription and charge fee
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\ReactivateSubscriptionRequest $reactivate_subscription_request The reactivate subscription request object inventory (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\InvoiceResource
     */
    public function reactivateUserSubscription($user_id, $inventory_id, $reactivate_subscription_request = null)
    {
        list($response) = $this->reactivateUserSubscriptionWithHttpInfo($user_id, $inventory_id, $reactivate_subscription_request);
        return $response;
    }

    /**
     * Operation reactivateUserSubscriptionWithHttpInfo
     *
     * Reactivate a subscription and charge fee
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\ReactivateSubscriptionRequest $reactivate_subscription_request The reactivate subscription request object inventory (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\InvoiceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function reactivateUserSubscriptionWithHttpInfo($user_id, $inventory_id, $reactivate_subscription_request = null)
    {
        $returnType = '\KnetikCloud\Model\InvoiceResource';
        $request = $this->reactivateUserSubscriptionRequest($user_id, $inventory_id, $reactivate_subscription_request);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\InvoiceResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reactivateUserSubscriptionAsync
     *
     * Reactivate a subscription and charge fee
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\ReactivateSubscriptionRequest $reactivate_subscription_request The reactivate subscription request object inventory (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reactivateUserSubscriptionAsync($user_id, $inventory_id, $reactivate_subscription_request = null)
    {
        return $this->reactivateUserSubscriptionAsyncWithHttpInfo($user_id, $inventory_id, $reactivate_subscription_request)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reactivateUserSubscriptionAsyncWithHttpInfo
     *
     * Reactivate a subscription and charge fee
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\ReactivateSubscriptionRequest $reactivate_subscription_request The reactivate subscription request object inventory (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reactivateUserSubscriptionAsyncWithHttpInfo($user_id, $inventory_id, $reactivate_subscription_request = null)
    {
        $returnType = '\KnetikCloud\Model\InvoiceResource';
        $request = $this->reactivateUserSubscriptionRequest($user_id, $inventory_id, $reactivate_subscription_request);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reactivateUserSubscription'
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\ReactivateSubscriptionRequest $reactivate_subscription_request The reactivate subscription request object inventory (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reactivateUserSubscriptionRequest($user_id, $inventory_id, $reactivate_subscription_request = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling reactivateUserSubscription');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling reactivateUserSubscription');
        }

        $resourcePath = '/users/{user_id}/subscriptions/{inventory_id}/reactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace('{' . 'inventory_id' . '}', ObjectSerializer::toPathValue($inventory_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($reactivate_subscription_request)) {
            $_tempBody = $reactivate_subscription_request;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSubscriptionBillDate
     *
     * Set a new date to bill a subscription on
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $bill_date The new bill date. Unix timestamp in seconds (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSubscriptionBillDate($user_id, $inventory_id, $bill_date)
    {
        $this->setSubscriptionBillDateWithHttpInfo($user_id, $inventory_id, $bill_date);
    }

    /**
     * Operation setSubscriptionBillDateWithHttpInfo
     *
     * Set a new date to bill a subscription on
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $bill_date The new bill date. Unix timestamp in seconds (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSubscriptionBillDateWithHttpInfo($user_id, $inventory_id, $bill_date)
    {
        $returnType = '';
        $request = $this->setSubscriptionBillDateRequest($user_id, $inventory_id, $bill_date);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSubscriptionBillDateAsync
     *
     * Set a new date to bill a subscription on
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $bill_date The new bill date. Unix timestamp in seconds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSubscriptionBillDateAsync($user_id, $inventory_id, $bill_date)
    {
        return $this->setSubscriptionBillDateAsyncWithHttpInfo($user_id, $inventory_id, $bill_date)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation setSubscriptionBillDateAsyncWithHttpInfo
     *
     * Set a new date to bill a subscription on
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $bill_date The new bill date. Unix timestamp in seconds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSubscriptionBillDateAsyncWithHttpInfo($user_id, $inventory_id, $bill_date)
    {
        $returnType = '';
        $request = $this->setSubscriptionBillDateRequest($user_id, $inventory_id, $bill_date);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'setSubscriptionBillDate'
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param int $bill_date The new bill date. Unix timestamp in seconds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSubscriptionBillDateRequest($user_id, $inventory_id, $bill_date)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setSubscriptionBillDate');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setSubscriptionBillDate');
        }
        // verify the required parameter 'bill_date' is set
        if ($bill_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bill_date when calling setSubscriptionBillDate');
        }

        $resourcePath = '/users/{user_id}/subscriptions/{inventory_id}/bill-date';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace('{' . 'inventory_id' . '}', ObjectSerializer::toPathValue($inventory_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($bill_date)) {
            $_tempBody = $bill_date;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSubscriptionPaymentMethod
     *
     * Set the payment method to use for a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\IntWrapper $payment_method_id The id of the payment method (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSubscriptionPaymentMethod($user_id, $inventory_id, $payment_method_id = null)
    {
        $this->setSubscriptionPaymentMethodWithHttpInfo($user_id, $inventory_id, $payment_method_id);
    }

    /**
     * Operation setSubscriptionPaymentMethodWithHttpInfo
     *
     * Set the payment method to use for a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\IntWrapper $payment_method_id The id of the payment method (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSubscriptionPaymentMethodWithHttpInfo($user_id, $inventory_id, $payment_method_id = null)
    {
        $returnType = '';
        $request = $this->setSubscriptionPaymentMethodRequest($user_id, $inventory_id, $payment_method_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSubscriptionPaymentMethodAsync
     *
     * Set the payment method to use for a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\IntWrapper $payment_method_id The id of the payment method (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSubscriptionPaymentMethodAsync($user_id, $inventory_id, $payment_method_id = null)
    {
        return $this->setSubscriptionPaymentMethodAsyncWithHttpInfo($user_id, $inventory_id, $payment_method_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation setSubscriptionPaymentMethodAsyncWithHttpInfo
     *
     * Set the payment method to use for a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\IntWrapper $payment_method_id The id of the payment method (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSubscriptionPaymentMethodAsyncWithHttpInfo($user_id, $inventory_id, $payment_method_id = null)
    {
        $returnType = '';
        $request = $this->setSubscriptionPaymentMethodRequest($user_id, $inventory_id, $payment_method_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'setSubscriptionPaymentMethod'
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\IntWrapper $payment_method_id The id of the payment method (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSubscriptionPaymentMethodRequest($user_id, $inventory_id, $payment_method_id = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setSubscriptionPaymentMethod');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setSubscriptionPaymentMethod');
        }

        $resourcePath = '/users/{user_id}/subscriptions/{inventory_id}/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace('{' . 'inventory_id' . '}', ObjectSerializer::toPathValue($inventory_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($payment_method_id)) {
            $_tempBody = $payment_method_id;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSubscriptionStatus
     *
     * Set the status of a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSubscriptionStatus($user_id, $inventory_id, $status)
    {
        $this->setSubscriptionStatusWithHttpInfo($user_id, $inventory_id, $status);
    }

    /**
     * Operation setSubscriptionStatusWithHttpInfo
     *
     * Set the status of a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSubscriptionStatusWithHttpInfo($user_id, $inventory_id, $status)
    {
        $returnType = '';
        $request = $this->setSubscriptionStatusRequest($user_id, $inventory_id, $status);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSubscriptionStatusAsync
     *
     * Set the status of a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSubscriptionStatusAsync($user_id, $inventory_id, $status)
    {
        return $this->setSubscriptionStatusAsyncWithHttpInfo($user_id, $inventory_id, $status)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation setSubscriptionStatusAsyncWithHttpInfo
     *
     * Set the status of a subscription
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSubscriptionStatusAsyncWithHttpInfo($user_id, $inventory_id, $status)
    {
        $returnType = '';
        $request = $this->setSubscriptionStatusRequest($user_id, $inventory_id, $status);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'setSubscriptionStatus'
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSubscriptionStatusRequest($user_id, $inventory_id, $status)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setSubscriptionStatus');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setSubscriptionStatus');
        }
        // verify the required parameter 'status' is set
        if ($status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling setSubscriptionStatus');
        }

        $resourcePath = '/users/{user_id}/subscriptions/{inventory_id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace('{' . 'inventory_id' . '}', ObjectSerializer::toPathValue($inventory_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($status)) {
            $_tempBody = $status;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setUserSubscriptionPlan
     *
     * Set a new subscription plan for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $plan_id The id of the new plan. Must be from the same subscription (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setUserSubscriptionPlan($user_id, $inventory_id, $plan_id = null)
    {
        $this->setUserSubscriptionPlanWithHttpInfo($user_id, $inventory_id, $plan_id);
    }

    /**
     * Operation setUserSubscriptionPlanWithHttpInfo
     *
     * Set a new subscription plan for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $plan_id The id of the new plan. Must be from the same subscription (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserSubscriptionPlanWithHttpInfo($user_id, $inventory_id, $plan_id = null)
    {
        $returnType = '';
        $request = $this->setUserSubscriptionPlanRequest($user_id, $inventory_id, $plan_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setUserSubscriptionPlanAsync
     *
     * Set a new subscription plan for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $plan_id The id of the new plan. Must be from the same subscription (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserSubscriptionPlanAsync($user_id, $inventory_id, $plan_id = null)
    {
        return $this->setUserSubscriptionPlanAsyncWithHttpInfo($user_id, $inventory_id, $plan_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation setUserSubscriptionPlanAsyncWithHttpInfo
     *
     * Set a new subscription plan for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $plan_id The id of the new plan. Must be from the same subscription (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserSubscriptionPlanAsyncWithHttpInfo($user_id, $inventory_id, $plan_id = null)
    {
        $returnType = '';
        $request = $this->setUserSubscriptionPlanRequest($user_id, $inventory_id, $plan_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'setUserSubscriptionPlan'
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\StringWrapper $plan_id The id of the new plan. Must be from the same subscription (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setUserSubscriptionPlanRequest($user_id, $inventory_id, $plan_id = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setUserSubscriptionPlan');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setUserSubscriptionPlan');
        }

        $resourcePath = '/users/{user_id}/subscriptions/{inventory_id}/plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace('{' . 'inventory_id' . '}', ObjectSerializer::toPathValue($inventory_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($plan_id)) {
            $_tempBody = $plan_id;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setUserSubscriptionPrice
     *
     * Set a new subscription price for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\SubscriptionPriceOverrideRequest $the_override_details override (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setUserSubscriptionPrice($user_id, $inventory_id, $the_override_details = null)
    {
        $this->setUserSubscriptionPriceWithHttpInfo($user_id, $inventory_id, $the_override_details);
    }

    /**
     * Operation setUserSubscriptionPriceWithHttpInfo
     *
     * Set a new subscription price for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\SubscriptionPriceOverrideRequest $the_override_details override (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserSubscriptionPriceWithHttpInfo($user_id, $inventory_id, $the_override_details = null)
    {
        $returnType = '';
        $request = $this->setUserSubscriptionPriceRequest($user_id, $inventory_id, $the_override_details);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setUserSubscriptionPriceAsync
     *
     * Set a new subscription price for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\SubscriptionPriceOverrideRequest $the_override_details override (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserSubscriptionPriceAsync($user_id, $inventory_id, $the_override_details = null)
    {
        return $this->setUserSubscriptionPriceAsyncWithHttpInfo($user_id, $inventory_id, $the_override_details)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation setUserSubscriptionPriceAsyncWithHttpInfo
     *
     * Set a new subscription price for a user
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\SubscriptionPriceOverrideRequest $the_override_details override (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserSubscriptionPriceAsyncWithHttpInfo($user_id, $inventory_id, $the_override_details = null)
    {
        $returnType = '';
        $request = $this->setUserSubscriptionPriceRequest($user_id, $inventory_id, $the_override_details);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'setUserSubscriptionPrice'
     *
     * @param int $user_id The id of the user (required)
     * @param int $inventory_id The id of the user&#39;s inventory (required)
     * @param \KnetikCloud\Model\SubscriptionPriceOverrideRequest $the_override_details override (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setUserSubscriptionPriceRequest($user_id, $inventory_id, $the_override_details = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setUserSubscriptionPrice');
        }
        // verify the required parameter 'inventory_id' is set
        if ($inventory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inventory_id when calling setUserSubscriptionPrice');
        }

        $resourcePath = '/users/{user_id}/subscriptions/{inventory_id}/price-override';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($inventory_id !== null) {
            $resourcePath = str_replace('{' . 'inventory_id' . '}', ObjectSerializer::toPathValue($inventory_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($the_override_details)) {
            $_tempBody = $the_override_details;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

}
