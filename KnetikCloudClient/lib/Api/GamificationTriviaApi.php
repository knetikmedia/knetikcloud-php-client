<?php
/**
 * GamificationTriviaApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use KnetikCloud\ApiException;
use KnetikCloud\Configuration;
use KnetikCloud\HeaderSelector;
use KnetikCloud\ObjectSerializer;

/**
 * GamificationTriviaApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GamificationTriviaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addQuestionAnswers
     *
     * Add an answer to a question
     *
     * @param string $question_id The id of the question (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The new answer (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\AnswerResource
     */
    public function addQuestionAnswers($question_id, $answer = null)
    {
        list($response) = $this->addQuestionAnswersWithHttpInfo($question_id, $answer);
        return $response;
    }

    /**
     * Operation addQuestionAnswersWithHttpInfo
     *
     * Add an answer to a question
     *
     * @param string $question_id The id of the question (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The new answer (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\AnswerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function addQuestionAnswersWithHttpInfo($question_id, $answer = null)
    {
        $returnType = '\KnetikCloud\Model\AnswerResource';
        $request = $this->addQuestionAnswersRequest($question_id, $answer);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\AnswerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addQuestionAnswersAsync
     *
     * Add an answer to a question
     *
     * @param string $question_id The id of the question (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The new answer (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addQuestionAnswersAsync($question_id, $answer = null)
    {
        return $this->addQuestionAnswersAsyncWithHttpInfo($question_id, $answer)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addQuestionAnswersAsyncWithHttpInfo
     *
     * Add an answer to a question
     *
     * @param string $question_id The id of the question (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The new answer (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addQuestionAnswersAsyncWithHttpInfo($question_id, $answer = null)
    {
        $returnType = '\KnetikCloud\Model\AnswerResource';
        $request = $this->addQuestionAnswersRequest($question_id, $answer);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'addQuestionAnswers'
     *
     * @param string $question_id The id of the question (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The new answer (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addQuestionAnswersRequest($question_id, $answer = null)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling addQuestionAnswers');
        }

        $resourcePath = '/trivia/questions/{question_id}/answers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace('{' . 'question_id' . '}', ObjectSerializer::toPathValue($question_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($answer)) {
            $_tempBody = $answer;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addQuestionTag
     *
     * Add a tag to a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\StringWrapper $tag The new tag (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addQuestionTag($id, $tag = null)
    {
        $this->addQuestionTagWithHttpInfo($id, $tag);
    }

    /**
     * Operation addQuestionTagWithHttpInfo
     *
     * Add a tag to a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\StringWrapper $tag The new tag (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addQuestionTagWithHttpInfo($id, $tag = null)
    {
        $returnType = '';
        $request = $this->addQuestionTagRequest($id, $tag);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addQuestionTagAsync
     *
     * Add a tag to a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\StringWrapper $tag The new tag (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addQuestionTagAsync($id, $tag = null)
    {
        return $this->addQuestionTagAsyncWithHttpInfo($id, $tag)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addQuestionTagAsyncWithHttpInfo
     *
     * Add a tag to a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\StringWrapper $tag The new tag (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addQuestionTagAsyncWithHttpInfo($id, $tag = null)
    {
        $returnType = '';
        $request = $this->addQuestionTagRequest($id, $tag);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'addQuestionTag'
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\StringWrapper $tag The new tag (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addQuestionTagRequest($id, $tag = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addQuestionTag');
        }

        $resourcePath = '/trivia/questions/{id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($tag)) {
            $_tempBody = $tag;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTagToQuestionsBatch
     *
     * Add a tag to a batch of questions
     *
     * @param \KnetikCloud\Model\StringWrapper $tag The tag to add (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function addTagToQuestionsBatch($tag = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        list($response) = $this->addTagToQuestionsBatchWithHttpInfo($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id);
        return $response;
    }

    /**
     * Operation addTagToQuestionsBatchWithHttpInfo
     *
     * Add a tag to a batch of questions
     *
     * @param \KnetikCloud\Model\StringWrapper $tag The tag to add (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTagToQuestionsBatchWithHttpInfo($tag = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        $returnType = 'int';
        $request = $this->addTagToQuestionsBatchRequest($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addTagToQuestionsBatchAsync
     *
     * Add a tag to a batch of questions
     *
     * @param \KnetikCloud\Model\StringWrapper $tag The tag to add (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTagToQuestionsBatchAsync($tag = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        return $this->addTagToQuestionsBatchAsyncWithHttpInfo($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addTagToQuestionsBatchAsyncWithHttpInfo
     *
     * Add a tag to a batch of questions
     *
     * @param \KnetikCloud\Model\StringWrapper $tag The tag to add (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTagToQuestionsBatchAsyncWithHttpInfo($tag = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        $returnType = 'int';
        $request = $this->addTagToQuestionsBatchRequest($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'addTagToQuestionsBatch'
     *
     * @param \KnetikCloud\Model\StringWrapper $tag The tag to add (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addTagToQuestionsBatchRequest($tag = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {

        $resourcePath = '/trivia/questions/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = ObjectSerializer::toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = ObjectSerializer::toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = ObjectSerializer::toQueryValue($filter_category);
        }
        // query params
        if ($filter_tag !== null) {
            $queryParams['filter_tag'] = ObjectSerializer::toQueryValue($filter_tag);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = ObjectSerializer::toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = ObjectSerializer::toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = ObjectSerializer::toQueryValue($filter_published);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = ObjectSerializer::toQueryValue($filter_import_id);
        }


        // body params
        $_tempBody = null;
        if (isset($tag)) {
            $_tempBody = $tag;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createImportJob
     *
     * Create an import job
     *
     * @param \KnetikCloud\Model\ImportJobResource $request The new import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\ImportJobResource
     */
    public function createImportJob($request = null)
    {
        list($response) = $this->createImportJobWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation createImportJobWithHttpInfo
     *
     * Create an import job
     *
     * @param \KnetikCloud\Model\ImportJobResource $request The new import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\ImportJobResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createImportJobWithHttpInfo($request = null)
    {
        $returnType = '\KnetikCloud\Model\ImportJobResource';
        $request = $this->createImportJobRequest($request);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\ImportJobResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createImportJobAsync
     *
     * Create an import job
     *
     * @param \KnetikCloud\Model\ImportJobResource $request The new import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createImportJobAsync($request = null)
    {
        return $this->createImportJobAsyncWithHttpInfo($request)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createImportJobAsyncWithHttpInfo
     *
     * Create an import job
     *
     * @param \KnetikCloud\Model\ImportJobResource $request The new import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createImportJobAsyncWithHttpInfo($request = null)
    {
        $returnType = '\KnetikCloud\Model\ImportJobResource';
        $request = $this->createImportJobRequest($request);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createImportJob'
     *
     * @param \KnetikCloud\Model\ImportJobResource $request The new import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createImportJobRequest($request = null)
    {

        $resourcePath = '/trivia/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createQuestion
     *
     * Create a question
     *
     * @param \KnetikCloud\Model\QuestionResource $question The new question (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\QuestionResource
     */
    public function createQuestion($question = null)
    {
        list($response) = $this->createQuestionWithHttpInfo($question);
        return $response;
    }

    /**
     * Operation createQuestionWithHttpInfo
     *
     * Create a question
     *
     * @param \KnetikCloud\Model\QuestionResource $question The new question (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\QuestionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createQuestionWithHttpInfo($question = null)
    {
        $returnType = '\KnetikCloud\Model\QuestionResource';
        $request = $this->createQuestionRequest($question);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createQuestionAsync
     *
     * Create a question
     *
     * @param \KnetikCloud\Model\QuestionResource $question The new question (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createQuestionAsync($question = null)
    {
        return $this->createQuestionAsyncWithHttpInfo($question)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createQuestionAsyncWithHttpInfo
     *
     * Create a question
     *
     * @param \KnetikCloud\Model\QuestionResource $question The new question (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createQuestionAsyncWithHttpInfo($question = null)
    {
        $returnType = '\KnetikCloud\Model\QuestionResource';
        $request = $this->createQuestionRequest($question);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createQuestion'
     *
     * @param \KnetikCloud\Model\QuestionResource $question The new question (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createQuestionRequest($question = null)
    {

        $resourcePath = '/trivia/questions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($question)) {
            $_tempBody = $question;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createQuestionTemplate
     *
     * Create a question template
     *
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\QuestionTemplateResource
     */
    public function createQuestionTemplate($question_template_resource = null)
    {
        list($response) = $this->createQuestionTemplateWithHttpInfo($question_template_resource);
        return $response;
    }

    /**
     * Operation createQuestionTemplateWithHttpInfo
     *
     * Create a question template
     *
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\QuestionTemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createQuestionTemplateWithHttpInfo($question_template_resource = null)
    {
        $returnType = '\KnetikCloud\Model\QuestionTemplateResource';
        $request = $this->createQuestionTemplateRequest($question_template_resource);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionTemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createQuestionTemplateAsync
     *
     * Create a question template
     *
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createQuestionTemplateAsync($question_template_resource = null)
    {
        return $this->createQuestionTemplateAsyncWithHttpInfo($question_template_resource)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createQuestionTemplateAsyncWithHttpInfo
     *
     * Create a question template
     *
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createQuestionTemplateAsyncWithHttpInfo($question_template_resource = null)
    {
        $returnType = '\KnetikCloud\Model\QuestionTemplateResource';
        $request = $this->createQuestionTemplateRequest($question_template_resource);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createQuestionTemplate'
     *
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createQuestionTemplateRequest($question_template_resource = null)
    {

        $resourcePath = '/trivia/questions/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($question_template_resource)) {
            $_tempBody = $question_template_resource;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteImportJob
     *
     * Delete an import job
     *
     * @param int $id The id of the job (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteImportJob($id)
    {
        $this->deleteImportJobWithHttpInfo($id);
    }

    /**
     * Operation deleteImportJobWithHttpInfo
     *
     * Delete an import job
     *
     * @param int $id The id of the job (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteImportJobWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteImportJobRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteImportJobAsync
     *
     * Delete an import job
     *
     * @param int $id The id of the job (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteImportJobAsync($id)
    {
        return $this->deleteImportJobAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteImportJobAsyncWithHttpInfo
     *
     * Delete an import job
     *
     * @param int $id The id of the job (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteImportJobAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteImportJobRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteImportJob'
     *
     * @param int $id The id of the job (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteImportJobRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteImportJob');
        }

        $resourcePath = '/trivia/import/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQuestion
     *
     * Delete a question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQuestion($id)
    {
        $this->deleteQuestionWithHttpInfo($id);
    }

    /**
     * Operation deleteQuestionWithHttpInfo
     *
     * Delete a question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuestionWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteQuestionRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQuestionAsync
     *
     * Delete a question
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQuestionAsync($id)
    {
        return $this->deleteQuestionAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteQuestionAsyncWithHttpInfo
     *
     * Delete a question
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQuestionAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteQuestionRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteQuestion'
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQuestionRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteQuestion');
        }

        $resourcePath = '/trivia/questions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQuestionAnswers
     *
     * Remove an answer from a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQuestionAnswers($question_id, $id)
    {
        $this->deleteQuestionAnswersWithHttpInfo($question_id, $id);
    }

    /**
     * Operation deleteQuestionAnswersWithHttpInfo
     *
     * Remove an answer from a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuestionAnswersWithHttpInfo($question_id, $id)
    {
        $returnType = '';
        $request = $this->deleteQuestionAnswersRequest($question_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQuestionAnswersAsync
     *
     * Remove an answer from a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQuestionAnswersAsync($question_id, $id)
    {
        return $this->deleteQuestionAnswersAsyncWithHttpInfo($question_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteQuestionAnswersAsyncWithHttpInfo
     *
     * Remove an answer from a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQuestionAnswersAsyncWithHttpInfo($question_id, $id)
    {
        $returnType = '';
        $request = $this->deleteQuestionAnswersRequest($question_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteQuestionAnswers'
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQuestionAnswersRequest($question_id, $id)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling deleteQuestionAnswers');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteQuestionAnswers');
        }

        $resourcePath = '/trivia/questions/{question_id}/answers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace('{' . 'question_id' . '}', ObjectSerializer::toPathValue($question_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQuestionTemplate
     *
     * Delete a question template
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQuestionTemplate($id, $cascade = null)
    {
        $this->deleteQuestionTemplateWithHttpInfo($id, $cascade);
    }

    /**
     * Operation deleteQuestionTemplateWithHttpInfo
     *
     * Delete a question template
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuestionTemplateWithHttpInfo($id, $cascade = null)
    {
        $returnType = '';
        $request = $this->deleteQuestionTemplateRequest($id, $cascade);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQuestionTemplateAsync
     *
     * Delete a question template
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQuestionTemplateAsync($id, $cascade = null)
    {
        return $this->deleteQuestionTemplateAsyncWithHttpInfo($id, $cascade)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteQuestionTemplateAsyncWithHttpInfo
     *
     * Delete a question template
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQuestionTemplateAsyncWithHttpInfo($id, $cascade = null)
    {
        $returnType = '';
        $request = $this->deleteQuestionTemplateRequest($id, $cascade);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteQuestionTemplate'
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQuestionTemplateRequest($id, $cascade = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteQuestionTemplate');
        }

        $resourcePath = '/trivia/questions/templates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cascade !== null) {
            $queryParams['cascade'] = ObjectSerializer::toQueryValue($cascade);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getImportJob
     *
     * Get an import job
     *
     * @param int $id The id of the job (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\ImportJobResource
     */
    public function getImportJob($id)
    {
        list($response) = $this->getImportJobWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getImportJobWithHttpInfo
     *
     * Get an import job
     *
     * @param int $id The id of the job (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\ImportJobResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportJobWithHttpInfo($id)
    {
        $returnType = '\KnetikCloud\Model\ImportJobResource';
        $request = $this->getImportJobRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\ImportJobResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImportJobAsync
     *
     * Get an import job
     *
     * @param int $id The id of the job (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportJobAsync($id)
    {
        return $this->getImportJobAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getImportJobAsyncWithHttpInfo
     *
     * Get an import job
     *
     * @param int $id The id of the job (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportJobAsyncWithHttpInfo($id)
    {
        $returnType = '\KnetikCloud\Model\ImportJobResource';
        $request = $this->getImportJobRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getImportJob'
     *
     * @param int $id The id of the job (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getImportJobRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getImportJob');
        }

        $resourcePath = '/trivia/import/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getImportJobs
     *
     * Get a list of import job
     *
     * @param string $filter_vendor Filter for jobs by vendor id (optional)
     * @param string $filter_category Filter for jobs by category id (optional)
     * @param string $filter_name Filter for jobs which name *STARTS* with the given string (optional)
     * @param string $filter_status Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceImportJobResource_
     */
    public function getImportJobs($filter_vendor = null, $filter_category = null, $filter_name = null, $filter_status = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        list($response) = $this->getImportJobsWithHttpInfo($filter_vendor, $filter_category, $filter_name, $filter_status, $size, $page, $order);
        return $response;
    }

    /**
     * Operation getImportJobsWithHttpInfo
     *
     * Get a list of import job
     *
     * @param string $filter_vendor Filter for jobs by vendor id (optional)
     * @param string $filter_category Filter for jobs by category id (optional)
     * @param string $filter_name Filter for jobs which name *STARTS* with the given string (optional)
     * @param string $filter_status Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceImportJobResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportJobsWithHttpInfo($filter_vendor = null, $filter_category = null, $filter_name = null, $filter_status = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceImportJobResource_';
        $request = $this->getImportJobsRequest($filter_vendor, $filter_category, $filter_name, $filter_status, $size, $page, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceImportJobResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImportJobsAsync
     *
     * Get a list of import job
     *
     * @param string $filter_vendor Filter for jobs by vendor id (optional)
     * @param string $filter_category Filter for jobs by category id (optional)
     * @param string $filter_name Filter for jobs which name *STARTS* with the given string (optional)
     * @param string $filter_status Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportJobsAsync($filter_vendor = null, $filter_category = null, $filter_name = null, $filter_status = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        return $this->getImportJobsAsyncWithHttpInfo($filter_vendor, $filter_category, $filter_name, $filter_status, $size, $page, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getImportJobsAsyncWithHttpInfo
     *
     * Get a list of import job
     *
     * @param string $filter_vendor Filter for jobs by vendor id (optional)
     * @param string $filter_category Filter for jobs by category id (optional)
     * @param string $filter_name Filter for jobs which name *STARTS* with the given string (optional)
     * @param string $filter_status Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportJobsAsyncWithHttpInfo($filter_vendor = null, $filter_category = null, $filter_name = null, $filter_status = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceImportJobResource_';
        $request = $this->getImportJobsRequest($filter_vendor, $filter_category, $filter_name, $filter_status, $size, $page, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getImportJobs'
     *
     * @param string $filter_vendor Filter for jobs by vendor id (optional)
     * @param string $filter_category Filter for jobs by category id (optional)
     * @param string $filter_name Filter for jobs which name *STARTS* with the given string (optional)
     * @param string $filter_status Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getImportJobsRequest($filter_vendor = null, $filter_category = null, $filter_name = null, $filter_status = null, $size = '25', $page = '1', $order = 'id:ASC')
    {

        $resourcePath = '/trivia/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_vendor !== null) {
            $queryParams['filter_vendor'] = ObjectSerializer::toQueryValue($filter_vendor);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = ObjectSerializer::toQueryValue($filter_category);
        }
        // query params
        if ($filter_name !== null) {
            $queryParams['filter_name'] = ObjectSerializer::toQueryValue($filter_name);
        }
        // query params
        if ($filter_status !== null) {
            $queryParams['filter_status'] = ObjectSerializer::toQueryValue($filter_status);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestion
     *
     * Get a single question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\QuestionResource
     */
    public function getQuestion($id)
    {
        list($response) = $this->getQuestionWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQuestionWithHttpInfo
     *
     * Get a single question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\QuestionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionWithHttpInfo($id)
    {
        $returnType = '\KnetikCloud\Model\QuestionResource';
        $request = $this->getQuestionRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionAsync
     *
     * Get a single question
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionAsync($id)
    {
        return $this->getQuestionAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionAsyncWithHttpInfo
     *
     * Get a single question
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionAsyncWithHttpInfo($id)
    {
        $returnType = '\KnetikCloud\Model\QuestionResource';
        $request = $this->getQuestionRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestion'
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getQuestion');
        }

        $resourcePath = '/trivia/questions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestionAnswer
     *
     * Get an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\AnswerResource
     */
    public function getQuestionAnswer($question_id, $id)
    {
        list($response) = $this->getQuestionAnswerWithHttpInfo($question_id, $id);
        return $response;
    }

    /**
     * Operation getQuestionAnswerWithHttpInfo
     *
     * Get an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\AnswerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionAnswerWithHttpInfo($question_id, $id)
    {
        $returnType = '\KnetikCloud\Model\AnswerResource';
        $request = $this->getQuestionAnswerRequest($question_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\AnswerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionAnswerAsync
     *
     * Get an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionAnswerAsync($question_id, $id)
    {
        return $this->getQuestionAnswerAsyncWithHttpInfo($question_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionAnswerAsyncWithHttpInfo
     *
     * Get an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionAnswerAsyncWithHttpInfo($question_id, $id)
    {
        $returnType = '\KnetikCloud\Model\AnswerResource';
        $request = $this->getQuestionAnswerRequest($question_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestionAnswer'
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionAnswerRequest($question_id, $id)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling getQuestionAnswer');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getQuestionAnswer');
        }

        $resourcePath = '/trivia/questions/{question_id}/answers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace('{' . 'question_id' . '}', ObjectSerializer::toPathValue($question_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestionAnswers
     *
     * List the answers available for a question
     *
     * @param string $question_id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\AnswerResource[]
     */
    public function getQuestionAnswers($question_id)
    {
        list($response) = $this->getQuestionAnswersWithHttpInfo($question_id);
        return $response;
    }

    /**
     * Operation getQuestionAnswersWithHttpInfo
     *
     * List the answers available for a question
     *
     * @param string $question_id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\AnswerResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionAnswersWithHttpInfo($question_id)
    {
        $returnType = '\KnetikCloud\Model\AnswerResource[]';
        $request = $this->getQuestionAnswersRequest($question_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\AnswerResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionAnswersAsync
     *
     * List the answers available for a question
     *
     * @param string $question_id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionAnswersAsync($question_id)
    {
        return $this->getQuestionAnswersAsyncWithHttpInfo($question_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionAnswersAsyncWithHttpInfo
     *
     * List the answers available for a question
     *
     * @param string $question_id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionAnswersAsyncWithHttpInfo($question_id)
    {
        $returnType = '\KnetikCloud\Model\AnswerResource[]';
        $request = $this->getQuestionAnswersRequest($question_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestionAnswers'
     *
     * @param string $question_id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionAnswersRequest($question_id)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling getQuestionAnswers');
        }

        $resourcePath = '/trivia/questions/{question_id}/answers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace('{' . 'question_id' . '}', ObjectSerializer::toPathValue($question_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestionDeltas
     *
     * List question deltas in ascending order of updated date
     *
     * @param int $since Timestamp in seconds (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\DeltaResource[]
     */
    public function getQuestionDeltas($since = null)
    {
        list($response) = $this->getQuestionDeltasWithHttpInfo($since);
        return $response;
    }

    /**
     * Operation getQuestionDeltasWithHttpInfo
     *
     * List question deltas in ascending order of updated date
     *
     * @param int $since Timestamp in seconds (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\DeltaResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionDeltasWithHttpInfo($since = null)
    {
        $returnType = '\KnetikCloud\Model\DeltaResource[]';
        $request = $this->getQuestionDeltasRequest($since);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\DeltaResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionDeltasAsync
     *
     * List question deltas in ascending order of updated date
     *
     * @param int $since Timestamp in seconds (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionDeltasAsync($since = null)
    {
        return $this->getQuestionDeltasAsyncWithHttpInfo($since)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionDeltasAsyncWithHttpInfo
     *
     * List question deltas in ascending order of updated date
     *
     * @param int $since Timestamp in seconds (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionDeltasAsyncWithHttpInfo($since = null)
    {
        $returnType = '\KnetikCloud\Model\DeltaResource[]';
        $request = $this->getQuestionDeltasRequest($since);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestionDeltas'
     *
     * @param int $since Timestamp in seconds (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionDeltasRequest($since = null)
    {

        $resourcePath = '/trivia/questions/delta';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestionTags
     *
     * List the tags for a question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getQuestionTags($id)
    {
        list($response) = $this->getQuestionTagsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQuestionTagsWithHttpInfo
     *
     * List the tags for a question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionTagsWithHttpInfo($id)
    {
        $returnType = 'string[]';
        $request = $this->getQuestionTagsRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionTagsAsync
     *
     * List the tags for a question
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionTagsAsync($id)
    {
        return $this->getQuestionTagsAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionTagsAsyncWithHttpInfo
     *
     * List the tags for a question
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionTagsAsyncWithHttpInfo($id)
    {
        $returnType = 'string[]';
        $request = $this->getQuestionTagsRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestionTags'
     *
     * @param string $id The id of the question (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionTagsRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getQuestionTags');
        }

        $resourcePath = '/trivia/questions/{id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestionTemplate
     *
     * Get a single question template
     *
     * @param string $id The id of the template (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\QuestionTemplateResource
     */
    public function getQuestionTemplate($id)
    {
        list($response) = $this->getQuestionTemplateWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQuestionTemplateWithHttpInfo
     *
     * Get a single question template
     *
     * @param string $id The id of the template (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\QuestionTemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionTemplateWithHttpInfo($id)
    {
        $returnType = '\KnetikCloud\Model\QuestionTemplateResource';
        $request = $this->getQuestionTemplateRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionTemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionTemplateAsync
     *
     * Get a single question template
     *
     * @param string $id The id of the template (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionTemplateAsync($id)
    {
        return $this->getQuestionTemplateAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionTemplateAsyncWithHttpInfo
     *
     * Get a single question template
     *
     * @param string $id The id of the template (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionTemplateAsyncWithHttpInfo($id)
    {
        $returnType = '\KnetikCloud\Model\QuestionTemplateResource';
        $request = $this->getQuestionTemplateRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestionTemplate'
     *
     * @param string $id The id of the template (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionTemplateRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getQuestionTemplate');
        }

        $resourcePath = '/trivia/questions/templates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestionTemplates
     *
     * List and search question templates
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceQuestionTemplateResource_
     */
    public function getQuestionTemplates($size = '25', $page = '1', $order = 'id:ASC')
    {
        list($response) = $this->getQuestionTemplatesWithHttpInfo($size, $page, $order);
        return $response;
    }

    /**
     * Operation getQuestionTemplatesWithHttpInfo
     *
     * List and search question templates
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceQuestionTemplateResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionTemplatesWithHttpInfo($size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceQuestionTemplateResource_';
        $request = $this->getQuestionTemplatesRequest($size, $page, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceQuestionTemplateResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionTemplatesAsync
     *
     * List and search question templates
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionTemplatesAsync($size = '25', $page = '1', $order = 'id:ASC')
    {
        return $this->getQuestionTemplatesAsyncWithHttpInfo($size, $page, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionTemplatesAsyncWithHttpInfo
     *
     * List and search question templates
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionTemplatesAsyncWithHttpInfo($size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceQuestionTemplateResource_';
        $request = $this->getQuestionTemplatesRequest($size, $page, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestionTemplates'
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionTemplatesRequest($size = '25', $page = '1', $order = 'id:ASC')
    {

        $resourcePath = '/trivia/questions/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestions
     *
     * List and search questions
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceQuestionResource_
     */
    public function getQuestions($size = '25', $page = '1', $order = 'id:ASC', $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_tag = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        list($response) = $this->getQuestionsWithHttpInfo($size, $page, $order, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_tag, $filter_type, $filter_published, $filter_import_id);
        return $response;
    }

    /**
     * Operation getQuestionsWithHttpInfo
     *
     * List and search questions
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceQuestionResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionsWithHttpInfo($size = '25', $page = '1', $order = 'id:ASC', $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_tag = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        $returnType = '\KnetikCloud\Model\PageResourceQuestionResource_';
        $request = $this->getQuestionsRequest($size, $page, $order, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_tag, $filter_type, $filter_published, $filter_import_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceQuestionResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionsAsync
     *
     * List and search questions
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionsAsync($size = '25', $page = '1', $order = 'id:ASC', $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_tag = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        return $this->getQuestionsAsyncWithHttpInfo($size, $page, $order, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_tag, $filter_type, $filter_published, $filter_import_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionsAsyncWithHttpInfo
     *
     * List and search questions
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionsAsyncWithHttpInfo($size = '25', $page = '1', $order = 'id:ASC', $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_tag = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        $returnType = '\KnetikCloud\Model\PageResourceQuestionResource_';
        $request = $this->getQuestionsRequest($size, $page, $order, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_tag, $filter_type, $filter_published, $filter_import_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestions'
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionsRequest($size = '25', $page = '1', $order = 'id:ASC', $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_tag = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {

        $resourcePath = '/trivia/questions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = ObjectSerializer::toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = ObjectSerializer::toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = ObjectSerializer::toQueryValue($filter_category);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = ObjectSerializer::toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_tag !== null) {
            $queryParams['filter_tag'] = ObjectSerializer::toQueryValue($filter_tag);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = ObjectSerializer::toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = ObjectSerializer::toQueryValue($filter_published);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = ObjectSerializer::toQueryValue($filter_import_id);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuestionsCount
     *
     * Count questions based on filters
     *
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function getQuestionsCount($filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null)
    {
        list($response) = $this->getQuestionsCountWithHttpInfo($filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published);
        return $response;
    }

    /**
     * Operation getQuestionsCountWithHttpInfo
     *
     * Count questions based on filters
     *
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionsCountWithHttpInfo($filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null)
    {
        $returnType = 'int';
        $request = $this->getQuestionsCountRequest($filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuestionsCountAsync
     *
     * Count questions based on filters
     *
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionsCountAsync($filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null)
    {
        return $this->getQuestionsCountAsyncWithHttpInfo($filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getQuestionsCountAsyncWithHttpInfo
     *
     * Count questions based on filters
     *
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuestionsCountAsyncWithHttpInfo($filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null)
    {
        $returnType = 'int';
        $request = $this->getQuestionsCountRequest($filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getQuestionsCount'
     *
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuestionsCountRequest($filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null)
    {

        $resourcePath = '/trivia/questions/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = ObjectSerializer::toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = ObjectSerializer::toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = ObjectSerializer::toQueryValue($filter_category);
        }
        // query params
        if ($filter_tag !== null) {
            $queryParams['filter_tag'] = ObjectSerializer::toQueryValue($filter_tag);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = ObjectSerializer::toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = ObjectSerializer::toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = ObjectSerializer::toQueryValue($filter_published);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processImportJob
     *
     * Start processing an import job
     *
     * @param int $id The id of the job (required)
     * @param bool $publish_now Whether the new questions should be published live immediately (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\ImportJobResource
     */
    public function processImportJob($id, $publish_now)
    {
        list($response) = $this->processImportJobWithHttpInfo($id, $publish_now);
        return $response;
    }

    /**
     * Operation processImportJobWithHttpInfo
     *
     * Start processing an import job
     *
     * @param int $id The id of the job (required)
     * @param bool $publish_now Whether the new questions should be published live immediately (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\ImportJobResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function processImportJobWithHttpInfo($id, $publish_now)
    {
        $returnType = '\KnetikCloud\Model\ImportJobResource';
        $request = $this->processImportJobRequest($id, $publish_now);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\ImportJobResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processImportJobAsync
     *
     * Start processing an import job
     *
     * @param int $id The id of the job (required)
     * @param bool $publish_now Whether the new questions should be published live immediately (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processImportJobAsync($id, $publish_now)
    {
        return $this->processImportJobAsyncWithHttpInfo($id, $publish_now)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation processImportJobAsyncWithHttpInfo
     *
     * Start processing an import job
     *
     * @param int $id The id of the job (required)
     * @param bool $publish_now Whether the new questions should be published live immediately (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processImportJobAsyncWithHttpInfo($id, $publish_now)
    {
        $returnType = '\KnetikCloud\Model\ImportJobResource';
        $request = $this->processImportJobRequest($id, $publish_now);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'processImportJob'
     *
     * @param int $id The id of the job (required)
     * @param bool $publish_now Whether the new questions should be published live immediately (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function processImportJobRequest($id, $publish_now)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling processImportJob');
        }
        // verify the required parameter 'publish_now' is set
        if ($publish_now === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publish_now when calling processImportJob');
        }

        $resourcePath = '/trivia/import/{id}/process';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($publish_now !== null) {
            $queryParams['publish_now'] = ObjectSerializer::toQueryValue($publish_now);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeQuestionTag
     *
     * Remove a tag from a question
     *
     * @param string $id The id of the question (required)
     * @param string $tag The tag to remove (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeQuestionTag($id, $tag)
    {
        $this->removeQuestionTagWithHttpInfo($id, $tag);
    }

    /**
     * Operation removeQuestionTagWithHttpInfo
     *
     * Remove a tag from a question
     *
     * @param string $id The id of the question (required)
     * @param string $tag The tag to remove (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeQuestionTagWithHttpInfo($id, $tag)
    {
        $returnType = '';
        $request = $this->removeQuestionTagRequest($id, $tag);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeQuestionTagAsync
     *
     * Remove a tag from a question
     *
     * @param string $id The id of the question (required)
     * @param string $tag The tag to remove (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeQuestionTagAsync($id, $tag)
    {
        return $this->removeQuestionTagAsyncWithHttpInfo($id, $tag)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeQuestionTagAsyncWithHttpInfo
     *
     * Remove a tag from a question
     *
     * @param string $id The id of the question (required)
     * @param string $tag The tag to remove (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeQuestionTagAsyncWithHttpInfo($id, $tag)
    {
        $returnType = '';
        $request = $this->removeQuestionTagRequest($id, $tag);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'removeQuestionTag'
     *
     * @param string $id The id of the question (required)
     * @param string $tag The tag to remove (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeQuestionTagRequest($id, $tag)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeQuestionTag');
        }
        // verify the required parameter 'tag' is set
        if ($tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag when calling removeQuestionTag');
        }

        $resourcePath = '/trivia/questions/{id}/tags/{tag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($tag !== null) {
            $resourcePath = str_replace('{' . 'tag' . '}', ObjectSerializer::toPathValue($tag), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeTagToQuestionsBatch
     *
     * Remove a tag from a batch of questions
     *
     * @param string $tag The tag to remove (required)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function removeTagToQuestionsBatch($tag, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        list($response) = $this->removeTagToQuestionsBatchWithHttpInfo($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id);
        return $response;
    }

    /**
     * Operation removeTagToQuestionsBatchWithHttpInfo
     *
     * Remove a tag from a batch of questions
     *
     * @param string $tag The tag to remove (required)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTagToQuestionsBatchWithHttpInfo($tag, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        $returnType = 'int';
        $request = $this->removeTagToQuestionsBatchRequest($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeTagToQuestionsBatchAsync
     *
     * Remove a tag from a batch of questions
     *
     * @param string $tag The tag to remove (required)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTagToQuestionsBatchAsync($tag, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        return $this->removeTagToQuestionsBatchAsyncWithHttpInfo($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeTagToQuestionsBatchAsyncWithHttpInfo
     *
     * Remove a tag from a batch of questions
     *
     * @param string $tag The tag to remove (required)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTagToQuestionsBatchAsyncWithHttpInfo($tag, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        $returnType = 'int';
        $request = $this->removeTagToQuestionsBatchRequest($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'removeTagToQuestionsBatch'
     *
     * @param string $tag The tag to remove (required)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeTagToQuestionsBatchRequest($tag, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        // verify the required parameter 'tag' is set
        if ($tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag when calling removeTagToQuestionsBatch');
        }

        $resourcePath = '/trivia/questions/tags/{tag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = ObjectSerializer::toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = ObjectSerializer::toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = ObjectSerializer::toQueryValue($filter_category);
        }
        // query params
        if ($filter_tag !== null) {
            $queryParams['filter_tag'] = ObjectSerializer::toQueryValue($filter_tag);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = ObjectSerializer::toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = ObjectSerializer::toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = ObjectSerializer::toQueryValue($filter_published);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = ObjectSerializer::toQueryValue($filter_import_id);
        }

        // path params
        if ($tag !== null) {
            $resourcePath = str_replace('{' . 'tag' . '}', ObjectSerializer::toPathValue($tag), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchQuestionTags
     *
     * List and search tags by the beginning of the string
     *
     * @param string $filter_search Filter for tags starting with the given text (optional)
     * @param string $filter_category Filter for tags on questions from a specific category (optional)
     * @param int $filter_import_id Filter for tags on questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\CollectionString_
     */
    public function searchQuestionTags($filter_search = null, $filter_category = null, $filter_import_id = null)
    {
        list($response) = $this->searchQuestionTagsWithHttpInfo($filter_search, $filter_category, $filter_import_id);
        return $response;
    }

    /**
     * Operation searchQuestionTagsWithHttpInfo
     *
     * List and search tags by the beginning of the string
     *
     * @param string $filter_search Filter for tags starting with the given text (optional)
     * @param string $filter_category Filter for tags on questions from a specific category (optional)
     * @param int $filter_import_id Filter for tags on questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\CollectionString_, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchQuestionTagsWithHttpInfo($filter_search = null, $filter_category = null, $filter_import_id = null)
    {
        $returnType = '\KnetikCloud\Model\CollectionString_';
        $request = $this->searchQuestionTagsRequest($filter_search, $filter_category, $filter_import_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\CollectionString_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchQuestionTagsAsync
     *
     * List and search tags by the beginning of the string
     *
     * @param string $filter_search Filter for tags starting with the given text (optional)
     * @param string $filter_category Filter for tags on questions from a specific category (optional)
     * @param int $filter_import_id Filter for tags on questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchQuestionTagsAsync($filter_search = null, $filter_category = null, $filter_import_id = null)
    {
        return $this->searchQuestionTagsAsyncWithHttpInfo($filter_search, $filter_category, $filter_import_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation searchQuestionTagsAsyncWithHttpInfo
     *
     * List and search tags by the beginning of the string
     *
     * @param string $filter_search Filter for tags starting with the given text (optional)
     * @param string $filter_category Filter for tags on questions from a specific category (optional)
     * @param int $filter_import_id Filter for tags on questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchQuestionTagsAsyncWithHttpInfo($filter_search = null, $filter_category = null, $filter_import_id = null)
    {
        $returnType = '\KnetikCloud\Model\CollectionString_';
        $request = $this->searchQuestionTagsRequest($filter_search, $filter_category, $filter_import_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'searchQuestionTags'
     *
     * @param string $filter_search Filter for tags starting with the given text (optional)
     * @param string $filter_category Filter for tags on questions from a specific category (optional)
     * @param int $filter_import_id Filter for tags on questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchQuestionTagsRequest($filter_search = null, $filter_category = null, $filter_import_id = null)
    {

        $resourcePath = '/trivia/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = ObjectSerializer::toQueryValue($filter_search);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = ObjectSerializer::toQueryValue($filter_category);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = ObjectSerializer::toQueryValue($filter_import_id);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateImportJob
     *
     * Update an import job
     *
     * @param int $id The id of the job (required)
     * @param \KnetikCloud\Model\ImportJobResource $request The updated job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\ImportJobResource
     */
    public function updateImportJob($id, $request = null)
    {
        list($response) = $this->updateImportJobWithHttpInfo($id, $request);
        return $response;
    }

    /**
     * Operation updateImportJobWithHttpInfo
     *
     * Update an import job
     *
     * @param int $id The id of the job (required)
     * @param \KnetikCloud\Model\ImportJobResource $request The updated job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\ImportJobResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateImportJobWithHttpInfo($id, $request = null)
    {
        $returnType = '\KnetikCloud\Model\ImportJobResource';
        $request = $this->updateImportJobRequest($id, $request);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\ImportJobResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateImportJobAsync
     *
     * Update an import job
     *
     * @param int $id The id of the job (required)
     * @param \KnetikCloud\Model\ImportJobResource $request The updated job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImportJobAsync($id, $request = null)
    {
        return $this->updateImportJobAsyncWithHttpInfo($id, $request)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateImportJobAsyncWithHttpInfo
     *
     * Update an import job
     *
     * @param int $id The id of the job (required)
     * @param \KnetikCloud\Model\ImportJobResource $request The updated job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImportJobAsyncWithHttpInfo($id, $request = null)
    {
        $returnType = '\KnetikCloud\Model\ImportJobResource';
        $request = $this->updateImportJobRequest($id, $request);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateImportJob'
     *
     * @param int $id The id of the job (required)
     * @param \KnetikCloud\Model\ImportJobResource $request The updated job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateImportJobRequest($id, $request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateImportJob');
        }

        $resourcePath = '/trivia/import/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateQuestion
     *
     * Update a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\QuestionResource $question The updated question (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\QuestionResource
     */
    public function updateQuestion($id, $question = null)
    {
        list($response) = $this->updateQuestionWithHttpInfo($id, $question);
        return $response;
    }

    /**
     * Operation updateQuestionWithHttpInfo
     *
     * Update a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\QuestionResource $question The updated question (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\QuestionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateQuestionWithHttpInfo($id, $question = null)
    {
        $returnType = '\KnetikCloud\Model\QuestionResource';
        $request = $this->updateQuestionRequest($id, $question);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateQuestionAsync
     *
     * Update a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\QuestionResource $question The updated question (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateQuestionAsync($id, $question = null)
    {
        return $this->updateQuestionAsyncWithHttpInfo($id, $question)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateQuestionAsyncWithHttpInfo
     *
     * Update a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\QuestionResource $question The updated question (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateQuestionAsyncWithHttpInfo($id, $question = null)
    {
        $returnType = '\KnetikCloud\Model\QuestionResource';
        $request = $this->updateQuestionRequest($id, $question);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateQuestion'
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\QuestionResource $question The updated question (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateQuestionRequest($id, $question = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateQuestion');
        }

        $resourcePath = '/trivia/questions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($question)) {
            $_tempBody = $question;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateQuestionAnswer
     *
     * Update an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The updated answer (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateQuestionAnswer($question_id, $id, $answer = null)
    {
        $this->updateQuestionAnswerWithHttpInfo($question_id, $id, $answer);
    }

    /**
     * Operation updateQuestionAnswerWithHttpInfo
     *
     * Update an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The updated answer (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateQuestionAnswerWithHttpInfo($question_id, $id, $answer = null)
    {
        $returnType = '';
        $request = $this->updateQuestionAnswerRequest($question_id, $id, $answer);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateQuestionAnswerAsync
     *
     * Update an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The updated answer (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateQuestionAnswerAsync($question_id, $id, $answer = null)
    {
        return $this->updateQuestionAnswerAsyncWithHttpInfo($question_id, $id, $answer)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateQuestionAnswerAsyncWithHttpInfo
     *
     * Update an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The updated answer (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateQuestionAnswerAsyncWithHttpInfo($question_id, $id, $answer = null)
    {
        $returnType = '';
        $request = $this->updateQuestionAnswerRequest($question_id, $id, $answer);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateQuestionAnswer'
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The updated answer (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateQuestionAnswerRequest($question_id, $id, $answer = null)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling updateQuestionAnswer');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateQuestionAnswer');
        }

        $resourcePath = '/trivia/questions/{question_id}/answers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace('{' . 'question_id' . '}', ObjectSerializer::toPathValue($question_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($answer)) {
            $_tempBody = $answer;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateQuestionTemplate
     *
     * Update a question template
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\QuestionTemplateResource
     */
    public function updateQuestionTemplate($id, $question_template_resource = null)
    {
        list($response) = $this->updateQuestionTemplateWithHttpInfo($id, $question_template_resource);
        return $response;
    }

    /**
     * Operation updateQuestionTemplateWithHttpInfo
     *
     * Update a question template
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\QuestionTemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateQuestionTemplateWithHttpInfo($id, $question_template_resource = null)
    {
        $returnType = '\KnetikCloud\Model\QuestionTemplateResource';
        $request = $this->updateQuestionTemplateRequest($id, $question_template_resource);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionTemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateQuestionTemplateAsync
     *
     * Update a question template
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateQuestionTemplateAsync($id, $question_template_resource = null)
    {
        return $this->updateQuestionTemplateAsyncWithHttpInfo($id, $question_template_resource)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateQuestionTemplateAsyncWithHttpInfo
     *
     * Update a question template
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateQuestionTemplateAsyncWithHttpInfo($id, $question_template_resource = null)
    {
        $returnType = '\KnetikCloud\Model\QuestionTemplateResource';
        $request = $this->updateQuestionTemplateRequest($id, $question_template_resource);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateQuestionTemplate'
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateQuestionTemplateRequest($id, $question_template_resource = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateQuestionTemplate');
        }

        $resourcePath = '/trivia/questions/templates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($question_template_resource)) {
            $_tempBody = $question_template_resource;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateQuestionsInBulk
     *
     * Bulk update questions
     *
     * @param \KnetikCloud\Model\QuestionResource $question New values for a set of question fields (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function updateQuestionsInBulk($question = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        list($response) = $this->updateQuestionsInBulkWithHttpInfo($question, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_type, $filter_published, $filter_import_id);
        return $response;
    }

    /**
     * Operation updateQuestionsInBulkWithHttpInfo
     *
     * Bulk update questions
     *
     * @param \KnetikCloud\Model\QuestionResource $question New values for a set of question fields (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateQuestionsInBulkWithHttpInfo($question = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        $returnType = 'int';
        $request = $this->updateQuestionsInBulkRequest($question, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_type, $filter_published, $filter_import_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateQuestionsInBulkAsync
     *
     * Bulk update questions
     *
     * @param \KnetikCloud\Model\QuestionResource $question New values for a set of question fields (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateQuestionsInBulkAsync($question = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        return $this->updateQuestionsInBulkAsyncWithHttpInfo($question, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_type, $filter_published, $filter_import_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateQuestionsInBulkAsyncWithHttpInfo
     *
     * Bulk update questions
     *
     * @param \KnetikCloud\Model\QuestionResource $question New values for a set of question fields (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateQuestionsInBulkAsyncWithHttpInfo($question = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        $returnType = 'int';
        $request = $this->updateQuestionsInBulkRequest($question, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_type, $filter_published, $filter_import_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateQuestionsInBulk'
     *
     * @param \KnetikCloud\Model\QuestionResource $question New values for a set of question fields (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateQuestionsInBulkRequest($question = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {

        $resourcePath = '/trivia/questions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = ObjectSerializer::toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = ObjectSerializer::toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = ObjectSerializer::toQueryValue($filter_category);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = ObjectSerializer::toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = ObjectSerializer::toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = ObjectSerializer::toQueryValue($filter_published);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = ObjectSerializer::toQueryValue($filter_import_id);
        }


        // body params
        $_tempBody = null;
        if (isset($question)) {
            $_tempBody = $question;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

}
