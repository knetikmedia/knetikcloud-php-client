<?php
/**
 * GamificationTriviaApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use \KnetikCloud\ApiClient;
use \KnetikCloud\ApiException;
use \KnetikCloud\Configuration;
use \KnetikCloud\ObjectSerializer;

/**
 * GamificationTriviaApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GamificationTriviaApi
{
    /**
     * API Client
     *
     * @var \KnetikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \KnetikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\KnetikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \KnetikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \KnetikCloud\ApiClient $apiClient set the API client
     *
     * @return GamificationTriviaApi
     */
    public function setApiClient(\KnetikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addQuestionAnswers
     *
     * Add an answer to a question
     *
     * @param string $question_id The id of the question (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The new answer (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\AnswerResource
     */
    public function addQuestionAnswers($question_id, $answer = null)
    {
        list($response) = $this->addQuestionAnswersWithHttpInfo($question_id, $answer);
        return $response;
    }

    /**
     * Operation addQuestionAnswersWithHttpInfo
     *
     * Add an answer to a question
     *
     * @param string $question_id The id of the question (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The new answer (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\AnswerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function addQuestionAnswersWithHttpInfo($question_id, $answer = null)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling addQuestionAnswers');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{question_id}/answers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace(
                "{" . "question_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($question_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($answer)) {
            $_tempBody = $answer;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\AnswerResource',
                '/trivia/questions/{question_id}/answers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\AnswerResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\AnswerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addQuestionTag
     *
     * Add a tag to a question
     *
     * @param string $id The id of the question (required)
     * @param string $tag The new tag (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function addQuestionTag($id, $tag = null)
    {
        list($response) = $this->addQuestionTagWithHttpInfo($id, $tag);
        return $response;
    }

    /**
     * Operation addQuestionTagWithHttpInfo
     *
     * Add a tag to a question
     *
     * @param string $id The id of the question (required)
     * @param string $tag The new tag (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addQuestionTagWithHttpInfo($id, $tag = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addQuestionTag');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{id}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($tag)) {
            $_tempBody = $tag;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/trivia/questions/{id}/tags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addTagToQuestionsBatch
     *
     * Add a tag to a batch of questions
     *
     * @param string $tag The tag to add (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return int
     */
    public function addTagToQuestionsBatch($tag = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        list($response) = $this->addTagToQuestionsBatchWithHttpInfo($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id);
        return $response;
    }

    /**
     * Operation addTagToQuestionsBatchWithHttpInfo
     *
     * Add a tag to a batch of questions
     *
     * @param string $tag The tag to add (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTagToQuestionsBatchWithHttpInfo($tag = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        // parse inputs
        $resourcePath = "/trivia/questions/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = $this->apiClient->getSerializer()->toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = $this->apiClient->getSerializer()->toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = $this->apiClient->getSerializer()->toQueryValue($filter_category);
        }
        // query params
        if ($filter_tag !== null) {
            $queryParams['filter_tag'] = $this->apiClient->getSerializer()->toQueryValue($filter_tag);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = $this->apiClient->getSerializer()->toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = $this->apiClient->getSerializer()->toQueryValue($filter_published);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = $this->apiClient->getSerializer()->toQueryValue($filter_import_id);
        }
        // body params
        $_tempBody = null;
        if (isset($tag)) {
            $_tempBody = $tag;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/trivia/questions/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createImportJob
     *
     * Create an import job
     *
     * @param \KnetikCloud\Model\ImportJobResource $request The new import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\ImportJobResource
     */
    public function createImportJob($request = null)
    {
        list($response) = $this->createImportJobWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation createImportJobWithHttpInfo
     *
     * Create an import job
     *
     * @param \KnetikCloud\Model\ImportJobResource $request The new import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\ImportJobResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createImportJobWithHttpInfo($request = null)
    {
        // parse inputs
        $resourcePath = "/trivia/import";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\ImportJobResource',
                '/trivia/import'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\ImportJobResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\ImportJobResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createQuestion
     *
     * Create a question
     *
     * @param \KnetikCloud\Model\QuestionResource $question The new question (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\QuestionResource
     */
    public function createQuestion($question = null)
    {
        list($response) = $this->createQuestionWithHttpInfo($question);
        return $response;
    }

    /**
     * Operation createQuestionWithHttpInfo
     *
     * Create a question
     *
     * @param \KnetikCloud\Model\QuestionResource $question The new question (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\QuestionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createQuestionWithHttpInfo($question = null)
    {
        // parse inputs
        $resourcePath = "/trivia/questions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($question)) {
            $_tempBody = $question;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\QuestionResource',
                '/trivia/questions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\QuestionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createQuestionTemplate
     *
     * Create a question template
     *
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\QuestionTemplateResource
     */
    public function createQuestionTemplate($question_template_resource = null)
    {
        list($response) = $this->createQuestionTemplateWithHttpInfo($question_template_resource);
        return $response;
    }

    /**
     * Operation createQuestionTemplateWithHttpInfo
     *
     * Create a question template
     *
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\QuestionTemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createQuestionTemplateWithHttpInfo($question_template_resource = null)
    {
        // parse inputs
        $resourcePath = "/trivia/questions/templates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($question_template_resource)) {
            $_tempBody = $question_template_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\QuestionTemplateResource',
                '/trivia/questions/templates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\QuestionTemplateResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionTemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteImportJob
     *
     * Delete an import job
     *
     * @param int $id The id of the job (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteImportJob($id)
    {
        list($response) = $this->deleteImportJobWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteImportJobWithHttpInfo
     *
     * Delete an import job
     *
     * @param int $id The id of the job (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteImportJobWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteImportJob');
        }
        // parse inputs
        $resourcePath = "/trivia/import/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/trivia/import/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteQuestion
     *
     * Delete a question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteQuestion($id)
    {
        list($response) = $this->deleteQuestionWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteQuestionWithHttpInfo
     *
     * Delete a question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuestionWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteQuestion');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/trivia/questions/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteQuestionAnswers
     *
     * Remove an answer from a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteQuestionAnswers($question_id, $id)
    {
        list($response) = $this->deleteQuestionAnswersWithHttpInfo($question_id, $id);
        return $response;
    }

    /**
     * Operation deleteQuestionAnswersWithHttpInfo
     *
     * Remove an answer from a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuestionAnswersWithHttpInfo($question_id, $id)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling deleteQuestionAnswers');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteQuestionAnswers');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{question_id}/answers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace(
                "{" . "question_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($question_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/trivia/questions/{question_id}/answers/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteQuestionTemplate
     *
     * Delete a question template
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteQuestionTemplate($id, $cascade = null)
    {
        list($response) = $this->deleteQuestionTemplateWithHttpInfo($id, $cascade);
        return $response;
    }

    /**
     * Operation deleteQuestionTemplateWithHttpInfo
     *
     * Delete a question template
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuestionTemplateWithHttpInfo($id, $cascade = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteQuestionTemplate');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/templates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($cascade !== null) {
            $queryParams['cascade'] = $this->apiClient->getSerializer()->toQueryValue($cascade);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/trivia/questions/templates/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getImportJob
     *
     * Get an import job
     *
     * @param int $id The id of the job (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\ImportJobResource
     */
    public function getImportJob($id)
    {
        list($response) = $this->getImportJobWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getImportJobWithHttpInfo
     *
     * Get an import job
     *
     * @param int $id The id of the job (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\ImportJobResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportJobWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getImportJob');
        }
        // parse inputs
        $resourcePath = "/trivia/import/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\ImportJobResource',
                '/trivia/import/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\ImportJobResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\ImportJobResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getImportJobs
     *
     * Get a list of import job
     *
     * @param string $filter_vendor Filter for jobs by vendor id (optional)
     * @param string $filter_category Filter for jobs by category id (optional)
     * @param string $filter_name Filter for jobs which name *STARTS* with the given string (optional)
     * @param string $filter_status Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceImportJobResource_
     */
    public function getImportJobs($filter_vendor = null, $filter_category = null, $filter_name = null, $filter_status = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        list($response) = $this->getImportJobsWithHttpInfo($filter_vendor, $filter_category, $filter_name, $filter_status, $size, $page, $order);
        return $response;
    }

    /**
     * Operation getImportJobsWithHttpInfo
     *
     * Get a list of import job
     *
     * @param string $filter_vendor Filter for jobs by vendor id (optional)
     * @param string $filter_category Filter for jobs by category id (optional)
     * @param string $filter_name Filter for jobs which name *STARTS* with the given string (optional)
     * @param string $filter_status Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceImportJobResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportJobsWithHttpInfo($filter_vendor = null, $filter_category = null, $filter_name = null, $filter_status = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        // parse inputs
        $resourcePath = "/trivia/import";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_vendor !== null) {
            $queryParams['filter_vendor'] = $this->apiClient->getSerializer()->toQueryValue($filter_vendor);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = $this->apiClient->getSerializer()->toQueryValue($filter_category);
        }
        // query params
        if ($filter_name !== null) {
            $queryParams['filter_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_name);
        }
        // query params
        if ($filter_status !== null) {
            $queryParams['filter_status'] = $this->apiClient->getSerializer()->toQueryValue($filter_status);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceImportJobResource_',
                '/trivia/import'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceImportJobResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceImportJobResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestion
     *
     * Get a single question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\QuestionResource
     */
    public function getQuestion($id)
    {
        list($response) = $this->getQuestionWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQuestionWithHttpInfo
     *
     * Get a single question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\QuestionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getQuestion');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\QuestionResource',
                '/trivia/questions/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\QuestionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestionAnswer
     *
     * Get an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\AnswerResource
     */
    public function getQuestionAnswer($question_id, $id)
    {
        list($response) = $this->getQuestionAnswerWithHttpInfo($question_id, $id);
        return $response;
    }

    /**
     * Operation getQuestionAnswerWithHttpInfo
     *
     * Get an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\AnswerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionAnswerWithHttpInfo($question_id, $id)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling getQuestionAnswer');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getQuestionAnswer');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{question_id}/answers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace(
                "{" . "question_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($question_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\AnswerResource',
                '/trivia/questions/{question_id}/answers/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\AnswerResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\AnswerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestionAnswers
     *
     * List the answers available for a question
     *
     * @param string $question_id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\AnswerResource[]
     */
    public function getQuestionAnswers($question_id)
    {
        list($response) = $this->getQuestionAnswersWithHttpInfo($question_id);
        return $response;
    }

    /**
     * Operation getQuestionAnswersWithHttpInfo
     *
     * List the answers available for a question
     *
     * @param string $question_id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\AnswerResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionAnswersWithHttpInfo($question_id)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling getQuestionAnswers');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{question_id}/answers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace(
                "{" . "question_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($question_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\AnswerResource[]',
                '/trivia/questions/{question_id}/answers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\AnswerResource[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\AnswerResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestionDeltas
     *
     * List question deltas in ascending order of updated date
     *
     * @param int $since Timestamp in seconds (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\DeltaResource[]
     */
    public function getQuestionDeltas($since = null)
    {
        list($response) = $this->getQuestionDeltasWithHttpInfo($since);
        return $response;
    }

    /**
     * Operation getQuestionDeltasWithHttpInfo
     *
     * List question deltas in ascending order of updated date
     *
     * @param int $since Timestamp in seconds (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\DeltaResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionDeltasWithHttpInfo($since = null)
    {
        // parse inputs
        $resourcePath = "/trivia/questions/delta";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\DeltaResource[]',
                '/trivia/questions/delta'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\DeltaResource[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\DeltaResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestionTags
     *
     * List the tags for a question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return string[]
     */
    public function getQuestionTags($id)
    {
        list($response) = $this->getQuestionTagsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQuestionTagsWithHttpInfo
     *
     * List the tags for a question
     *
     * @param string $id The id of the question (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionTagsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getQuestionTags');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{id}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/trivia/questions/{id}/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestionTemplate
     *
     * Get a single question template
     *
     * @param string $id The id of the template (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\QuestionTemplateResource
     */
    public function getQuestionTemplate($id)
    {
        list($response) = $this->getQuestionTemplateWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQuestionTemplateWithHttpInfo
     *
     * Get a single question template
     *
     * @param string $id The id of the template (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\QuestionTemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionTemplateWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getQuestionTemplate');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/templates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\QuestionTemplateResource',
                '/trivia/questions/templates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\QuestionTemplateResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionTemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestionTemplates
     *
     * List and search question templates
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceQuestionTemplateResource_
     */
    public function getQuestionTemplates($size = '25', $page = '1', $order = 'id:ASC')
    {
        list($response) = $this->getQuestionTemplatesWithHttpInfo($size, $page, $order);
        return $response;
    }

    /**
     * Operation getQuestionTemplatesWithHttpInfo
     *
     * List and search question templates
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceQuestionTemplateResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionTemplatesWithHttpInfo($size = '25', $page = '1', $order = 'id:ASC')
    {
        // parse inputs
        $resourcePath = "/trivia/questions/templates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceQuestionTemplateResource_',
                '/trivia/questions/templates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceQuestionTemplateResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceQuestionTemplateResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestions
     *
     * List and search questions
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceQuestionResource_
     */
    public function getQuestions($size = '25', $page = '1', $order = 'id:ASC', $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_tag = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        list($response) = $this->getQuestionsWithHttpInfo($size, $page, $order, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_tag, $filter_type, $filter_published, $filter_import_id);
        return $response;
    }

    /**
     * Operation getQuestionsWithHttpInfo
     *
     * List and search questions
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceQuestionResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionsWithHttpInfo($size = '25', $page = '1', $order = 'id:ASC', $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_tag = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        // parse inputs
        $resourcePath = "/trivia/questions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = $this->apiClient->getSerializer()->toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = $this->apiClient->getSerializer()->toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = $this->apiClient->getSerializer()->toQueryValue($filter_category);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_tag !== null) {
            $queryParams['filter_tag'] = $this->apiClient->getSerializer()->toQueryValue($filter_tag);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = $this->apiClient->getSerializer()->toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = $this->apiClient->getSerializer()->toQueryValue($filter_published);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = $this->apiClient->getSerializer()->toQueryValue($filter_import_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceQuestionResource_',
                '/trivia/questions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceQuestionResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceQuestionResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestionsCount
     *
     * Count questions based on filters
     *
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return int
     */
    public function getQuestionsCount($filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null)
    {
        list($response) = $this->getQuestionsCountWithHttpInfo($filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published);
        return $response;
    }

    /**
     * Operation getQuestionsCountWithHttpInfo
     *
     * Count questions based on filters
     *
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionsCountWithHttpInfo($filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null)
    {
        // parse inputs
        $resourcePath = "/trivia/questions/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = $this->apiClient->getSerializer()->toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = $this->apiClient->getSerializer()->toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = $this->apiClient->getSerializer()->toQueryValue($filter_category);
        }
        // query params
        if ($filter_tag !== null) {
            $queryParams['filter_tag'] = $this->apiClient->getSerializer()->toQueryValue($filter_tag);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = $this->apiClient->getSerializer()->toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = $this->apiClient->getSerializer()->toQueryValue($filter_published);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/trivia/questions/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation processImportJob
     *
     * Start processing an import job
     *
     * @param int $id The id of the job (required)
     * @param bool $publish_now Whether the new questions should be published live immediately (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\ImportJobResource
     */
    public function processImportJob($id, $publish_now)
    {
        list($response) = $this->processImportJobWithHttpInfo($id, $publish_now);
        return $response;
    }

    /**
     * Operation processImportJobWithHttpInfo
     *
     * Start processing an import job
     *
     * @param int $id The id of the job (required)
     * @param bool $publish_now Whether the new questions should be published live immediately (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\ImportJobResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function processImportJobWithHttpInfo($id, $publish_now)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling processImportJob');
        }
        // verify the required parameter 'publish_now' is set
        if ($publish_now === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publish_now when calling processImportJob');
        }
        // parse inputs
        $resourcePath = "/trivia/import/{id}/process";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($publish_now !== null) {
            $queryParams['publish_now'] = $this->apiClient->getSerializer()->toQueryValue($publish_now);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\ImportJobResource',
                '/trivia/import/{id}/process'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\ImportJobResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\ImportJobResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeQuestionTag
     *
     * Remove a tag from a question
     *
     * @param string $id The id of the question (required)
     * @param string $tag The tag to remove (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function removeQuestionTag($id, $tag)
    {
        list($response) = $this->removeQuestionTagWithHttpInfo($id, $tag);
        return $response;
    }

    /**
     * Operation removeQuestionTagWithHttpInfo
     *
     * Remove a tag from a question
     *
     * @param string $id The id of the question (required)
     * @param string $tag The tag to remove (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeQuestionTagWithHttpInfo($id, $tag)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeQuestionTag');
        }
        // verify the required parameter 'tag' is set
        if ($tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag when calling removeQuestionTag');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{id}/tags/{tag}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tag !== null) {
            $resourcePath = str_replace(
                "{" . "tag" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/trivia/questions/{id}/tags/{tag}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeTagToQuestionsBatch
     *
     * Remove a tag from a batch of questions
     *
     * @param string $tag The tag to remove (required)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return int
     */
    public function removeTagToQuestionsBatch($tag, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        list($response) = $this->removeTagToQuestionsBatchWithHttpInfo($tag, $filter_search, $filter_idset, $filter_category, $filter_tag, $filter_tagset, $filter_type, $filter_published, $filter_import_id);
        return $response;
    }

    /**
     * Operation removeTagToQuestionsBatchWithHttpInfo
     *
     * Remove a tag from a batch of questions
     *
     * @param string $tag The tag to remove (required)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tag Filter for questions with specified tag (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTagToQuestionsBatchWithHttpInfo($tag, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tag = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        // verify the required parameter 'tag' is set
        if ($tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag when calling removeTagToQuestionsBatch');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/tags/{tag}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = $this->apiClient->getSerializer()->toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = $this->apiClient->getSerializer()->toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = $this->apiClient->getSerializer()->toQueryValue($filter_category);
        }
        // query params
        if ($filter_tag !== null) {
            $queryParams['filter_tag'] = $this->apiClient->getSerializer()->toQueryValue($filter_tag);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = $this->apiClient->getSerializer()->toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = $this->apiClient->getSerializer()->toQueryValue($filter_published);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = $this->apiClient->getSerializer()->toQueryValue($filter_import_id);
        }
        // path params
        if ($tag !== null) {
            $resourcePath = str_replace(
                "{" . "tag" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/trivia/questions/tags/{tag}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchQuestionTags
     *
     * List and search tags by the beginning of the string
     *
     * @param string $filter_search Filter for tags starting with the given text (optional)
     * @param string $filter_category Filter for tags on questions from a specific category (optional)
     * @param int $filter_import_id Filter for tags on questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\CollectionString_
     */
    public function searchQuestionTags($filter_search = null, $filter_category = null, $filter_import_id = null)
    {
        list($response) = $this->searchQuestionTagsWithHttpInfo($filter_search, $filter_category, $filter_import_id);
        return $response;
    }

    /**
     * Operation searchQuestionTagsWithHttpInfo
     *
     * List and search tags by the beginning of the string
     *
     * @param string $filter_search Filter for tags starting with the given text (optional)
     * @param string $filter_category Filter for tags on questions from a specific category (optional)
     * @param int $filter_import_id Filter for tags on questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\CollectionString_, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchQuestionTagsWithHttpInfo($filter_search = null, $filter_category = null, $filter_import_id = null)
    {
        // parse inputs
        $resourcePath = "/trivia/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = $this->apiClient->getSerializer()->toQueryValue($filter_search);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = $this->apiClient->getSerializer()->toQueryValue($filter_category);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = $this->apiClient->getSerializer()->toQueryValue($filter_import_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\CollectionString_',
                '/trivia/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\CollectionString_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\CollectionString_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateImportJob
     *
     * Update an import job
     *
     * @param int $id The id of the job (required)
     * @param \KnetikCloud\Model\ImportJobResource $request The updated job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\ImportJobResource
     */
    public function updateImportJob($id, $request = null)
    {
        list($response) = $this->updateImportJobWithHttpInfo($id, $request);
        return $response;
    }

    /**
     * Operation updateImportJobWithHttpInfo
     *
     * Update an import job
     *
     * @param int $id The id of the job (required)
     * @param \KnetikCloud\Model\ImportJobResource $request The updated job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\ImportJobResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateImportJobWithHttpInfo($id, $request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateImportJob');
        }
        // parse inputs
        $resourcePath = "/trivia/import/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\ImportJobResource',
                '/trivia/import/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\ImportJobResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\ImportJobResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateQuestion
     *
     * Update a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\QuestionResource $question The updated question (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\QuestionResource
     */
    public function updateQuestion($id, $question = null)
    {
        list($response) = $this->updateQuestionWithHttpInfo($id, $question);
        return $response;
    }

    /**
     * Operation updateQuestionWithHttpInfo
     *
     * Update a question
     *
     * @param string $id The id of the question (required)
     * @param \KnetikCloud\Model\QuestionResource $question The updated question (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\QuestionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateQuestionWithHttpInfo($id, $question = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateQuestion');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($question)) {
            $_tempBody = $question;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\QuestionResource',
                '/trivia/questions/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\QuestionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateQuestionAnswer
     *
     * Update an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The updated answer (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function updateQuestionAnswer($question_id, $id, $answer = null)
    {
        list($response) = $this->updateQuestionAnswerWithHttpInfo($question_id, $id, $answer);
        return $response;
    }

    /**
     * Operation updateQuestionAnswerWithHttpInfo
     *
     * Update an answer for a question
     *
     * @param string $question_id The id of the question (required)
     * @param string $id The id of the answer (required)
     * @param \KnetikCloud\Model\AnswerResource $answer The updated answer (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateQuestionAnswerWithHttpInfo($question_id, $id, $answer = null)
    {
        // verify the required parameter 'question_id' is set
        if ($question_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $question_id when calling updateQuestionAnswer');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateQuestionAnswer');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/{question_id}/answers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($question_id !== null) {
            $resourcePath = str_replace(
                "{" . "question_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($question_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($answer)) {
            $_tempBody = $answer;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/trivia/questions/{question_id}/answers/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateQuestionTemplate
     *
     * Update a question template
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\QuestionTemplateResource
     */
    public function updateQuestionTemplate($id, $question_template_resource = null)
    {
        list($response) = $this->updateQuestionTemplateWithHttpInfo($id, $question_template_resource);
        return $response;
    }

    /**
     * Operation updateQuestionTemplateWithHttpInfo
     *
     * Update a question template
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\QuestionTemplateResource $question_template_resource The question template resource object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\QuestionTemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateQuestionTemplateWithHttpInfo($id, $question_template_resource = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateQuestionTemplate');
        }
        // parse inputs
        $resourcePath = "/trivia/questions/templates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($question_template_resource)) {
            $_tempBody = $question_template_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\QuestionTemplateResource',
                '/trivia/questions/templates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\QuestionTemplateResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\QuestionTemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateQuestionsInBulk
     *
     * Bulk update questions
     *
     * @param \KnetikCloud\Model\QuestionResource $question New values for a set of question fields (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return int
     */
    public function updateQuestionsInBulk($question = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        list($response) = $this->updateQuestionsInBulkWithHttpInfo($question, $filter_search, $filter_idset, $filter_category, $filter_tagset, $filter_type, $filter_published, $filter_import_id);
        return $response;
    }

    /**
     * Operation updateQuestionsInBulkWithHttpInfo
     *
     * Bulk update questions
     *
     * @param \KnetikCloud\Model\QuestionResource $question New values for a set of question fields (optional)
     * @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
     * @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
     * @param string $filter_category Filter for questions with specified category, by id (optional)
     * @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
     * @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param bool $filter_published Filter for questions currenctly published or not (optional)
     * @param int $filter_import_id Filter for questions from a specific import job (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateQuestionsInBulkWithHttpInfo($question = null, $filter_search = null, $filter_idset = null, $filter_category = null, $filter_tagset = null, $filter_type = null, $filter_published = null, $filter_import_id = null)
    {
        // parse inputs
        $resourcePath = "/trivia/questions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_search !== null) {
            $queryParams['filter_search'] = $this->apiClient->getSerializer()->toQueryValue($filter_search);
        }
        // query params
        if ($filter_idset !== null) {
            $queryParams['filter_idset'] = $this->apiClient->getSerializer()->toQueryValue($filter_idset);
        }
        // query params
        if ($filter_category !== null) {
            $queryParams['filter_category'] = $this->apiClient->getSerializer()->toQueryValue($filter_category);
        }
        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = $this->apiClient->getSerializer()->toQueryValue($filter_type);
        }
        // query params
        if ($filter_published !== null) {
            $queryParams['filter_published'] = $this->apiClient->getSerializer()->toQueryValue($filter_published);
        }
        // query params
        if ($filter_import_id !== null) {
            $queryParams['filter_import_id'] = $this->apiClient->getSerializer()->toQueryValue($filter_import_id);
        }
        // body params
        $_tempBody = null;
        if (isset($question)) {
            $_tempBody = $question;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/trivia/questions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
