<?php
/**
 * ReportingOrdersApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use \KnetikCloud\ApiClient;
use \KnetikCloud\ApiException;
use \KnetikCloud\Configuration;
use \KnetikCloud\ObjectSerializer;

/**
 * ReportingOrdersApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportingOrdersApi
{
    /**
     * API Client
     *
     * @var \KnetikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \KnetikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\KnetikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \KnetikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \KnetikCloud\ApiClient $apiClient set the API client
     *
     * @return ReportingOrdersApi
     */
    public function setApiClient(\KnetikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getInvoiceReports
     *
     * Retrieve invoice counts aggregated by time ranges
     *
     * @param string $currency_code The code for a currency to get sales data for (required)
     * @param string $granularity The time duration to aggregate by (optional, default to day)
     * @param string $filter_payment_status A payment status to filter results by, can be a comma separated list (optional)
     * @param string $filter_fulfillment_status An invoice fulfillment status to filter results by, can be a comma separated list (optional)
     * @param int $start_date The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)
     * @param int $end_date The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceAggregateInvoiceReportResource_
     */
    public function getInvoiceReports($currency_code, $granularity = 'day', $filter_payment_status = null, $filter_fulfillment_status = null, $start_date = null, $end_date = null, $size = '25', $page = '1')
    {
        list($response) = $this->getInvoiceReportsWithHttpInfo($currency_code, $granularity, $filter_payment_status, $filter_fulfillment_status, $start_date, $end_date, $size, $page);
        return $response;
    }

    /**
     * Operation getInvoiceReportsWithHttpInfo
     *
     * Retrieve invoice counts aggregated by time ranges
     *
     * @param string $currency_code The code for a currency to get sales data for (required)
     * @param string $granularity The time duration to aggregate by (optional, default to day)
     * @param string $filter_payment_status A payment status to filter results by, can be a comma separated list (optional)
     * @param string $filter_fulfillment_status An invoice fulfillment status to filter results by, can be a comma separated list (optional)
     * @param int $start_date The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)
     * @param int $end_date The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceAggregateInvoiceReportResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceReportsWithHttpInfo($currency_code, $granularity = 'day', $filter_payment_status = null, $filter_fulfillment_status = null, $start_date = null, $end_date = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling getInvoiceReports');
        }
        // parse inputs
        $resourcePath = "/reporting/orders/count/{currency_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($granularity !== null) {
            $queryParams['granularity'] = $this->apiClient->getSerializer()->toQueryValue($granularity);
        }
        // query params
        if ($filter_payment_status !== null) {
            $queryParams['filter_payment_status'] = $this->apiClient->getSerializer()->toQueryValue($filter_payment_status);
        }
        // query params
        if ($filter_fulfillment_status !== null) {
            $queryParams['filter_fulfillment_status'] = $this->apiClient->getSerializer()->toQueryValue($filter_fulfillment_status);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                "{" . "currency_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($currency_code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceAggregateInvoiceReportResource_',
                '/reporting/orders/count/{currency_code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceAggregateInvoiceReportResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceAggregateInvoiceReportResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
