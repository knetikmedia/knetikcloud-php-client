<?php
/**
 * PaymentsWalletsApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use KnetikCloud\ApiException;
use KnetikCloud\Configuration;
use KnetikCloud\HeaderSelector;
use KnetikCloud\ObjectSerializer;

/**
 * PaymentsWalletsApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsWalletsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getUserWallet
     *
     * Returns the user's wallet for the given currency code
     *
     * @param int $user_id The ID of the user for whom wallet is being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\SimpleWallet
     */
    public function getUserWallet($user_id, $currency_code)
    {
        list($response) = $this->getUserWalletWithHttpInfo($user_id, $currency_code);
        return $response;
    }

    /**
     * Operation getUserWalletWithHttpInfo
     *
     * Returns the user's wallet for the given currency code
     *
     * @param int $user_id The ID of the user for whom wallet is being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\SimpleWallet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserWalletWithHttpInfo($user_id, $currency_code)
    {
        $returnType = '\KnetikCloud\Model\SimpleWallet';
        $request = $this->getUserWalletRequest($user_id, $currency_code);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\SimpleWallet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserWalletAsync
     *
     * Returns the user's wallet for the given currency code
     *
     * @param int $user_id The ID of the user for whom wallet is being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserWalletAsync($user_id, $currency_code)
    {
        return $this->getUserWalletAsyncWithHttpInfo($user_id, $currency_code)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUserWalletAsyncWithHttpInfo
     *
     * Returns the user's wallet for the given currency code
     *
     * @param int $user_id The ID of the user for whom wallet is being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserWalletAsyncWithHttpInfo($user_id, $currency_code)
    {
        $returnType = '\KnetikCloud\Model\SimpleWallet';
        $request = $this->getUserWalletRequest($user_id, $currency_code);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUserWallet'
     *
     * @param int $user_id The ID of the user for whom wallet is being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserWalletRequest($user_id, $currency_code)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserWallet');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling getUserWallet');
        }

        $resourcePath = '/users/{user_id}/wallets/{currency_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace('{' . 'currency_code' . '}', ObjectSerializer::toPathValue($currency_code), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserWalletTransactions
     *
     * Retrieve a user's wallet transactions
     *
     * @param int $user_id The ID of the user for whom wallet transactions are being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param int $filter_max_date Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param int $filter_min_date Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceWalletTransactionResource_
     */
    public function getUserWalletTransactions($user_id, $currency_code, $filter_type = null, $filter_max_date = null, $filter_min_date = null, $filter_sign = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        list($response) = $this->getUserWalletTransactionsWithHttpInfo($user_id, $currency_code, $filter_type, $filter_max_date, $filter_min_date, $filter_sign, $size, $page, $order);
        return $response;
    }

    /**
     * Operation getUserWalletTransactionsWithHttpInfo
     *
     * Retrieve a user's wallet transactions
     *
     * @param int $user_id The ID of the user for whom wallet transactions are being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param int $filter_max_date Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param int $filter_min_date Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceWalletTransactionResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserWalletTransactionsWithHttpInfo($user_id, $currency_code, $filter_type = null, $filter_max_date = null, $filter_min_date = null, $filter_sign = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceWalletTransactionResource_';
        $request = $this->getUserWalletTransactionsRequest($user_id, $currency_code, $filter_type, $filter_max_date, $filter_min_date, $filter_sign, $size, $page, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceWalletTransactionResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserWalletTransactionsAsync
     *
     * Retrieve a user's wallet transactions
     *
     * @param int $user_id The ID of the user for whom wallet transactions are being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param int $filter_max_date Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param int $filter_min_date Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserWalletTransactionsAsync($user_id, $currency_code, $filter_type = null, $filter_max_date = null, $filter_min_date = null, $filter_sign = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        return $this->getUserWalletTransactionsAsyncWithHttpInfo($user_id, $currency_code, $filter_type, $filter_max_date, $filter_min_date, $filter_sign, $size, $page, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUserWalletTransactionsAsyncWithHttpInfo
     *
     * Retrieve a user's wallet transactions
     *
     * @param int $user_id The ID of the user for whom wallet transactions are being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param int $filter_max_date Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param int $filter_min_date Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserWalletTransactionsAsyncWithHttpInfo($user_id, $currency_code, $filter_type = null, $filter_max_date = null, $filter_min_date = null, $filter_sign = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceWalletTransactionResource_';
        $request = $this->getUserWalletTransactionsRequest($user_id, $currency_code, $filter_type, $filter_max_date, $filter_min_date, $filter_sign, $size, $page, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUserWalletTransactions'
     *
     * @param int $user_id The ID of the user for whom wallet transactions are being retrieved (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param int $filter_max_date Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param int $filter_min_date Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserWalletTransactionsRequest($user_id, $currency_code, $filter_type = null, $filter_max_date = null, $filter_min_date = null, $filter_sign = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserWalletTransactions');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling getUserWalletTransactions');
        }

        $resourcePath = '/users/{user_id}/wallets/{currency_code}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = ObjectSerializer::toQueryValue($filter_type);
        }
        // query params
        if ($filter_max_date !== null) {
            $queryParams['filter_max_date'] = ObjectSerializer::toQueryValue($filter_max_date);
        }
        // query params
        if ($filter_min_date !== null) {
            $queryParams['filter_min_date'] = ObjectSerializer::toQueryValue($filter_min_date);
        }
        // query params
        if ($filter_sign !== null) {
            $queryParams['filter_sign'] = ObjectSerializer::toQueryValue($filter_sign);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace('{' . 'currency_code' . '}', ObjectSerializer::toPathValue($currency_code), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserWallets
     *
     * List all of a user's wallets
     *
     * @param int $user_id The ID of the user for whom wallets are being retrieved (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\SimpleWallet[]
     */
    public function getUserWallets($user_id)
    {
        list($response) = $this->getUserWalletsWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation getUserWalletsWithHttpInfo
     *
     * List all of a user's wallets
     *
     * @param int $user_id The ID of the user for whom wallets are being retrieved (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\SimpleWallet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserWalletsWithHttpInfo($user_id)
    {
        $returnType = '\KnetikCloud\Model\SimpleWallet[]';
        $request = $this->getUserWalletsRequest($user_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\SimpleWallet[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserWalletsAsync
     *
     * List all of a user's wallets
     *
     * @param int $user_id The ID of the user for whom wallets are being retrieved (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserWalletsAsync($user_id)
    {
        return $this->getUserWalletsAsyncWithHttpInfo($user_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUserWalletsAsyncWithHttpInfo
     *
     * List all of a user's wallets
     *
     * @param int $user_id The ID of the user for whom wallets are being retrieved (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserWalletsAsyncWithHttpInfo($user_id)
    {
        $returnType = '\KnetikCloud\Model\SimpleWallet[]';
        $request = $this->getUserWalletsRequest($user_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUserWallets'
     *
     * @param int $user_id The ID of the user for whom wallets are being retrieved (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserWalletsRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserWallets');
        }

        $resourcePath = '/users/{user_id}/wallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWalletBalances
     *
     * Retrieves a summation of wallet balances by currency code
     *
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceWalletTotalResponse_
     */
    public function getWalletBalances()
    {
        list($response) = $this->getWalletBalancesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getWalletBalancesWithHttpInfo
     *
     * Retrieves a summation of wallet balances by currency code
     *
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceWalletTotalResponse_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWalletBalancesWithHttpInfo()
    {
        $returnType = '\KnetikCloud\Model\PageResourceWalletTotalResponse_';
        $request = $this->getWalletBalancesRequest();

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceWalletTotalResponse_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWalletBalancesAsync
     *
     * Retrieves a summation of wallet balances by currency code
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletBalancesAsync()
    {
        return $this->getWalletBalancesAsyncWithHttpInfo()->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWalletBalancesAsyncWithHttpInfo
     *
     * Retrieves a summation of wallet balances by currency code
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletBalancesAsyncWithHttpInfo()
    {
        $returnType = '\KnetikCloud\Model\PageResourceWalletTotalResponse_';
        $request = $this->getWalletBalancesRequest();

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWalletBalances'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWalletBalancesRequest()
    {

        $resourcePath = '/wallets/totals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWalletTransactions
     *
     * Retrieve wallet transactions across the system
     *
     * @param int $filter_invoice Filter for transactions from a specific invoice (optional)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param string $filter_date A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign (optional)
     * @param int $filter_user_id Filter for transactions for specific userId (optional)
     * @param string $filter_username Filter for transactions for specific username that start with the given string (optional)
     * @param string $filter_details Filter for transactions for specific details that start with the given string (optional)
     * @param string $filter_currency_code Filter for transactions for specific currency code (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceWalletTransactionResource_
     */
    public function getWalletTransactions($filter_invoice = null, $filter_type = null, $filter_date = null, $filter_sign = null, $filter_user_id = null, $filter_username = null, $filter_details = null, $filter_currency_code = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        list($response) = $this->getWalletTransactionsWithHttpInfo($filter_invoice, $filter_type, $filter_date, $filter_sign, $filter_user_id, $filter_username, $filter_details, $filter_currency_code, $size, $page, $order);
        return $response;
    }

    /**
     * Operation getWalletTransactionsWithHttpInfo
     *
     * Retrieve wallet transactions across the system
     *
     * @param int $filter_invoice Filter for transactions from a specific invoice (optional)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param string $filter_date A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign (optional)
     * @param int $filter_user_id Filter for transactions for specific userId (optional)
     * @param string $filter_username Filter for transactions for specific username that start with the given string (optional)
     * @param string $filter_details Filter for transactions for specific details that start with the given string (optional)
     * @param string $filter_currency_code Filter for transactions for specific currency code (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceWalletTransactionResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWalletTransactionsWithHttpInfo($filter_invoice = null, $filter_type = null, $filter_date = null, $filter_sign = null, $filter_user_id = null, $filter_username = null, $filter_details = null, $filter_currency_code = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceWalletTransactionResource_';
        $request = $this->getWalletTransactionsRequest($filter_invoice, $filter_type, $filter_date, $filter_sign, $filter_user_id, $filter_username, $filter_details, $filter_currency_code, $size, $page, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceWalletTransactionResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWalletTransactionsAsync
     *
     * Retrieve wallet transactions across the system
     *
     * @param int $filter_invoice Filter for transactions from a specific invoice (optional)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param string $filter_date A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign (optional)
     * @param int $filter_user_id Filter for transactions for specific userId (optional)
     * @param string $filter_username Filter for transactions for specific username that start with the given string (optional)
     * @param string $filter_details Filter for transactions for specific details that start with the given string (optional)
     * @param string $filter_currency_code Filter for transactions for specific currency code (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletTransactionsAsync($filter_invoice = null, $filter_type = null, $filter_date = null, $filter_sign = null, $filter_user_id = null, $filter_username = null, $filter_details = null, $filter_currency_code = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        return $this->getWalletTransactionsAsyncWithHttpInfo($filter_invoice, $filter_type, $filter_date, $filter_sign, $filter_user_id, $filter_username, $filter_details, $filter_currency_code, $size, $page, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWalletTransactionsAsyncWithHttpInfo
     *
     * Retrieve wallet transactions across the system
     *
     * @param int $filter_invoice Filter for transactions from a specific invoice (optional)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param string $filter_date A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign (optional)
     * @param int $filter_user_id Filter for transactions for specific userId (optional)
     * @param string $filter_username Filter for transactions for specific username that start with the given string (optional)
     * @param string $filter_details Filter for transactions for specific details that start with the given string (optional)
     * @param string $filter_currency_code Filter for transactions for specific currency code (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletTransactionsAsyncWithHttpInfo($filter_invoice = null, $filter_type = null, $filter_date = null, $filter_sign = null, $filter_user_id = null, $filter_username = null, $filter_details = null, $filter_currency_code = null, $size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceWalletTransactionResource_';
        $request = $this->getWalletTransactionsRequest($filter_invoice, $filter_type, $filter_date, $filter_sign, $filter_user_id, $filter_username, $filter_details, $filter_currency_code, $size, $page, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWalletTransactions'
     *
     * @param int $filter_invoice Filter for transactions from a specific invoice (optional)
     * @param string $filter_type Filter for transactions with specified type (optional)
     * @param string $filter_date A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param string $filter_sign Filter for transactions with amount with the given sign (optional)
     * @param int $filter_user_id Filter for transactions for specific userId (optional)
     * @param string $filter_username Filter for transactions for specific username that start with the given string (optional)
     * @param string $filter_details Filter for transactions for specific details that start with the given string (optional)
     * @param string $filter_currency_code Filter for transactions for specific currency code (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWalletTransactionsRequest($filter_invoice = null, $filter_type = null, $filter_date = null, $filter_sign = null, $filter_user_id = null, $filter_username = null, $filter_details = null, $filter_currency_code = null, $size = '25', $page = '1', $order = 'id:ASC')
    {

        $resourcePath = '/wallets/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_invoice !== null) {
            $queryParams['filter_invoice'] = ObjectSerializer::toQueryValue($filter_invoice);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filter_type'] = ObjectSerializer::toQueryValue($filter_type);
        }
        // query params
        if ($filter_date !== null) {
            $queryParams['filter_date'] = ObjectSerializer::toQueryValue($filter_date);
        }
        // query params
        if ($filter_sign !== null) {
            $queryParams['filter_sign'] = ObjectSerializer::toQueryValue($filter_sign);
        }
        // query params
        if ($filter_user_id !== null) {
            $queryParams['filter_user_id'] = ObjectSerializer::toQueryValue($filter_user_id);
        }
        // query params
        if ($filter_username !== null) {
            $queryParams['filter_username'] = ObjectSerializer::toQueryValue($filter_username);
        }
        // query params
        if ($filter_details !== null) {
            $queryParams['filter_details'] = ObjectSerializer::toQueryValue($filter_details);
        }
        // query params
        if ($filter_currency_code !== null) {
            $queryParams['filter_currency_code'] = ObjectSerializer::toQueryValue($filter_currency_code);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWallets
     *
     * Retrieve a list of wallets across the system
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceSimpleWallet_
     */
    public function getWallets($size = '25', $page = '1', $order = 'id:ASC')
    {
        list($response) = $this->getWalletsWithHttpInfo($size, $page, $order);
        return $response;
    }

    /**
     * Operation getWalletsWithHttpInfo
     *
     * Retrieve a list of wallets across the system
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceSimpleWallet_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWalletsWithHttpInfo($size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceSimpleWallet_';
        $request = $this->getWalletsRequest($size, $page, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceSimpleWallet_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWalletsAsync
     *
     * Retrieve a list of wallets across the system
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletsAsync($size = '25', $page = '1', $order = 'id:ASC')
    {
        return $this->getWalletsAsyncWithHttpInfo($size, $page, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWalletsAsyncWithHttpInfo
     *
     * Retrieve a list of wallets across the system
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletsAsyncWithHttpInfo($size = '25', $page = '1', $order = 'id:ASC')
    {
        $returnType = '\KnetikCloud\Model\PageResourceSimpleWallet_';
        $request = $this->getWalletsRequest($size, $page, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWallets'
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWalletsRequest($size = '25', $page = '1', $order = 'id:ASC')
    {

        $resourcePath = '/wallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWalletBalance
     *
     * Updates the balance for a user's wallet
     *
     * @param int $user_id The ID of the user for whom wallet is being modified (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param \KnetikCloud\Model\WalletAlterRequest $request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\WalletTransactionResource
     */
    public function updateWalletBalance($user_id, $currency_code, $request = null)
    {
        list($response) = $this->updateWalletBalanceWithHttpInfo($user_id, $currency_code, $request);
        return $response;
    }

    /**
     * Operation updateWalletBalanceWithHttpInfo
     *
     * Updates the balance for a user's wallet
     *
     * @param int $user_id The ID of the user for whom wallet is being modified (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param \KnetikCloud\Model\WalletAlterRequest $request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\WalletTransactionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWalletBalanceWithHttpInfo($user_id, $currency_code, $request = null)
    {
        $returnType = '\KnetikCloud\Model\WalletTransactionResource';
        $request = $this->updateWalletBalanceRequest($user_id, $currency_code, $request);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\WalletTransactionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWalletBalanceAsync
     *
     * Updates the balance for a user's wallet
     *
     * @param int $user_id The ID of the user for whom wallet is being modified (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param \KnetikCloud\Model\WalletAlterRequest $request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWalletBalanceAsync($user_id, $currency_code, $request = null)
    {
        return $this->updateWalletBalanceAsyncWithHttpInfo($user_id, $currency_code, $request)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWalletBalanceAsyncWithHttpInfo
     *
     * Updates the balance for a user's wallet
     *
     * @param int $user_id The ID of the user for whom wallet is being modified (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param \KnetikCloud\Model\WalletAlterRequest $request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWalletBalanceAsyncWithHttpInfo($user_id, $currency_code, $request = null)
    {
        $returnType = '\KnetikCloud\Model\WalletTransactionResource';
        $request = $this->updateWalletBalanceRequest($user_id, $currency_code, $request);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWalletBalance'
     *
     * @param int $user_id The ID of the user for whom wallet is being modified (required)
     * @param string $currency_code Currency code of the user&#39;s wallet (required)
     * @param \KnetikCloud\Model\WalletAlterRequest $request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWalletBalanceRequest($user_id, $currency_code, $request = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling updateWalletBalance');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling updateWalletBalance');
        }

        $resourcePath = '/users/{user_id}/wallets/{currency_code}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'user_id' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace('{' . 'currency_code' . '}', ObjectSerializer::toPathValue($currency_code), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

}
