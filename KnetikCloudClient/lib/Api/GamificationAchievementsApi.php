<?php
/**
 * GamificationAchievementsApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use \KnetikCloud\ApiClient;
use \KnetikCloud\ApiException;
use \KnetikCloud\Configuration;
use \KnetikCloud\ObjectSerializer;

/**
 * GamificationAchievementsApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GamificationAchievementsApi
{
    /**
     * API Client
     *
     * @var \KnetikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \KnetikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\KnetikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \KnetikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \KnetikCloud\ApiClient $apiClient set the API client
     *
     * @return GamificationAchievementsApi
     */
    public function setApiClient(\KnetikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createAchievement
     *
     * Create a new achievement definition
     *
     * @param \KnetikCloud\Model\AchievementDefinitionResource $achievement The achievement definition (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\AchievementDefinitionResource
     */
    public function createAchievement($achievement = null)
    {
        list($response) = $this->createAchievementWithHttpInfo($achievement);
        return $response;
    }

    /**
     * Operation createAchievementWithHttpInfo
     *
     * Create a new achievement definition
     *
     * @param \KnetikCloud\Model\AchievementDefinitionResource $achievement The achievement definition (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\AchievementDefinitionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAchievementWithHttpInfo($achievement = null)
    {
        // parse inputs
        $resourcePath = "/achievements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($achievement)) {
            $_tempBody = $achievement;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\AchievementDefinitionResource',
                '/achievements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\AchievementDefinitionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\AchievementDefinitionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAchievementTemplate
     *
     * Create an achievement template
     *
     * @param \KnetikCloud\Model\TemplateResource $template The achievement template to be created (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\TemplateResource
     */
    public function createAchievementTemplate($template = null)
    {
        list($response) = $this->createAchievementTemplateWithHttpInfo($template);
        return $response;
    }

    /**
     * Operation createAchievementTemplateWithHttpInfo
     *
     * Create an achievement template
     *
     * @param \KnetikCloud\Model\TemplateResource $template The achievement template to be created (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\TemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAchievementTemplateWithHttpInfo($template = null)
    {
        // parse inputs
        $resourcePath = "/achievements/templates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($template)) {
            $_tempBody = $template;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\TemplateResource',
                '/achievements/templates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\TemplateResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\TemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAchievement
     *
     * Delete an achievement definition
     *
     * @param string $name The name of the achievement (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteAchievement($name)
    {
        list($response) = $this->deleteAchievementWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation deleteAchievementWithHttpInfo
     *
     * Delete an achievement definition
     *
     * @param string $name The name of the achievement (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAchievementWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAchievement');
        }
        // parse inputs
        $resourcePath = "/achievements/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/achievements/{name}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAchievementTemplate
     *
     * Delete an achievement template
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteAchievementTemplate($id, $cascade = null)
    {
        list($response) = $this->deleteAchievementTemplateWithHttpInfo($id, $cascade);
        return $response;
    }

    /**
     * Operation deleteAchievementTemplateWithHttpInfo
     *
     * Delete an achievement template
     *
     * @param string $id The id of the template (required)
     * @param string $cascade The value needed to delete used templates (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAchievementTemplateWithHttpInfo($id, $cascade = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteAchievementTemplate');
        }
        // parse inputs
        $resourcePath = "/achievements/templates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($cascade !== null) {
            $queryParams['cascade'] = $this->apiClient->getSerializer()->toQueryValue($cascade);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/achievements/templates/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAchievement
     *
     * Get a single achievement definition
     *
     * @param string $name The name of the achievement (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\AchievementDefinitionResource
     */
    public function getAchievement($name)
    {
        list($response) = $this->getAchievementWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getAchievementWithHttpInfo
     *
     * Get a single achievement definition
     *
     * @param string $name The name of the achievement (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\AchievementDefinitionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAchievementWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getAchievement');
        }
        // parse inputs
        $resourcePath = "/achievements/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\AchievementDefinitionResource',
                '/achievements/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\AchievementDefinitionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\AchievementDefinitionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAchievementTemplate
     *
     * Get a single achievement template
     *
     * @param string $id The id of the template (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\TemplateResource
     */
    public function getAchievementTemplate($id)
    {
        list($response) = $this->getAchievementTemplateWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAchievementTemplateWithHttpInfo
     *
     * Get a single achievement template
     *
     * @param string $id The id of the template (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\TemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAchievementTemplateWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAchievementTemplate');
        }
        // parse inputs
        $resourcePath = "/achievements/templates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\TemplateResource',
                '/achievements/templates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\TemplateResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\TemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAchievementTemplates
     *
     * List and search achievement templates
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceTemplateResource_
     */
    public function getAchievementTemplates($size = null, $page = null, $order = null)
    {
        list($response) = $this->getAchievementTemplatesWithHttpInfo($size, $page, $order);
        return $response;
    }

    /**
     * Operation getAchievementTemplatesWithHttpInfo
     *
     * List and search achievement templates
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceTemplateResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAchievementTemplatesWithHttpInfo($size = null, $page = null, $order = null)
    {
        // parse inputs
        $resourcePath = "/achievements/templates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceTemplateResource_',
                '/achievements/templates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceTemplateResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceTemplateResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAchievementTriggers
     *
     * Get the list of triggers that can be used to trigger an achievement progress update
     *
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\BreTriggerResource[]
     */
    public function getAchievementTriggers()
    {
        list($response) = $this->getAchievementTriggersWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAchievementTriggersWithHttpInfo
     *
     * Get the list of triggers that can be used to trigger an achievement progress update
     *
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\BreTriggerResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAchievementTriggersWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/achievements/triggers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\BreTriggerResource[]',
                '/achievements/triggers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\BreTriggerResource[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\BreTriggerResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAchievements
     *
     * Get all achievement definitions in the system
     *
     * @param string $filter_tagset Filter for achievements with specified tags (separated by comma) (optional)
     * @param string $filter_name Filter for achievements whose name contains a string (optional)
     * @param bool $filter_hidden Filter for achievements that are hidden or not (optional)
     * @param bool $filter_derived Filter for achievements that are derived from other services (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceAchievementDefinitionResource_
     */
    public function getAchievements($filter_tagset = null, $filter_name = null, $filter_hidden = null, $filter_derived = null, $size = null, $page = null, $order = null)
    {
        list($response) = $this->getAchievementsWithHttpInfo($filter_tagset, $filter_name, $filter_hidden, $filter_derived, $size, $page, $order);
        return $response;
    }

    /**
     * Operation getAchievementsWithHttpInfo
     *
     * Get all achievement definitions in the system
     *
     * @param string $filter_tagset Filter for achievements with specified tags (separated by comma) (optional)
     * @param string $filter_name Filter for achievements whose name contains a string (optional)
     * @param bool $filter_hidden Filter for achievements that are hidden or not (optional)
     * @param bool $filter_derived Filter for achievements that are derived from other services (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceAchievementDefinitionResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAchievementsWithHttpInfo($filter_tagset = null, $filter_name = null, $filter_hidden = null, $filter_derived = null, $size = null, $page = null, $order = null)
    {
        // parse inputs
        $resourcePath = "/achievements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_tagset !== null) {
            $queryParams['filter_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_tagset);
        }
        // query params
        if ($filter_name !== null) {
            $queryParams['filter_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_name);
        }
        // query params
        if ($filter_hidden !== null) {
            $queryParams['filter_hidden'] = $this->apiClient->getSerializer()->toQueryValue($filter_hidden);
        }
        // query params
        if ($filter_derived !== null) {
            $queryParams['filter_derived'] = $this->apiClient->getSerializer()->toQueryValue($filter_derived);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceAchievementDefinitionResource_',
                '/achievements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceAchievementDefinitionResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceAchievementDefinitionResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDerivedAchievements
     *
     * Get a list of derived achievements
     *
     * @param string $name The name of the derived achievement (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\AchievementDefinitionResource[]
     */
    public function getDerivedAchievements($name)
    {
        list($response) = $this->getDerivedAchievementsWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getDerivedAchievementsWithHttpInfo
     *
     * Get a list of derived achievements
     *
     * @param string $name The name of the derived achievement (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\AchievementDefinitionResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDerivedAchievementsWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDerivedAchievements');
        }
        // parse inputs
        $resourcePath = "/achievements/derived/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\AchievementDefinitionResource[]',
                '/achievements/derived/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\AchievementDefinitionResource[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\AchievementDefinitionResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserAchievementProgress
     *
     * Retrieve progress on a given achievement for a given user
     *
     * @param int $user_id The user&#39;s id (required)
     * @param string $achievement_name The achievement&#39;s name (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\UserAchievementGroupResource
     */
    public function getUserAchievementProgress($user_id, $achievement_name)
    {
        list($response) = $this->getUserAchievementProgressWithHttpInfo($user_id, $achievement_name);
        return $response;
    }

    /**
     * Operation getUserAchievementProgressWithHttpInfo
     *
     * Retrieve progress on a given achievement for a given user
     *
     * @param int $user_id The user&#39;s id (required)
     * @param string $achievement_name The achievement&#39;s name (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\UserAchievementGroupResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserAchievementProgressWithHttpInfo($user_id, $achievement_name)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserAchievementProgress');
        }
        // verify the required parameter 'achievement_name' is set
        if ($achievement_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $achievement_name when calling getUserAchievementProgress');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/achievements/{achievement_name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($achievement_name !== null) {
            $resourcePath = str_replace(
                "{" . "achievement_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($achievement_name),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\UserAchievementGroupResource',
                '/users/{user_id}/achievements/{achievement_name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\UserAchievementGroupResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\UserAchievementGroupResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserAchievementsProgress
     *
     * Retrieve progress on achievements for a given user
     *
     * @param int $user_id The user&#39;s id (required)
     * @param bool $filter_achievement_derived Filter for achievements that are derived from other services (optional)
     * @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
     * @param string $filter_achievement_name Filter for achievements whose name contains a string (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceUserAchievementGroupResource_
     */
    public function getUserAchievementsProgress($user_id, $filter_achievement_derived = null, $filter_achievement_tagset = null, $filter_achievement_name = null, $size = null, $page = null)
    {
        list($response) = $this->getUserAchievementsProgressWithHttpInfo($user_id, $filter_achievement_derived, $filter_achievement_tagset, $filter_achievement_name, $size, $page);
        return $response;
    }

    /**
     * Operation getUserAchievementsProgressWithHttpInfo
     *
     * Retrieve progress on achievements for a given user
     *
     * @param int $user_id The user&#39;s id (required)
     * @param bool $filter_achievement_derived Filter for achievements that are derived from other services (optional)
     * @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
     * @param string $filter_achievement_name Filter for achievements whose name contains a string (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceUserAchievementGroupResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserAchievementsProgressWithHttpInfo($user_id, $filter_achievement_derived = null, $filter_achievement_tagset = null, $filter_achievement_name = null, $size = null, $page = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserAchievementsProgress');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/achievements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_achievement_derived !== null) {
            $queryParams['filter_achievement_derived'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_derived);
        }
        // query params
        if ($filter_achievement_tagset !== null) {
            $queryParams['filter_achievement_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_tagset);
        }
        // query params
        if ($filter_achievement_name !== null) {
            $queryParams['filter_achievement_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_name);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_',
                '/users/{user_id}/achievements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsersAchievementProgress
     *
     * Retrieve progress on a given achievement for all users
     *
     * @param string $achievement_name The achievement&#39;s name (required)
     * @param bool $filter_achievement_derived Filter for achievements that are derived from other services (optional)
     * @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
     * @param string $filter_achievement_name Filter for achievements whose name contains a string (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceUserAchievementGroupResource_
     */
    public function getUsersAchievementProgress($achievement_name, $filter_achievement_derived = null, $filter_achievement_tagset = null, $filter_achievement_name = null, $size = null, $page = null)
    {
        list($response) = $this->getUsersAchievementProgressWithHttpInfo($achievement_name, $filter_achievement_derived, $filter_achievement_tagset, $filter_achievement_name, $size, $page);
        return $response;
    }

    /**
     * Operation getUsersAchievementProgressWithHttpInfo
     *
     * Retrieve progress on a given achievement for all users
     *
     * @param string $achievement_name The achievement&#39;s name (required)
     * @param bool $filter_achievement_derived Filter for achievements that are derived from other services (optional)
     * @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
     * @param string $filter_achievement_name Filter for achievements whose name contains a string (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceUserAchievementGroupResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersAchievementProgressWithHttpInfo($achievement_name, $filter_achievement_derived = null, $filter_achievement_tagset = null, $filter_achievement_name = null, $size = null, $page = null)
    {
        // verify the required parameter 'achievement_name' is set
        if ($achievement_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $achievement_name when calling getUsersAchievementProgress');
        }
        // parse inputs
        $resourcePath = "/users/achievements/{achievement_name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_achievement_derived !== null) {
            $queryParams['filter_achievement_derived'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_derived);
        }
        // query params
        if ($filter_achievement_tagset !== null) {
            $queryParams['filter_achievement_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_tagset);
        }
        // query params
        if ($filter_achievement_name !== null) {
            $queryParams['filter_achievement_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_name);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // path params
        if ($achievement_name !== null) {
            $resourcePath = str_replace(
                "{" . "achievement_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($achievement_name),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_',
                '/users/achievements/{achievement_name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsersAchievementsProgress
     *
     * Retrieve progress on achievements for all users
     *
     * @param bool $filter_achievement_derived Filter for achievements that are derived from other services (optional)
     * @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
     * @param string $filter_achievement_name Filter for achievements whose name contains a string (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceUserAchievementGroupResource_
     */
    public function getUsersAchievementsProgress($filter_achievement_derived = null, $filter_achievement_tagset = null, $filter_achievement_name = null, $size = null, $page = null)
    {
        list($response) = $this->getUsersAchievementsProgressWithHttpInfo($filter_achievement_derived, $filter_achievement_tagset, $filter_achievement_name, $size, $page);
        return $response;
    }

    /**
     * Operation getUsersAchievementsProgressWithHttpInfo
     *
     * Retrieve progress on achievements for all users
     *
     * @param bool $filter_achievement_derived Filter for achievements that are derived from other services (optional)
     * @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
     * @param string $filter_achievement_name Filter for achievements whose name contains a string (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceUserAchievementGroupResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersAchievementsProgressWithHttpInfo($filter_achievement_derived = null, $filter_achievement_tagset = null, $filter_achievement_name = null, $size = null, $page = null)
    {
        // parse inputs
        $resourcePath = "/users/achievements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_achievement_derived !== null) {
            $queryParams['filter_achievement_derived'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_derived);
        }
        // query params
        if ($filter_achievement_tagset !== null) {
            $queryParams['filter_achievement_tagset'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_tagset);
        }
        // query params
        if ($filter_achievement_name !== null) {
            $queryParams['filter_achievement_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_achievement_name);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_',
                '/users/achievements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUserAchievementGroupResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation incrementAchievementProgress
     *
     * Increment an achievement progress record for a user
     *
     * @param int $user_id The user&#39;s id (required)
     * @param string $achievement_name The achievement&#39;s name (required)
     * @param int $progress The amount to add to the progress value (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\UserAchievementGroupResource
     */
    public function incrementAchievementProgress($user_id, $achievement_name, $progress = null)
    {
        list($response) = $this->incrementAchievementProgressWithHttpInfo($user_id, $achievement_name, $progress);
        return $response;
    }

    /**
     * Operation incrementAchievementProgressWithHttpInfo
     *
     * Increment an achievement progress record for a user
     *
     * @param int $user_id The user&#39;s id (required)
     * @param string $achievement_name The achievement&#39;s name (required)
     * @param int $progress The amount to add to the progress value (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\UserAchievementGroupResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function incrementAchievementProgressWithHttpInfo($user_id, $achievement_name, $progress = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling incrementAchievementProgress');
        }
        // verify the required parameter 'achievement_name' is set
        if ($achievement_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $achievement_name when calling incrementAchievementProgress');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/achievements/{achievement_name}/progress";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($achievement_name !== null) {
            $resourcePath = str_replace(
                "{" . "achievement_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($achievement_name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($progress)) {
            $_tempBody = $progress;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\UserAchievementGroupResource',
                '/users/{user_id}/achievements/{achievement_name}/progress'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\UserAchievementGroupResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\UserAchievementGroupResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setAchievementProgress
     *
     * Set an achievement progress record for a user
     *
     * @param int $user_id The user&#39;s id (required)
     * @param string $achievement_name The achievement&#39;s name (required)
     * @param int $progress The new progress value (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\UserAchievementGroupResource
     */
    public function setAchievementProgress($user_id, $achievement_name, $progress = null)
    {
        list($response) = $this->setAchievementProgressWithHttpInfo($user_id, $achievement_name, $progress);
        return $response;
    }

    /**
     * Operation setAchievementProgressWithHttpInfo
     *
     * Set an achievement progress record for a user
     *
     * @param int $user_id The user&#39;s id (required)
     * @param string $achievement_name The achievement&#39;s name (required)
     * @param int $progress The new progress value (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\UserAchievementGroupResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAchievementProgressWithHttpInfo($user_id, $achievement_name, $progress = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setAchievementProgress');
        }
        // verify the required parameter 'achievement_name' is set
        if ($achievement_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $achievement_name when calling setAchievementProgress');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}/achievements/{achievement_name}/progress";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($achievement_name !== null) {
            $resourcePath = str_replace(
                "{" . "achievement_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($achievement_name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($progress)) {
            $_tempBody = $progress;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\UserAchievementGroupResource',
                '/users/{user_id}/achievements/{achievement_name}/progress'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\UserAchievementGroupResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\UserAchievementGroupResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAchievement
     *
     * Update an achievement definition
     *
     * @param string $name The name of the achievement (required)
     * @param \KnetikCloud\Model\AchievementDefinitionResource $achievement The achievement definition (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\AchievementDefinitionResource
     */
    public function updateAchievement($name, $achievement = null)
    {
        list($response) = $this->updateAchievementWithHttpInfo($name, $achievement);
        return $response;
    }

    /**
     * Operation updateAchievementWithHttpInfo
     *
     * Update an achievement definition
     *
     * @param string $name The name of the achievement (required)
     * @param \KnetikCloud\Model\AchievementDefinitionResource $achievement The achievement definition (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\AchievementDefinitionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAchievementWithHttpInfo($name, $achievement = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateAchievement');
        }
        // parse inputs
        $resourcePath = "/achievements/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($achievement)) {
            $_tempBody = $achievement;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\AchievementDefinitionResource',
                '/achievements/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\AchievementDefinitionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\AchievementDefinitionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAchievementTemplate
     *
     * Update an achievement template
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\TemplateResource $template The updated template (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\TemplateResource
     */
    public function updateAchievementTemplate($id, $template = null)
    {
        list($response) = $this->updateAchievementTemplateWithHttpInfo($id, $template);
        return $response;
    }

    /**
     * Operation updateAchievementTemplateWithHttpInfo
     *
     * Update an achievement template
     *
     * @param string $id The id of the template (required)
     * @param \KnetikCloud\Model\TemplateResource $template The updated template (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\TemplateResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAchievementTemplateWithHttpInfo($id, $template = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateAchievementTemplate');
        }
        // parse inputs
        $resourcePath = "/achievements/templates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($template)) {
            $_tempBody = $template;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\TemplateResource',
                '/achievements/templates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\TemplateResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\TemplateResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
