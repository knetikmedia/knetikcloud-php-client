<?php
/**
 * Reporting_UsageApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use KnetikCloud\ApiException;
use KnetikCloud\Configuration;
use KnetikCloud\HeaderSelector;
use KnetikCloud\ObjectSerializer;

/**
 * Reporting_UsageApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Reporting_UsageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getUsageByDay
     *
     * Returns aggregated endpoint usage information by day
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByDay($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByDayWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByDayWithHttpInfo
     *
     * Returns aggregated endpoint usage information by day
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByDayWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByDayRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsageByDayAsync
     *
     * Returns aggregated endpoint usage information by day
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByDayAsync($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        return $this->getUsageByDayAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUsageByDayAsyncWithHttpInfo
     *
     * Returns aggregated endpoint usage information by day
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByDayAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByDayRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUsageByDay'
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsageByDayRequest($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByDay');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByDay');
        }

        $resourcePath = '/reporting/usage/day';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = ObjectSerializer::toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = ObjectSerializer::toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsageByHour
     *
     * Returns aggregated endpoint usage information by hour
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByHour($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByHourWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByHourWithHttpInfo
     *
     * Returns aggregated endpoint usage information by hour
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByHourWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByHourRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsageByHourAsync
     *
     * Returns aggregated endpoint usage information by hour
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByHourAsync($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        return $this->getUsageByHourAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUsageByHourAsyncWithHttpInfo
     *
     * Returns aggregated endpoint usage information by hour
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByHourAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByHourRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUsageByHour'
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsageByHourRequest($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByHour');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByHour');
        }

        $resourcePath = '/reporting/usage/hour';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = ObjectSerializer::toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = ObjectSerializer::toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsageByMinute
     *
     * Returns aggregated endpoint usage information by minute
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByMinute($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByMinuteWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByMinuteWithHttpInfo
     *
     * Returns aggregated endpoint usage information by minute
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByMinuteWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByMinuteRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsageByMinuteAsync
     *
     * Returns aggregated endpoint usage information by minute
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByMinuteAsync($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        return $this->getUsageByMinuteAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUsageByMinuteAsyncWithHttpInfo
     *
     * Returns aggregated endpoint usage information by minute
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByMinuteAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByMinuteRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUsageByMinute'
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsageByMinuteRequest($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByMinute');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByMinute');
        }

        $resourcePath = '/reporting/usage/minute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = ObjectSerializer::toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = ObjectSerializer::toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsageByMonth
     *
     * Returns aggregated endpoint usage information by month
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByMonth($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByMonthWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByMonthWithHttpInfo
     *
     * Returns aggregated endpoint usage information by month
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByMonthWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByMonthRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsageByMonthAsync
     *
     * Returns aggregated endpoint usage information by month
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByMonthAsync($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        return $this->getUsageByMonthAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUsageByMonthAsyncWithHttpInfo
     *
     * Returns aggregated endpoint usage information by month
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByMonthAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByMonthRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUsageByMonth'
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsageByMonthRequest($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByMonth');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByMonth');
        }

        $resourcePath = '/reporting/usage/month';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = ObjectSerializer::toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = ObjectSerializer::toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsageByYear
     *
     * Returns aggregated endpoint usage information by year
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByYear($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByYearWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByYearWithHttpInfo
     *
     * Returns aggregated endpoint usage information by year
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByYearWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByYearRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsageByYearAsync
     *
     * Returns aggregated endpoint usage information by year
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByYearAsync($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        return $this->getUsageByYearAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUsageByYearAsyncWithHttpInfo
     *
     * Returns aggregated endpoint usage information by year
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageByYearAsyncWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        $returnType = '\KnetikCloud\Model\PageResourceUsageInfo_';
        $request = $this->getUsageByYearRequest($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUsageByYear'
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsageByYearRequest($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByYear');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByYear');
        }

        $resourcePath = '/reporting/usage/year';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = ObjectSerializer::toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = ObjectSerializer::toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsageEndpoints
     *
     * Returns list of endpoints called (method and url)
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getUsageEndpoints($start_date, $end_date)
    {
        list($response) = $this->getUsageEndpointsWithHttpInfo($start_date, $end_date);
        return $response;
    }

    /**
     * Operation getUsageEndpointsWithHttpInfo
     *
     * Returns list of endpoints called (method and url)
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageEndpointsWithHttpInfo($start_date, $end_date)
    {
        $returnType = 'string[]';
        $request = $this->getUsageEndpointsRequest($start_date, $end_date);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsageEndpointsAsync
     *
     * Returns list of endpoints called (method and url)
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageEndpointsAsync($start_date, $end_date)
    {
        return $this->getUsageEndpointsAsyncWithHttpInfo($start_date, $end_date)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUsageEndpointsAsyncWithHttpInfo
     *
     * Returns list of endpoints called (method and url)
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsageEndpointsAsyncWithHttpInfo($start_date, $end_date)
    {
        $returnType = 'string[]';
        $request = $this->getUsageEndpointsRequest($start_date, $end_date);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getUsageEndpoints'
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsageEndpointsRequest($start_date, $end_date)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageEndpoints');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageEndpoints');
        }

        $resourcePath = '/reporting/usage/endpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

}
