<?php
/**
 * InvoicesApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use \KnetikCloud\ApiClient;
use \KnetikCloud\ApiException;
use \KnetikCloud\Configuration;
use \KnetikCloud\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoicesApi
{
    /**
     * API Client
     *
     * @var \KnetikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \KnetikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\KnetikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \KnetikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \KnetikCloud\ApiClient $apiClient set the API client
     *
     * @return InvoicesApi
     */
    public function setApiClient(\KnetikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createInvoice
     *
     * Create an invoice
     *
     * @param \KnetikCloud\Model\InvoiceCreateRequest $req Invoice to be created (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\InvoiceResource[]
     */
    public function createInvoice($req = null)
    {
        list($response) = $this->createInvoiceWithHttpInfo($req);
        return $response;
    }

    /**
     * Operation createInvoiceWithHttpInfo
     *
     * Create an invoice
     *
     * @param \KnetikCloud\Model\InvoiceCreateRequest $req Invoice to be created (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\InvoiceResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createInvoiceWithHttpInfo($req = null)
    {
        // parse inputs
        $resourcePath = "/invoices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($req)) {
            $_tempBody = $req;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\InvoiceResource[]',
                '/invoices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\InvoiceResource[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\InvoiceResource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFulFillmentStatuses
     *
     * Lists available fulfillment statuses
     *
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return string[]
     */
    public function getFulFillmentStatuses()
    {
        list($response) = $this->getFulFillmentStatusesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getFulFillmentStatusesWithHttpInfo
     *
     * Lists available fulfillment statuses
     *
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFulFillmentStatusesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/invoices/fulfillment-statuses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/invoices/fulfillment-statuses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInvoice
     *
     * Retrieve an invoice
     *
     * @param int $id The id of the invoice (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\InvoiceResource
     */
    public function getInvoice($id)
    {
        list($response) = $this->getInvoiceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getInvoiceWithHttpInfo
     *
     * Retrieve an invoice
     *
     * @param int $id The id of the invoice (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\InvoiceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getInvoice');
        }
        // parse inputs
        $resourcePath = "/invoices/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\InvoiceResource',
                '/invoices/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\InvoiceResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\InvoiceResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInvoiceLogs
     *
     * List invoice logs
     *
     * @param int $id The id of the invoice (required)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceInvoiceLogEntry_
     */
    public function getInvoiceLogs($id, $size = null, $page = null)
    {
        list($response) = $this->getInvoiceLogsWithHttpInfo($id, $size, $page);
        return $response;
    }

    /**
     * Operation getInvoiceLogsWithHttpInfo
     *
     * List invoice logs
     *
     * @param int $id The id of the invoice (required)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceInvoiceLogEntry_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceLogsWithHttpInfo($id, $size = null, $page = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getInvoiceLogs');
        }
        // parse inputs
        $resourcePath = "/invoices/{id}/logs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceInvoiceLogEntry_',
                '/invoices/{id}/logs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceInvoiceLogEntry_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceInvoiceLogEntry_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInvoices
     *
     * Retrieve invoices
     *
     * @param int $filter_user The id of a user to get invoices for. Automtically added if not being called with admin permissions. (optional)
     * @param string $filter_email Filters invoices by customer&#39;s email. Admins only. (optional)
     * @param string $filter_fulfillment_status Filters invoices by fulfillment status type. Can be a comma separated list of statuses (optional)
     * @param string $filter_payment_status Filters invoices by payment status type. Can be a comma separated list of statuses (optional)
     * @param string $filter_item_name Filters invoices by item name containing the given string (optional)
     * @param string $filter_external_ref Filters invoices by external reference. (optional)
     * @param string $filter_created_date Filters invoices by creation date. Multiple values possible for range search. Format: filter_created_date&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ) and ts is a unix timestamp in seconds. Ex: filter_created_date&#x3D;GT,1452154258,LT,1554254874 (optional)
     * @param string $filter_vendor_ids Filters invoices for ones from one of the vendors whose id is in the given comma separated list (optional)
     * @param string $filter_currency Filters invoices by currency. ISO3 currency code (optional)
     * @param string $filter_shipping_state_name Filters invoices by shipping address: Exact match state name (optional)
     * @param string $filter_shipping_country_name Filters invoices by shipping address: Exact match country name (optional)
     * @param string $filter_shipping Filters invoices by shipping price. Multiple values possible for range search. Format: filter_shipping&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_shipping&#x3D;GT,14.58,LT,15.54 (optional)
     * @param string $filter_vendor_name Filters invoices by vendor name starting with given string (optional)
     * @param string $filter_sku Filters invoices by item sku (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceInvoiceResource_
     */
    public function getInvoices($filter_user = null, $filter_email = null, $filter_fulfillment_status = null, $filter_payment_status = null, $filter_item_name = null, $filter_external_ref = null, $filter_created_date = null, $filter_vendor_ids = null, $filter_currency = null, $filter_shipping_state_name = null, $filter_shipping_country_name = null, $filter_shipping = null, $filter_vendor_name = null, $filter_sku = null, $size = null, $page = null, $order = null)
    {
        list($response) = $this->getInvoicesWithHttpInfo($filter_user, $filter_email, $filter_fulfillment_status, $filter_payment_status, $filter_item_name, $filter_external_ref, $filter_created_date, $filter_vendor_ids, $filter_currency, $filter_shipping_state_name, $filter_shipping_country_name, $filter_shipping, $filter_vendor_name, $filter_sku, $size, $page, $order);
        return $response;
    }

    /**
     * Operation getInvoicesWithHttpInfo
     *
     * Retrieve invoices
     *
     * @param int $filter_user The id of a user to get invoices for. Automtically added if not being called with admin permissions. (optional)
     * @param string $filter_email Filters invoices by customer&#39;s email. Admins only. (optional)
     * @param string $filter_fulfillment_status Filters invoices by fulfillment status type. Can be a comma separated list of statuses (optional)
     * @param string $filter_payment_status Filters invoices by payment status type. Can be a comma separated list of statuses (optional)
     * @param string $filter_item_name Filters invoices by item name containing the given string (optional)
     * @param string $filter_external_ref Filters invoices by external reference. (optional)
     * @param string $filter_created_date Filters invoices by creation date. Multiple values possible for range search. Format: filter_created_date&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ) and ts is a unix timestamp in seconds. Ex: filter_created_date&#x3D;GT,1452154258,LT,1554254874 (optional)
     * @param string $filter_vendor_ids Filters invoices for ones from one of the vendors whose id is in the given comma separated list (optional)
     * @param string $filter_currency Filters invoices by currency. ISO3 currency code (optional)
     * @param string $filter_shipping_state_name Filters invoices by shipping address: Exact match state name (optional)
     * @param string $filter_shipping_country_name Filters invoices by shipping address: Exact match country name (optional)
     * @param string $filter_shipping Filters invoices by shipping price. Multiple values possible for range search. Format: filter_shipping&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_shipping&#x3D;GT,14.58,LT,15.54 (optional)
     * @param string $filter_vendor_name Filters invoices by vendor name starting with given string (optional)
     * @param string $filter_sku Filters invoices by item sku (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceInvoiceResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesWithHttpInfo($filter_user = null, $filter_email = null, $filter_fulfillment_status = null, $filter_payment_status = null, $filter_item_name = null, $filter_external_ref = null, $filter_created_date = null, $filter_vendor_ids = null, $filter_currency = null, $filter_shipping_state_name = null, $filter_shipping_country_name = null, $filter_shipping = null, $filter_vendor_name = null, $filter_sku = null, $size = null, $page = null, $order = null)
    {
        // parse inputs
        $resourcePath = "/invoices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter_user !== null) {
            $queryParams['filter_user'] = $this->apiClient->getSerializer()->toQueryValue($filter_user);
        }
        // query params
        if ($filter_email !== null) {
            $queryParams['filter_email'] = $this->apiClient->getSerializer()->toQueryValue($filter_email);
        }
        // query params
        if ($filter_fulfillment_status !== null) {
            $queryParams['filter_fulfillment_status'] = $this->apiClient->getSerializer()->toQueryValue($filter_fulfillment_status);
        }
        // query params
        if ($filter_payment_status !== null) {
            $queryParams['filter_payment_status'] = $this->apiClient->getSerializer()->toQueryValue($filter_payment_status);
        }
        // query params
        if ($filter_item_name !== null) {
            $queryParams['filter_item_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_item_name);
        }
        // query params
        if ($filter_external_ref !== null) {
            $queryParams['filter_external_ref'] = $this->apiClient->getSerializer()->toQueryValue($filter_external_ref);
        }
        // query params
        if ($filter_created_date !== null) {
            $queryParams['filter_created_date'] = $this->apiClient->getSerializer()->toQueryValue($filter_created_date);
        }
        // query params
        if ($filter_vendor_ids !== null) {
            $queryParams['filter_vendor_ids'] = $this->apiClient->getSerializer()->toQueryValue($filter_vendor_ids);
        }
        // query params
        if ($filter_currency !== null) {
            $queryParams['filter_currency'] = $this->apiClient->getSerializer()->toQueryValue($filter_currency);
        }
        // query params
        if ($filter_shipping_state_name !== null) {
            $queryParams['filter_shipping_state_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_shipping_state_name);
        }
        // query params
        if ($filter_shipping_country_name !== null) {
            $queryParams['filter_shipping_country_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_shipping_country_name);
        }
        // query params
        if ($filter_shipping !== null) {
            $queryParams['filter_shipping'] = $this->apiClient->getSerializer()->toQueryValue($filter_shipping);
        }
        // query params
        if ($filter_vendor_name !== null) {
            $queryParams['filter_vendor_name'] = $this->apiClient->getSerializer()->toQueryValue($filter_vendor_name);
        }
        // query params
        if ($filter_sku !== null) {
            $queryParams['filter_sku'] = $this->apiClient->getSerializer()->toQueryValue($filter_sku);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceInvoiceResource_',
                '/invoices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceInvoiceResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceInvoiceResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPaymentStatuses
     *
     * Lists available payment statuses
     *
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return string[]
     */
    public function getPaymentStatuses()
    {
        list($response) = $this->getPaymentStatusesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPaymentStatusesWithHttpInfo
     *
     * Lists available payment statuses
     *
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentStatusesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/invoices/payment-statuses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/invoices/payment-statuses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInvoice
     *
     * Trigger payment of an invoice
     *
     * @param int $id The id of the invoice (required)
     * @param \KnetikCloud\Model\PayBySavedMethodRequest $request Payment info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function payInvoice($id, $request = null)
    {
        list($response) = $this->payInvoiceWithHttpInfo($id, $request);
        return $response;
    }

    /**
     * Operation payInvoiceWithHttpInfo
     *
     * Trigger payment of an invoice
     *
     * @param int $id The id of the invoice (required)
     * @param \KnetikCloud\Model\PayBySavedMethodRequest $request Payment info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInvoiceWithHttpInfo($id, $request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling payInvoice');
        }
        // parse inputs
        $resourcePath = "/invoices/{id}/payments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invoices/{id}/payments'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setExternalRef
     *
     * Set the external reference of an invoice
     *
     * @param int $id The id of the invoice (required)
     * @param string $external_ref External reference info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function setExternalRef($id, $external_ref = null)
    {
        list($response) = $this->setExternalRefWithHttpInfo($id, $external_ref);
        return $response;
    }

    /**
     * Operation setExternalRefWithHttpInfo
     *
     * Set the external reference of an invoice
     *
     * @param int $id The id of the invoice (required)
     * @param string $external_ref External reference info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setExternalRefWithHttpInfo($id, $external_ref = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling setExternalRef');
        }
        // parse inputs
        $resourcePath = "/invoices/{id}/external-ref";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($external_ref)) {
            $_tempBody = $external_ref;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invoices/{id}/external-ref'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setInvoiceItemFulfillmentStatus
     *
     * Set the fulfillment status of an invoice item
     *
     * @param int $id The id of the invoice (required)
     * @param string $sku The sku of an item in the invoice (required)
     * @param string $status The new fulfillment status for the item. Additional options may be available based on configuration.  Allowable values:  &#39;unfulfilled&#39;, &#39;fulfilled&#39;, &#39;not fulfillable&#39;, &#39;failed&#39;, &#39;processing&#39;, &#39;failed_permanent&#39;, &#39;delayed&#39; (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function setInvoiceItemFulfillmentStatus($id, $sku, $status)
    {
        list($response) = $this->setInvoiceItemFulfillmentStatusWithHttpInfo($id, $sku, $status);
        return $response;
    }

    /**
     * Operation setInvoiceItemFulfillmentStatusWithHttpInfo
     *
     * Set the fulfillment status of an invoice item
     *
     * @param int $id The id of the invoice (required)
     * @param string $sku The sku of an item in the invoice (required)
     * @param string $status The new fulfillment status for the item. Additional options may be available based on configuration.  Allowable values:  &#39;unfulfilled&#39;, &#39;fulfilled&#39;, &#39;not fulfillable&#39;, &#39;failed&#39;, &#39;processing&#39;, &#39;failed_permanent&#39;, &#39;delayed&#39; (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setInvoiceItemFulfillmentStatusWithHttpInfo($id, $sku, $status)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling setInvoiceItemFulfillmentStatus');
        }
        // verify the required parameter 'sku' is set
        if ($sku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sku when calling setInvoiceItemFulfillmentStatus');
        }
        // verify the required parameter 'status' is set
        if ($status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling setInvoiceItemFulfillmentStatus');
        }
        // parse inputs
        $resourcePath = "/invoices/{id}/items/{sku}/fulfillment-status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                "{" . "sku" . "}",
                $this->apiClient->getSerializer()->toPathValue($sku),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($status)) {
            $_tempBody = $status;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invoices/{id}/items/{sku}/fulfillment-status'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setOrderNotes
     *
     * Set the order notes of an invoice
     *
     * @param int $id The id of the invoice (required)
     * @param string $order_notes Payment status info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function setOrderNotes($id, $order_notes = null)
    {
        list($response) = $this->setOrderNotesWithHttpInfo($id, $order_notes);
        return $response;
    }

    /**
     * Operation setOrderNotesWithHttpInfo
     *
     * Set the order notes of an invoice
     *
     * @param int $id The id of the invoice (required)
     * @param string $order_notes Payment status info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setOrderNotesWithHttpInfo($id, $order_notes = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling setOrderNotes');
        }
        // parse inputs
        $resourcePath = "/invoices/{id}/order-notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($order_notes)) {
            $_tempBody = $order_notes;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invoices/{id}/order-notes'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setPaymentStatus
     *
     * Set the payment status of an invoice
     *
     * @param int $id The id of the invoice (required)
     * @param \KnetikCloud\Model\InvoicePaymentStatusRequest $request Payment status info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function setPaymentStatus($id, $request = null)
    {
        list($response) = $this->setPaymentStatusWithHttpInfo($id, $request);
        return $response;
    }

    /**
     * Operation setPaymentStatusWithHttpInfo
     *
     * Set the payment status of an invoice
     *
     * @param int $id The id of the invoice (required)
     * @param \KnetikCloud\Model\InvoicePaymentStatusRequest $request Payment status info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPaymentStatusWithHttpInfo($id, $request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling setPaymentStatus');
        }
        // parse inputs
        $resourcePath = "/invoices/{id}/payment-status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invoices/{id}/payment-status'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateBillingInfo
     *
     * Set or update billing info
     *
     * @param int $id The id of the invoice (required)
     * @param \KnetikCloud\Model\AddressResource $billing_info_request Address info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function updateBillingInfo($id, $billing_info_request = null)
    {
        list($response) = $this->updateBillingInfoWithHttpInfo($id, $billing_info_request);
        return $response;
    }

    /**
     * Operation updateBillingInfoWithHttpInfo
     *
     * Set or update billing info
     *
     * @param int $id The id of the invoice (required)
     * @param \KnetikCloud\Model\AddressResource $billing_info_request Address info (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBillingInfoWithHttpInfo($id, $billing_info_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateBillingInfo');
        }
        // parse inputs
        $resourcePath = "/invoices/{id}/billing-address";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($billing_info_request)) {
            $_tempBody = $billing_info_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invoices/{id}/billing-address'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
