<?php
/**
 * TaxesApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use \KnetikCloud\ApiClient;
use \KnetikCloud\ApiException;
use \KnetikCloud\Configuration;
use \KnetikCloud\ObjectSerializer;

/**
 * TaxesApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxesApi
{
    /**
     * API Client
     *
     * @var \KnetikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \KnetikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\KnetikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \KnetikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \KnetikCloud\ApiClient $apiClient set the API client
     *
     * @return TaxesApi
     */
    public function setApiClient(\KnetikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createCountryTax
     *
     * Create a country tax
     *
     * @param \KnetikCloud\Model\CountryTaxResource $tax_resource The tax object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\CountryTaxResource
     */
    public function createCountryTax($tax_resource = null)
    {
        list($response) = $this->createCountryTaxWithHttpInfo($tax_resource);
        return $response;
    }

    /**
     * Operation createCountryTaxWithHttpInfo
     *
     * Create a country tax
     *
     * @param \KnetikCloud\Model\CountryTaxResource $tax_resource The tax object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\CountryTaxResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCountryTaxWithHttpInfo($tax_resource = null)
    {
        // parse inputs
        $resourcePath = "/tax/countries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($tax_resource)) {
            $_tempBody = $tax_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\CountryTaxResource',
                '/tax/countries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\CountryTaxResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\CountryTaxResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createStateTax
     *
     * Create a state tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param \KnetikCloud\Model\StateTaxResource $tax_resource The tax object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\StateTaxResource
     */
    public function createStateTax($country_code_iso3, $tax_resource = null)
    {
        list($response) = $this->createStateTaxWithHttpInfo($country_code_iso3, $tax_resource);
        return $response;
    }

    /**
     * Operation createStateTaxWithHttpInfo
     *
     * Create a state tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param \KnetikCloud\Model\StateTaxResource $tax_resource The tax object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\StateTaxResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStateTaxWithHttpInfo($country_code_iso3, $tax_resource = null)
    {
        // verify the required parameter 'country_code_iso3' is set
        if ($country_code_iso3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code_iso3 when calling createStateTax');
        }
        // parse inputs
        $resourcePath = "/tax/countries/{country_code_iso3}/states";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($country_code_iso3 !== null) {
            $resourcePath = str_replace(
                "{" . "country_code_iso3" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code_iso3),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($tax_resource)) {
            $_tempBody = $tax_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\StateTaxResource',
                '/tax/countries/{country_code_iso3}/states'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\StateTaxResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\StateTaxResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCountryTax
     *
     * Delete an existing tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteCountryTax($country_code_iso3)
    {
        list($response) = $this->deleteCountryTaxWithHttpInfo($country_code_iso3);
        return $response;
    }

    /**
     * Operation deleteCountryTaxWithHttpInfo
     *
     * Delete an existing tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCountryTaxWithHttpInfo($country_code_iso3)
    {
        // verify the required parameter 'country_code_iso3' is set
        if ($country_code_iso3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code_iso3 when calling deleteCountryTax');
        }
        // parse inputs
        $resourcePath = "/tax/countries/{country_code_iso3}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($country_code_iso3 !== null) {
            $resourcePath = str_replace(
                "{" . "country_code_iso3" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code_iso3),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tax/countries/{country_code_iso3}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteStateTax
     *
     * Delete an existing state tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param string $state_code The code of the state (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteStateTax($country_code_iso3, $state_code)
    {
        list($response) = $this->deleteStateTaxWithHttpInfo($country_code_iso3, $state_code);
        return $response;
    }

    /**
     * Operation deleteStateTaxWithHttpInfo
     *
     * Delete an existing state tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param string $state_code The code of the state (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStateTaxWithHttpInfo($country_code_iso3, $state_code)
    {
        // verify the required parameter 'country_code_iso3' is set
        if ($country_code_iso3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code_iso3 when calling deleteStateTax');
        }
        // verify the required parameter 'state_code' is set
        if ($state_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state_code when calling deleteStateTax');
        }
        // parse inputs
        $resourcePath = "/tax/countries/{country_code_iso3}/states/{state_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($country_code_iso3 !== null) {
            $resourcePath = str_replace(
                "{" . "country_code_iso3" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code_iso3),
                $resourcePath
            );
        }
        // path params
        if ($state_code !== null) {
            $resourcePath = str_replace(
                "{" . "state_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($state_code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tax/countries/{country_code_iso3}/states/{state_code}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCountryTax
     *
     * Get a single tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\CountryTaxResource
     */
    public function getCountryTax($country_code_iso3)
    {
        list($response) = $this->getCountryTaxWithHttpInfo($country_code_iso3);
        return $response;
    }

    /**
     * Operation getCountryTaxWithHttpInfo
     *
     * Get a single tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\CountryTaxResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountryTaxWithHttpInfo($country_code_iso3)
    {
        // verify the required parameter 'country_code_iso3' is set
        if ($country_code_iso3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code_iso3 when calling getCountryTax');
        }
        // parse inputs
        $resourcePath = "/tax/countries/{country_code_iso3}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($country_code_iso3 !== null) {
            $resourcePath = str_replace(
                "{" . "country_code_iso3" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code_iso3),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\CountryTaxResource',
                '/tax/countries/{country_code_iso3}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\CountryTaxResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\CountryTaxResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCountryTaxes
     *
     * List and search taxes
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceCountryTaxResource_
     */
    public function getCountryTaxes($size = '25', $page = '1', $order = 'name:ASC')
    {
        list($response) = $this->getCountryTaxesWithHttpInfo($size, $page, $order);
        return $response;
    }

    /**
     * Operation getCountryTaxesWithHttpInfo
     *
     * List and search taxes
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceCountryTaxResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountryTaxesWithHttpInfo($size = '25', $page = '1', $order = 'name:ASC')
    {
        // parse inputs
        $resourcePath = "/tax/countries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceCountryTaxResource_',
                '/tax/countries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceCountryTaxResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceCountryTaxResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStateTax
     *
     * Get a single state tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param string $state_code The code of the state (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\StateTaxResource
     */
    public function getStateTax($country_code_iso3, $state_code)
    {
        list($response) = $this->getStateTaxWithHttpInfo($country_code_iso3, $state_code);
        return $response;
    }

    /**
     * Operation getStateTaxWithHttpInfo
     *
     * Get a single state tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param string $state_code The code of the state (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\StateTaxResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStateTaxWithHttpInfo($country_code_iso3, $state_code)
    {
        // verify the required parameter 'country_code_iso3' is set
        if ($country_code_iso3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code_iso3 when calling getStateTax');
        }
        // verify the required parameter 'state_code' is set
        if ($state_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state_code when calling getStateTax');
        }
        // parse inputs
        $resourcePath = "/tax/countries/{country_code_iso3}/states/{state_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($country_code_iso3 !== null) {
            $resourcePath = str_replace(
                "{" . "country_code_iso3" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code_iso3),
                $resourcePath
            );
        }
        // path params
        if ($state_code !== null) {
            $resourcePath = str_replace(
                "{" . "state_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($state_code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\StateTaxResource',
                '/tax/countries/{country_code_iso3}/states/{state_code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\StateTaxResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\StateTaxResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStateTaxesForCountries
     *
     * List and search taxes across all countries
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceStateTaxResource_
     */
    public function getStateTaxesForCountries($size = '25', $page = '1', $order = null)
    {
        list($response) = $this->getStateTaxesForCountriesWithHttpInfo($size, $page, $order);
        return $response;
    }

    /**
     * Operation getStateTaxesForCountriesWithHttpInfo
     *
     * List and search taxes across all countries
     *
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceStateTaxResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStateTaxesForCountriesWithHttpInfo($size = '25', $page = '1', $order = null)
    {
        // parse inputs
        $resourcePath = "/tax/states";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceStateTaxResource_',
                '/tax/states'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceStateTaxResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceStateTaxResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStateTaxesForCountry
     *
     * List and search taxes within a country
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceStateTaxResource_
     */
    public function getStateTaxesForCountry($country_code_iso3, $size = '25', $page = '1', $order = null)
    {
        list($response) = $this->getStateTaxesForCountryWithHttpInfo($country_code_iso3, $size, $page, $order);
        return $response;
    }

    /**
     * Operation getStateTaxesForCountryWithHttpInfo
     *
     * List and search taxes within a country
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned (optional, default to 1)
     * @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceStateTaxResource_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStateTaxesForCountryWithHttpInfo($country_code_iso3, $size = '25', $page = '1', $order = null)
    {
        // verify the required parameter 'country_code_iso3' is set
        if ($country_code_iso3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code_iso3 when calling getStateTaxesForCountry');
        }
        // parse inputs
        $resourcePath = "/tax/countries/{country_code_iso3}/states";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        // path params
        if ($country_code_iso3 !== null) {
            $resourcePath = str_replace(
                "{" . "country_code_iso3" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code_iso3),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceStateTaxResource_',
                '/tax/countries/{country_code_iso3}/states'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceStateTaxResource_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceStateTaxResource_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCountryTax
     *
     * Create or update a tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param \KnetikCloud\Model\CountryTaxResource $tax_resource The tax object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\CountryTaxResource
     */
    public function updateCountryTax($country_code_iso3, $tax_resource = null)
    {
        list($response) = $this->updateCountryTaxWithHttpInfo($country_code_iso3, $tax_resource);
        return $response;
    }

    /**
     * Operation updateCountryTaxWithHttpInfo
     *
     * Create or update a tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param \KnetikCloud\Model\CountryTaxResource $tax_resource The tax object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\CountryTaxResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCountryTaxWithHttpInfo($country_code_iso3, $tax_resource = null)
    {
        // verify the required parameter 'country_code_iso3' is set
        if ($country_code_iso3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code_iso3 when calling updateCountryTax');
        }
        // parse inputs
        $resourcePath = "/tax/countries/{country_code_iso3}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($country_code_iso3 !== null) {
            $resourcePath = str_replace(
                "{" . "country_code_iso3" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code_iso3),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($tax_resource)) {
            $_tempBody = $tax_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\CountryTaxResource',
                '/tax/countries/{country_code_iso3}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\CountryTaxResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\CountryTaxResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateStateTax
     *
     * Create or update a state tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param string $state_code The code of the state (required)
     * @param \KnetikCloud\Model\StateTaxResource $tax_resource The tax object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\StateTaxResource
     */
    public function updateStateTax($country_code_iso3, $state_code, $tax_resource = null)
    {
        list($response) = $this->updateStateTaxWithHttpInfo($country_code_iso3, $state_code, $tax_resource);
        return $response;
    }

    /**
     * Operation updateStateTaxWithHttpInfo
     *
     * Create or update a state tax
     *
     * @param string $country_code_iso3 The iso3 code of the country (required)
     * @param string $state_code The code of the state (required)
     * @param \KnetikCloud\Model\StateTaxResource $tax_resource The tax object (optional)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\StateTaxResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateStateTaxWithHttpInfo($country_code_iso3, $state_code, $tax_resource = null)
    {
        // verify the required parameter 'country_code_iso3' is set
        if ($country_code_iso3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code_iso3 when calling updateStateTax');
        }
        // verify the required parameter 'state_code' is set
        if ($state_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state_code when calling updateStateTax');
        }
        // parse inputs
        $resourcePath = "/tax/countries/{country_code_iso3}/states/{state_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($country_code_iso3 !== null) {
            $resourcePath = str_replace(
                "{" . "country_code_iso3" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code_iso3),
                $resourcePath
            );
        }
        // path params
        if ($state_code !== null) {
            $resourcePath = str_replace(
                "{" . "state_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($state_code),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($tax_resource)) {
            $_tempBody = $tax_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\StateTaxResource',
                '/tax/countries/{country_code_iso3}/states/{state_code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\StateTaxResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\StateTaxResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
