<?php
/**
 * ReportingUsageApi
 * PHP version 5
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knetik Platform API Documentation latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KnetikCloud\Api;

use \KnetikCloud\ApiClient;
use \KnetikCloud\ApiException;
use \KnetikCloud\Configuration;
use \KnetikCloud\ObjectSerializer;

/**
 * ReportingUsageApi Class Doc Comment
 *
 * @category Class
 * @package  KnetikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportingUsageApi
{
    /**
     * API Client
     *
     * @var \KnetikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \KnetikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\KnetikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \KnetikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \KnetikCloud\ApiClient $apiClient set the API client
     *
     * @return ReportingUsageApi
     */
    public function setApiClient(\KnetikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getUsageByDay
     *
     * Returns aggregated endpoint usage information by day
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByDay($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByDayWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByDayWithHttpInfo
     *
     * Returns aggregated endpoint usage information by day
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByDayWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByDay');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByDay');
        }
        // parse inputs
        $resourcePath = "/reporting/usage/day";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = $this->apiClient->getSerializer()->toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = $this->apiClient->getSerializer()->toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = $this->apiClient->getSerializer()->toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceUsageInfo_',
                '/reporting/usage/day'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceUsageInfo_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsageByHour
     *
     * Returns aggregated endpoint usage information by hour
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByHour($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByHourWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByHourWithHttpInfo
     *
     * Returns aggregated endpoint usage information by hour
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByHourWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByHour');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByHour');
        }
        // parse inputs
        $resourcePath = "/reporting/usage/hour";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = $this->apiClient->getSerializer()->toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = $this->apiClient->getSerializer()->toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = $this->apiClient->getSerializer()->toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceUsageInfo_',
                '/reporting/usage/hour'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceUsageInfo_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsageByMinute
     *
     * Returns aggregated endpoint usage information by minute
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByMinute($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByMinuteWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByMinuteWithHttpInfo
     *
     * Returns aggregated endpoint usage information by minute
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByMinuteWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByMinute');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByMinute');
        }
        // parse inputs
        $resourcePath = "/reporting/usage/minute";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = $this->apiClient->getSerializer()->toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = $this->apiClient->getSerializer()->toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = $this->apiClient->getSerializer()->toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceUsageInfo_',
                '/reporting/usage/minute'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceUsageInfo_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsageByMonth
     *
     * Returns aggregated endpoint usage information by month
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByMonth($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByMonthWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByMonthWithHttpInfo
     *
     * Returns aggregated endpoint usage information by month
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByMonthWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByMonth');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByMonth');
        }
        // parse inputs
        $resourcePath = "/reporting/usage/month";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = $this->apiClient->getSerializer()->toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = $this->apiClient->getSerializer()->toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = $this->apiClient->getSerializer()->toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceUsageInfo_',
                '/reporting/usage/month'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceUsageInfo_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsageByYear
     *
     * Returns aggregated endpoint usage information by year
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return \KnetikCloud\Model\PageResourceUsageInfo_
     */
    public function getUsageByYear($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        list($response) = $this->getUsageByYearWithHttpInfo($start_date, $end_date, $combine_endpoints, $method, $url, $size, $page);
        return $response;
    }

    /**
     * Operation getUsageByYearWithHttpInfo
     *
     * Returns aggregated endpoint usage information by year
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @param bool $combine_endpoints Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)
     * @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
     * @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
     * @param int $size The number of objects returned per page (optional, default to 25)
     * @param int $page The number of the page returned, starting with 1 (optional, default to 1)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of \KnetikCloud\Model\PageResourceUsageInfo_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageByYearWithHttpInfo($start_date, $end_date, $combine_endpoints = 'false', $method = null, $url = null, $size = '25', $page = '1')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageByYear');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageByYear');
        }
        // parse inputs
        $resourcePath = "/reporting/usage/year";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($combine_endpoints !== null) {
            $queryParams['combine_endpoints'] = $this->apiClient->getSerializer()->toQueryValue($combine_endpoints);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = $this->apiClient->getSerializer()->toQueryValue($method);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = $this->apiClient->getSerializer()->toQueryValue($url);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\KnetikCloud\Model\PageResourceUsageInfo_',
                '/reporting/usage/year'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\KnetikCloud\Model\PageResourceUsageInfo_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\PageResourceUsageInfo_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsageEndpoints
     *
     * Returns list of endpoints called (method and url)
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return string[]
     */
    public function getUsageEndpoints($start_date, $end_date)
    {
        list($response) = $this->getUsageEndpointsWithHttpInfo($start_date, $end_date);
        return $response;
    }

    /**
     * Operation getUsageEndpointsWithHttpInfo
     *
     * Returns list of endpoints called (method and url)
     *
     * @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
     * @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
     * @throws \KnetikCloud\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsageEndpointsWithHttpInfo($start_date, $end_date)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getUsageEndpoints');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getUsageEndpoints');
        }
        // parse inputs
        $resourcePath = "/reporting/usage/endpoints";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/reporting/usage/endpoints'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\KnetikCloud\Model\Result', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
